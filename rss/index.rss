<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Hello World! I'm Vincent</title><description>Thoughts, stories and ideas.</description><link>http://localhost:2368/</link><generator>Ghost 0.7</generator><lastBuildDate>Fri, 26 Feb 2016 22:34:29 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Python 第一步 virtualenv</title><description>&lt;p&gt;剛開始接觸 Python 的時候, 最先了解到的是開發者社群的貢獻, 有別於 C/C++ 這類型語言給我的感覺, 在開發上使用第三方的函式庫, 是相當方便以及普遍的事情。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;a href="https://pypi.python.org/pypi"&gt;Python Package Index (PyPI)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;PyPI is the default Package Index for the Python community. It is open to all Python developers to consume and distribute their distributions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;早期 Python 在套件的安裝上有數種工具可以選擇, 不過目前比較主流的是透過 &lt;strong&gt;PIP&lt;/strong&gt; 來安裝套件 (搜尋、安裝已經建立在 PyPI 上的套件), 這邊會先建議在開始安裝其它套件之前, 可以先安裝名為 &lt;strong&gt;virtualenv&lt;/strong&gt;&lt;/p&gt;</description><link>http://localhost:2368/python-xin-shou-ru-men/</link><guid isPermaLink="false">2f5401a3-206c-4e83-9d88-7cbc63958609</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Wed, 24 Feb 2016 18:07:00 GMT</pubDate><content:encoded>&lt;p&gt;剛開始接觸 Python 的時候, 最先了解到的是開發者社群的貢獻, 有別於 C/C++ 這類型語言給我的感覺, 在開發上使用第三方的函式庫, 是相當方便以及普遍的事情。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;a href="https://pypi.python.org/pypi"&gt;Python Package Index (PyPI)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;PyPI is the default Package Index for the Python community. It is open to all Python developers to consume and distribute their distributions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;早期 Python 在套件的安裝上有數種工具可以選擇, 不過目前比較主流的是透過 &lt;strong&gt;PIP&lt;/strong&gt; 來安裝套件 (搜尋、安裝已經建立在 PyPI 上的套件), 這邊會先建議在開始安裝其它套件之前, 可以先安裝名為 &lt;strong&gt;virtualenv&lt;/strong&gt;, 這個用來建立獨立 python 執行環境的套件, 之後就可以愉快體驗 &lt;del&gt;也不用擔心系統髒髒的&lt;/del&gt;。&lt;/p&gt;

&lt;p&gt;安裝方式很簡單, 如下&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;pip install virtualenv  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先透過 pip 安裝 virtualenv, 安裝完後可以執行的命令如下&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;virtualenv [ENVNAME]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在當前目錄底下建立一個資料夾, 裡面會存放可獨立運行的 python 執行環境&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;cd [ENVNAME]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;移動至該路徑下&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;source bin/activate  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;啟用這個執行環境, 啟用後的效果包含之後安裝的套件會在此路徑下, 以及執行的 python 程式會使用此路徑下的 library&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;deactivate  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用完畢後可以退出這個虛擬環境, 嗯~ 系統除了多了這個工作路徑的資料夾其他依舊美好。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;補充&lt;/p&gt;
  
  &lt;p&gt;在虛擬環境的管理上其實也有套件可以幫忙, 好處是不會讓建立虛擬環境的資料夾分散在各處 (集中放置)、切換流程更加便利, 這邊要介紹的就是透過 &lt;a href="http://virtualenvwrapper.readthedocs.org/en/latest/index.html"&gt;&lt;strong&gt;virtualenvwrapper&lt;/strong&gt;&lt;/a&gt; 來處理&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;pip install virtualenvwrapper  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安裝套件方式一樣是透過 pip&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export WORKON_HOME=$HOME/PyEnv  
export PROJECT_HOME=$HOME/Devel  
source /usr/local/bin/virtualenvwrapper.sh  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;將以上貼入 .bashrc or .zshrc 檔 (是根據你所使用的 Shell 預設會開啟時會載入的 rc 檔)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WORKON_HOME 是虛擬環境配置的路徑&lt;/li&gt;
&lt;li&gt;PROJECT_HOME 暫時用不到&lt;/li&gt;
&lt;li&gt;最後 source 腳本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;介紹常用的功能&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;mkvirtualenv [-i package] [-r requirements_file] [virtualenv options] [ENVNAME]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;建立虛擬環境&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;lsvirtualenv [-b] [-l] [-h]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;列出存在的虛擬環境&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;rmvirtualenv [ENVNAME]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;移除虛擬環境&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;$ workon [ENVNAME]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;啟動虛擬環境&lt;/p&gt;

&lt;p&gt;最後退出虛擬環境的方式一樣是用 &lt;code&gt;deactivate&lt;/code&gt;。&lt;/p&gt;</content:encoded></item><item><title>MT4</title><description>&lt;blockquote&gt;
  &lt;p&gt;MT4 (&lt;a href="http://www.metatrader4.com/"&gt;Metatrade 4&lt;/a&gt;) 以及 MT5 (&lt;a href="http://www.metatrader5.com/"&gt;Metatrade 5&lt;/a&gt;) 都是由俄羅斯公司 MetaQuotes Software Corp 所開發的交易平台, 並由各個外匯公司對該平台提供服務。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;MQL4  
|-- Experts (EA 又稱專家系統, 執行交易策略的文件)
|-- Files (程式中使用到的外部檔案)
|-- Images (程式中使用的點陣圖)
|-- Include (Header檔)
|-- Indicators (建立指標的文件)
|-- Libraries
|-- Logs
|-- Presets (預設屬性區)
|-- Projects
`-- Scripts (腳本檔)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;檔案存放路徑結構&lt;/p&gt;

&lt;p&gt;MQL4/MQL5 為該交易平台所撰寫的程式語言, 語法的部分類似 C/C+&lt;/p&gt;</description><link>http://localhost:2368/mt4/</link><guid isPermaLink="false">b3f6f3fb-3745-41fa-b9de-7efcec901737</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Wed, 24 Feb 2016 09:18:15 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;MT4 (&lt;a href="http://www.metatrader4.com/"&gt;Metatrade 4&lt;/a&gt;) 以及 MT5 (&lt;a href="http://www.metatrader5.com/"&gt;Metatrade 5&lt;/a&gt;) 都是由俄羅斯公司 MetaQuotes Software Corp 所開發的交易平台, 並由各個外匯公司對該平台提供服務。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;MQL4  
|-- Experts (EA 又稱專家系統, 執行交易策略的文件)
|-- Files (程式中使用到的外部檔案)
|-- Images (程式中使用的點陣圖)
|-- Include (Header檔)
|-- Indicators (建立指標的文件)
|-- Libraries
|-- Logs
|-- Presets (預設屬性區)
|-- Projects
`-- Scripts (腳本檔)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;檔案存放路徑結構&lt;/p&gt;

&lt;p&gt;MQL4/MQL5 為該交易平台所撰寫的程式語言, 語法的部分類似 C/C++ (筆者的感覺其實只是 C/C++ 的子集, 所以有學過 C/C++的人應該不太陌生), 故詳細語法在這邊不會是著墨的重點。&lt;/p&gt;

&lt;h2 id="mql45"&gt;MQL4/5 撰寫的程式碼用途&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;EA 連結至特定圖表後的自動交易系統, 可用於回測&lt;/li&gt;
&lt;li&gt;Indicators 編寫透過自訂公式來計算數據產生的指標&lt;/li&gt;
&lt;li&gt;Scripts 執行單一功能的程式碼, 附加至圖表時會立即執行一次&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="mql4c"&gt;MQL4 語法與標準 C 不同之處&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h6 id="datatypehttpsdocsmql4combasistypes"&gt;&lt;strong&gt;&lt;a href="https://docs.mql4.com/basis/types"&gt;Data Type&lt;/a&gt;&lt;/strong&gt; (範例皆轉自官方)&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language- language-clike"&gt;string svar="This is a character string";  
string svar2=StringSubstr(svar,0,4);  
Print("Copyright symbol\t\x00A9");  
FileWrite(handle,"This string contains a new line symbols \n");  
string MT4path="C:\\Program Files\\MetaTrader 4";  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;color&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language- language-clike"&gt;//--- Literals
C'128,128,128'    // Gray  
C'0x00,0x00,0xFF' // Blue  
//color names
clrRed               // Red  
clrYellow            // Yellow  
clrBlack             // Black  
//--- Integral representations
0xFFFFFF          // White  
16777215          // White  
0x008000          // Green  
32768             // Green  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Datetime&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language- language-clike"&gt;datetime NY=D'2015.01.01 00:00';     // Time of beginning of year 2015  
datetime d1=D'1980.07.19 12:30:27';  // Year Month Day Hours Minutes Seconds  
datetime d2=D'19.07.1980 12:30:27';  // Equal to D'1980.07.19 12:30:27';  
datetime d3=D'19.07.1980 12';        // Equal to D'1980.07.19 12:00:00'  
datetime d4=D'01.01.2004';           // Equal to D'01.01.2004 00:00:00'  
datetime compilation_date=__DATE__;             // Compilation date  
datetime compilation_date_time=__DATETIME__;    // Compilation date and time  
datetime compilation_time=__DATETIME__-__DATE__;// Compilation time  
//--- Examples of declarations after which compiler warnings will be returned
datetime warning1=D'12:30:27';       // Equal to D'[date of compilation] 12:30:27'  
datetime warning2=D'';               // Equal to __DATETIME__  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h6 id="preprocessor"&gt;&lt;strong&gt;Preprocessor 對程式屬性的設定&lt;/strong&gt;&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://docs.mql4.com/basis/preprosessor/compilation"&gt;#Properties&lt;/a&gt; (參考官方介紹)&lt;/p&gt;

&lt;h2 id="mql4"&gt;MQL4 程式介紹&lt;/h2&gt;

&lt;h6 id=""&gt;下單種類&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;市價單 (OP&lt;em&gt;BUY, OP&lt;/em&gt;SELL)&lt;/li&gt;
&lt;li&gt;順勢單 (OP&lt;em&gt;BUYSTOP, OP&lt;/em&gt;SELLSTOP)
超過指定價格買 BUY單 或 SELL單 (不保證履約價)&lt;/li&gt;
&lt;li&gt;逆勢單 (OP&lt;em&gt;BUYLIMIT, OP&lt;/em&gt;SELLLIMIT) 成交價在限制價格內才會買進 (會保證成交價)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;外匯券商所允許的下單方式為&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;現價以上, 可以下 Buy-Stop, Sell-Limit&lt;/li&gt;
&lt;li&gt;現價以下, 可以下 Buy-Limit, Sell-Stop
&lt;img src="https://farm2.staticflickr.com/1577/25187105571_52e4ff737f.jpg" alt=""&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=""&gt;&lt;strong&gt;特殊函數&lt;/strong&gt;&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://docs.mql4.com/basis/function/events"&gt;More Detail&lt;/a&gt; (參考官方介紹)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OnInit()－程式起始時會執行一次&lt;/li&gt;
&lt;li&gt;OnTick()－圖表 Event 會觸發執行的函式&lt;/li&gt;
&lt;li&gt;OnTimer()－時間 Event 會觸發執行的函式&lt;/li&gt;
&lt;li&gt;OnDeinit()－結束時會執行的函式&lt;/li&gt;
&lt;li&gt;OnTester()－測試 Event 會觸發執行的函式&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id="ea"&gt;&lt;strong&gt;EA 程式架構&lt;/strong&gt;&lt;/h6&gt;

&lt;p&gt;(待補充)&lt;/p&gt;</content:encoded></item><item><title>Sublime Text 教學</title><description>&lt;blockquote&gt;
  &lt;p&gt;筆者按: 網路上關於 Sublime 的教學其實已經多如繁星, 所以本篇說為教學, 充其量目的也只是敝人的備忘錄而已 (笑)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=""&gt;引言&lt;/h4&gt;

&lt;p&gt;在前公司待了三年多快四年, 一直都是在 Windows 上透過 SSH 連到 Linux 的 build server 做開發, 常使用的語言為 C++、C, 而在前公司最普遍的 trace code 工具是有名的 &lt;del&gt;Source Insight&lt;/del&gt;, 但對我來說有以下的缺點:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;非跨平台&lt;/strong&gt; &lt;br&gt;
我個人電腦使用的環境是 OSX, 所以對於開發工具需在公司跟家裡做切換, 使用的意願上其實是非常低, 不外乎在工具的使用也是有所謂的學習曲線, 需分散心力來維持兩套是滿浪費精力的。
(要在 Mac 上執行 Windows 程式就我所知也有三種方式, 一種是安裝雙系統共存, 再來是使用虛擬機器VMWare, 最後則是透過 Wine 來安裝, 但會喜歡使用 Mac 的人其實對優雅都有種偏執, 所以我想還是能省則省吧!&lt;/li&gt;&lt;/ol&gt;</description><link>http://localhost:2368/sublime-jiao-xue/</link><guid isPermaLink="false">4c4675c9-609b-459f-87e2-f2eb84fcd1b9</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Mon, 22 Feb 2016 18:24:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;筆者按: 網路上關於 Sublime 的教學其實已經多如繁星, 所以本篇說為教學, 充其量目的也只是敝人的備忘錄而已 (笑)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=""&gt;引言&lt;/h4&gt;

&lt;p&gt;在前公司待了三年多快四年, 一直都是在 Windows 上透過 SSH 連到 Linux 的 build server 做開發, 常使用的語言為 C++、C, 而在前公司最普遍的 trace code 工具是有名的 &lt;del&gt;Source Insight&lt;/del&gt;, 但對我來說有以下的缺點:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;非跨平台&lt;/strong&gt; &lt;br&gt;
我個人電腦使用的環境是 OSX, 所以對於開發工具需在公司跟家裡做切換, 使用的意願上其實是非常低, 不外乎在工具的使用也是有所謂的學習曲線, 需分散心力來維持兩套是滿浪費精力的。
(要在 Mac 上執行 Windows 程式就我所知也有三種方式, 一種是安裝雙系統共存, 再來是使用虛擬機器VMWare, 最後則是透過 Wine 來安裝, 但會喜歡使用 Mac 的人其實對優雅都有種偏執, 所以我想還是能省則省吧!)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用介面非常醜&lt;/strong&gt; &lt;br&gt;
這可能主觀意識成分居多, 而且多半應該是來自一種對於 Windows 視窗樣式的厭惡吧! 但気持ち (Kimochi) 有時也是這麼重要～ (攤)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要$$&lt;/strong&gt; &lt;br&gt;
&lt;del&gt;雖然公司都...&lt;/del&gt;, 嗯, 我什麼都沒說。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;笨重&lt;/strong&gt; &lt;br&gt;
匯入專案以及建立 Source tree 需要滿長的時間 (尤其是龐大的專案時), 加上使用起來一直有種跟不上思緒的頓感 (&lt;del&gt;哈味&lt;/del&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模糊搜尋做得不夠好&lt;/strong&gt; &lt;br&gt;
小弟記憶力一直不太好, 所以這功能也滿在意的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最後當工作快滿一年的時候, 經由一位快離職的同事分享, 開始認識了 Sublime, 也就一直擁抱到現在了。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id="step1installsublime"&gt;Step 1. Install Sublime&lt;/h2&gt;

&lt;p&gt;首先可以先至官網抓取最新的版本 &lt;a href="http://www.sublimetext.com/2"&gt;Sublime2&lt;/a&gt;、&lt;a href="http://www.sublimetext.com/3"&gt;Sublime3&lt;/a&gt;, 跟一般平台上的應用程式安裝方式無異 (所以這邊省略讓各位自行摸索一下), 接著要 &lt;strong&gt;安裝最重要的套件 Package Control x3&lt;/strong&gt; (筆者懶得打三遍, 但希望你們明白這真的很重要!), 有點類似 Ubuntu 的 apt-get、Mac 的 Homebrew、Python 的 Pip、Node.js 的 npm 關係, 這是一個屬於 Sublime 套件管理的 Plugin (由於實在太方便了, 沒意外的話應該是每個用戶必先安裝, &lt;del&gt;除非天生反骨&lt;/del&gt;)。&lt;/p&gt;

&lt;h2 id="step2installpackagecontrol"&gt;Step 2. Install Package Control&lt;/h2&gt;

&lt;p&gt;Package Control的安裝方式也很簡易 &lt;a href="https://packagecontrol.io/installation"&gt;Package Control安裝頁面&lt;/a&gt; 有提供 Sublime Text 2 跟 Sublime Text 3 的 Command, 執行 Sublime 後按 &lt;code&gt;Ctrl + `&lt;/code&gt; (`是鍵盤最左上角那個) 叫出 Sublime 的 Console Panel (或是透過操作畫面上方的 Menu 選單 &lt;code&gt;View -&amp;gt; Show Console&lt;/code&gt; 也可以叫出)&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1513/24572921463_63fa373e0d.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;複製貼上你下載版本的指令進去按 &lt;code&gt;Enter&lt;/code&gt; 即可 (注意不要複製到行尾或行頭多餘空白格), 安裝完成之後可以再按一次按 &lt;code&gt;Ctrl + `&lt;/code&gt; 或是 &lt;code&gt;ESC&lt;/code&gt; 關掉Console。&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1704/24569074674_1c37755a8d_z.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;此時已經可以執行 Package Control 的相關指令, 方式一樣是兩種 (這部分的操作很頻繁, 所以筆者平時都是以快速鍵操作為主)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;透過操作畫面上方的 Menu 選單 &lt;code&gt;Sublime Text -&amp;gt; Preference -&amp;gt; Package Control&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;按 &lt;code&gt;Ctrl/Cmd(Windows/Mac) + Shift + P&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1469/24569403644_79a1f874f2.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;出現輸入框後, 可以針對 Package的操作輸入以下 Keywords (ex. install、remove、list)&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1619/25173739056_94164dac33_z.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;常見的操作說明如下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;List Package&lt;/strong&gt;: 列出已安裝的 Package (這邊可以試著鍵入 list, 輸入框的模糊搜尋會幫你選取到match 的指令, 相當方便的使用者體驗)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Install Package&lt;/strong&gt;: 左下會有個移動的等號 "=" 表示正在搜尋可以安裝的Package, 耐心等待跑完之後, 會彈出類似下拉式的選單供選擇 (挑選欲安裝的Package一樣可以鍵入關鍵字, 讓模糊搜尋幫助你挑選)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remove Package&lt;/strong&gt;: 列出已安裝的Package, 提供選取刪除&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外, 在挑選 Plugin 安裝的部分, 除了可以先上網看看相關領域開發者都推薦使用的之外, 也可上 &lt;a href="https://packagecontrol.io/packages/Package%20Control"&gt;Package Control 官網&lt;/a&gt; 透過一些關鍵字來尋找, 跟在Sublime裡面搜尋的差別在於, 官網上的會提供 Rank 讓你知道這個 Package 被安裝的熱門程度, 較多人使用的 Plugin 在維護跟品質上都相對比較有保障。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;註&lt;/p&gt;
  
  &lt;p&gt;Cmd = Command key define in Mac Keyboard&lt;/p&gt;
  
  &lt;p&gt;&lt;code&gt;Ctrl/Cmd(Windows/Mac) + Shift + P&lt;/code&gt;, 透過這組快速鍵叫出來的是 Sublime 的 Command Palette (也可從 Menu 選單裡的 Tool 選項叫出來), 透過這個 Command Palette 可用來呼叫許多其他 Plugin 預設的功能, 所以絕大部份的時候只需要記得這個快速鍵, 就已經相當方便了。&lt;/p&gt;
  
  &lt;p&gt;Ex. git plugin也是在這個輸入框內做操作&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="step3"&gt;Step 3. 推薦一些筆者安裝使用的套件&lt;/h2&gt;

&lt;p&gt;(這裡先介紹一般通用的套件)&lt;/p&gt;

&lt;p&gt;透過 Package Control 都可以輕易的 Install 以下的 Plugin 協助你提升工作效率, 而需注意的是部分 Plugin 安裝之後, 有時會需要做一些客製化的調整 (例如修改 Package Setting 檔, 從 Menu 選單 Preferences -&gt; Package Setting -&gt; 挑選你要修改的 Plugin)&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1586/25174133666_ec6ba6156d_z.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;筆者似乎從 Sublime Text 3 開始就不能直接修改 Default 的 Setting, 需要打開 User 的 Setting 來做變更 (如上圖), 不過這也是建立良好修改習慣的開始。&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id="highlightwordshttpspackagecontroliopackageshighlightwords"&gt;&lt;a href="https://packagecontrol.io/packages/HighlightWords"&gt;HighlightWords&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;這個套件的使用來自於 Source Insight 裡我覺得很方便的功能, 在 Source Insight 裡透過 &lt;code&gt;Shift + F8&lt;/code&gt; 來常駐 (持續性) 的標記某個單詞 (同時也會標記這整個文本裡所有出現的地方, 有助於 trace code), 但在 Sublime 中, 雖然選取文字時會幫你標記, 但滑鼠點擊它處則標記即消失, 無法保持持續標記 (&lt;mark&gt;Highlight&lt;/mark&gt;) 的狀態, 另外在剛接觸這個套件的版本所提供的方式, 是透過快速鍵後只會彈出最下排一個輸入框, 提供輸入想標記的單詞, 而要取消標記也是刪除這輸入框裡的內容, 隨著我跟前同事私下研究改進, 目前已可透過 &lt;code&gt;Cmd + Shift + H&lt;/code&gt; 來 Highlight 游標目前停留的字詞, 並對同樣的字詞再按一次快速鍵則取消標記, 使用方式已與Source Insight無異, 甚至更好用。&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id="brackethighlighterhttpspackagecontroliopackagesbrackethighlighter"&gt;&lt;a href="https://packagecontrol.io/packages/BracketHighlighter"&gt;BracketHighlighter&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Trace code 滿常需要的除了前面標記變數的功能以外, 另外也需要幫忙判斷括號從哪括到哪, 這Plugin就提供了這樣的的幫助。&lt;/p&gt;

&lt;p&gt;注意, 這邊筆者會將Setting修改成如下, 以呈現較佳的視覺效果&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-json"&gt;"default": {
"icon": "dot",
// BH1's original default color for reference
"color": "entity.name.class",
//"color": "brackethighlighter.default",
"style": "block"
},
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h4 id="ctagshttpspackagecontroliopackagesctags"&gt;&lt;a href="https://packagecontrol.io/packages/CTags"&gt;Ctags&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;也是在 trace code 方面個人覺得非常好用的 Plugin 之一, 先介紹 ctags 本身是一個專門幫忙對 soruce code、header file 產生 index file 用的工具, 且在一開始最早僅支援 C, 後來延伸至今已可支援以下語言&lt;/p&gt;

&lt;p&gt;Ant、Asm、Asp、Awk、Basic、BETA、C、C++、C#、Cobol、DosBatch、Eiffel、Erlang、Flex、Fortran、HTML、Java、JavaScript、Lisp、Lua、Make、MatLab、OCaml、Pascal、Perl、PHP、Python、REXX、Ruby、Scheme、Sh、SLang、SML、SQL、Tcl、Tex、Vera、Verilog、VHDL、Vim、YACC&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;可以透過 Shell 底下的 Command 來查詢支援的語言&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;ctags --list-languages  
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;另外 ctags 本身也可以支援對語言或副檔名做延伸的定義&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ex. 在Sublime中使用的話, 在 Ctags 的 Plugin Setting 內加入下面這句 (等於將後面參數傳給 ctags )  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-json"&gt;"opts" : ["--langmap=C:+.mq4", "--extra=+q", "--fields=+Saim", "--c-kinds=+lpx", "--c++-kinds=+lpx", "-R"],
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;--extra=+q --fields=+Saim&lt;/strong&gt; 指名要建立的 tags 包含 Class 內 member 的資訊&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--c-kinds=+lpx --c++-kinds=+lpx&lt;/strong&gt; 是用來對底下參數打開
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;l&lt;/strong&gt;  local variables [off]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;  function prototypes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;  external and forward variable declarations [off]&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-R&lt;/strong&gt; 則是整個目錄底下遞迴的方式去循環查找建立 index&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--langmap=C:+.mq4&lt;/strong&gt; 是筆者想針對 MT4 平台開發程式, 副檔名使用的是 mq4, 但語法本身很接近 C 語言, 所以 extend C parser 來幫忙建立 tag file&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;另外透過以下指令可以看 ctags 對每個語言建立 index 的詳細程度, 部分可供 On/Off&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;ctags --list-kinds  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上大概介紹完ctags可以做到的事後, 就要開始介紹如何安裝。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mac Shell : brew install ctags (Mac 有自帶的 ctags 但無法使用, 記得要抓新的, 筆者使用的是 Exuberant Ctags 5.8)&lt;/li&gt;
&lt;li&gt;Ubuntu Shell: apt-get install ctags&lt;/li&gt;
&lt;li&gt;Windows: 有點久遠, 大概有執行可以抓下來安裝吧&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;裝完之後記得修改User Setting加入&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-json"&gt;"command": "/usr/local/Cellar/ctags/5.8_1/bin/ctags",
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;後面字串需對應到實際安裝 ctags 的執行檔路徑, 這樣便可以開始建立 index 使用了。
&lt;img src="https://farm2.staticflickr.com/1579/25123928811_0ef0bcb02c_z.jpg" alt=""&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id="blockcursoreverywherehttpspackagecontroliopackagesblock20cursor20everywhere"&gt;&lt;a href="https://packagecontrol.io/packages/Block%20Cursor%20Everywhere"&gt;Block Cursor Everywhere&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;在文字編輯器內要尋找鍵盤的游標有時候也是種困擾, 這個 Plugin 可以幫忙在 Vim 指令 mode 下提供 &lt;mark&gt; 方塊形&lt;/mark&gt; 的鍵盤游標。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Vim Mode&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;如果有使用過Linux開發的話, 常用的 Console 文字編輯器有兩套 Vi/Vim or Emac (筆者是只接觸過 vim), 在 Vim 底下有提供兩種 mode: 指令 mode 以及編輯 mode, 以往已經使用習慣 Vim 的朋友可以透過修改 Sublime 的 Setting file 模擬 Vim, 分別是將&lt;/p&gt;
  
  &lt;p&gt;&lt;code&gt;"ignored_packages": ["Vintage"],&lt;/code&gt; 中的 Vintage 拿掉 (切換成可支援 Vim mode)&lt;/p&gt;
  
  &lt;p&gt;&lt;code&gt;"vintage_start_in_command_mode": true,&lt;/code&gt; 加入這行, (開啟檔案時會優先啟動 Vim 的 command mode), 這個 Plugin 是搭配 Vintage 使用, 可以幫忙快速定位到目前游標的位置, 加速編輯上的效率。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;p&gt;最後下面是筆者習慣的 Theme 跟 Color Schemes , Theme 是整個軟體介面的主題樣式, 而 Color Scheme 是用來做語法上色時的配色樣本, 網路都有一些常用或是推薦的樣式, 甚至已經幫忙整理好預覽圖, 都可以從而參考找出自己需要的。&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1604/25098884972_a69241ee7c_z.jpg" alt=""&gt;&lt;/p&gt;

&lt;h4 id="themesodahttpspackagecontroliopackagestheme2020soda"&gt;&lt;a href="https://packagecontrol.io/packages/Theme%20-%20Soda"&gt;Theme - Soda&lt;/a&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class="language- language-json"&gt;"soda_classic_tabs": true,
"theme": "Soda Dark 3.sublime-theme",
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Add to Preferences.sublime-settings)&lt;/p&gt;

&lt;h4 id="tomorrowcolorschemeshttpspackagecontroliopackagestomorrow20color20schemes"&gt;&lt;a href="https://packagecontrol.io/packages/Tomorrow%20Color%20Schemes"&gt;Tomorrow Color Schemes&lt;/a&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class="language- language-json"&gt;"color_scheme": "Packages/Tomorrow Color Schemes/Tomorrow-Night.tmTheme",
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Add to Preferences.sublime-settings)&lt;/p&gt;</content:encoded></item><item><title>多空操作秘笈 筆記 (Mind Map)</title><description>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;Secrets For Profiting In Bull And Bear Markets by &lt;strong&gt;Stan Weinstein&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;別名&lt;/p&gt;
  
  &lt;p&gt;史丹溫斯坦稱傲牛熊市的秘密&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;重點摘要、心得&lt;/h2&gt;

&lt;p&gt;書中強調的是透過 &lt;strong&gt;技術面&lt;/strong&gt; 來分析趨勢, 介紹的內容分別從最基本的術語解釋, 先跟讀者做認知上對齊的動作 (這部分也是筆者在閱讀此書上對作者用心感受最深的部分), 再來進入此書的正題, 趨勢的階段性介紹 (分別為打底、上升、頭部、下降四個階段), 教你如何辨認當前走勢是處於何種階段; 當瞭解了走勢呈現出的階段資訊後, 告訴讀者位在何時是合適的進場時機 (突破至第二階段以及連續買進的突破出現時), 搭配著作者羅列的圖表可以循序漸進的學習並練習, 最後再用額外的章節指導這門藝術要如何更加精煉, 到此我們已完成了前半部的工程 (套書中的說法就是 - 「&lt;strong&gt;你已經登堂了&lt;/strong&gt;」)。&lt;/p&gt;

&lt;p&gt;第二部分則是要教導讀者如何留住獲利, 在盡可能準確的時刻下轎 (透過正確的觀念建立追蹤止損點來保護獲利), 並在適當的時間可以放空來增加獲利, 而做空的分析方式其實跟做多恰為相反, 領悟力高的讀者應該不難舉一反三。&lt;/p&gt;

&lt;p&gt;最後一部分作者說明了一些用來追蹤市場走勢的長期指標 (因為在前幾章節所介紹的準則之一就是 -「不要違背市場操作」), 也補充了股市以外運用其分析方式操作得宜的投資實例 (基金、&lt;/p&gt;</description><link>http://localhost:2368/duo-kong-cao-zuo-mi-ji-bi-ji/</link><guid isPermaLink="false">f730b870-ed59-44e3-944d-9a29ae5ea53a</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Sat, 20 Feb 2016 18:36:48 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;Secrets For Profiting In Bull And Bear Markets by &lt;strong&gt;Stan Weinstein&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;別名&lt;/p&gt;
  
  &lt;p&gt;史丹溫斯坦稱傲牛熊市的秘密&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;重點摘要、心得&lt;/h2&gt;

&lt;p&gt;書中強調的是透過 &lt;strong&gt;技術面&lt;/strong&gt; 來分析趨勢, 介紹的內容分別從最基本的術語解釋, 先跟讀者做認知上對齊的動作 (這部分也是筆者在閱讀此書上對作者用心感受最深的部分), 再來進入此書的正題, 趨勢的階段性介紹 (分別為打底、上升、頭部、下降四個階段), 教你如何辨認當前走勢是處於何種階段; 當瞭解了走勢呈現出的階段資訊後, 告訴讀者位在何時是合適的進場時機 (突破至第二階段以及連續買進的突破出現時), 搭配著作者羅列的圖表可以循序漸進的學習並練習, 最後再用額外的章節指導這門藝術要如何更加精煉, 到此我們已完成了前半部的工程 (套書中的說法就是 - 「&lt;strong&gt;你已經登堂了&lt;/strong&gt;」)。&lt;/p&gt;

&lt;p&gt;第二部分則是要教導讀者如何留住獲利, 在盡可能準確的時刻下轎 (透過正確的觀念建立追蹤止損點來保護獲利), 並在適當的時間可以放空來增加獲利, 而做空的分析方式其實跟做多恰為相反, 領悟力高的讀者應該不難舉一反三。&lt;/p&gt;

&lt;p&gt;最後一部分作者說明了一些用來追蹤市場走勢的長期指標 (因為在前幾章節所介紹的準則之一就是 -「不要違背市場操作」), 也補充了股市以外運用其分析方式操作得宜的投資實例 (基金、選擇權、期貨皆有著墨), 在文末作者總結認為紙上談兵不如下場練習 (心態上的不同會導致操作上的差別), 盼讀者可以先投以小部分資金進入市場磨練慢慢改善自己的技巧。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;筆者按 : 本書的結構內容及深淺編排得非常之好, 在閱讀上絲毫不覺得自己在投資領域還只是個初心者。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;p&gt;底下是採用 &lt;a href="https://zh.wikipedia.org/wiki/%E5%BF%83%E6%99%BA%E5%9B%BE"&gt;Mind Map&lt;/a&gt; 方式對此書做的筆記 (包含選用合適的工具、閱讀書籍, 筆記著實花了筆者相當久的時間), 若有他人也能從中有所領悟的話, 筆者也會深感欣慰。&lt;/p&gt;

&lt;p&gt;(使用方式類似 Google Map 的拖曳操作可以移動畫面, 右鍵可以彈出放大鏡的按鈕, 按壓放大鏡拖曳後可以 Zoom In/Out) － 謝謝收看。&lt;/p&gt;

&lt;iframe width="853" height="480" src="https://embed.coggle.it/diagram/56c6e98e8b3ea34363ccd4c5/30be348f07c8d291036a0721b40f2975b0042eb7c4069f030a14f3663dd1867b" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content:encoded></item><item><title>How to setup Ghost blog platform (下)</title><description>&lt;blockquote&gt;
  &lt;p&gt;接著進入下一個主題, 如何部署 Ghost 到 git.io 以及 Ghost 進階的功能設定
  &lt;strong&gt;(Syntax highlight, 使用 Disqus 添加留言功能, 添加 Google Analytics&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Buster &lt;a href="http://blog.axitkhurana.com/introducing-ghost/"&gt;作者Blog中介紹&lt;/a&gt; 有提到是受了 Octopress 的啟發以及在命名上由來的惡趣味, ker ker... Ghostbusters &lt;del&gt;又透露自己年紀了&lt;/del&gt; &lt;br&gt;
&lt;img src="http://upload.wikimedia.org/wikipedia/en/c/c7/Ghostbusters_cover.png" alt=""&gt;&lt;/p&gt;

&lt;h2 id="ghostgitio"&gt;部署 Ghost 到 git.io&lt;/h2&gt;

&lt;p&gt;首先要部署 Ghost 到 git.io 需要先安裝 python 以及套件 &lt;a href="https://github.com/axitkhurana/buster"&gt;buster&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;brew install python  
sudo pip install buster  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/32862072/attempting-to-install-buster-with-pip-on-mac"&gt;[Issue 1]&lt;/a&gt; 參考自&lt;/p&gt;</description><link>http://localhost:2368/how-to-setup-ghost-blog-platform-xia/</link><guid isPermaLink="false">4d889d8f-ae98-47a4-81cc-445ac9ac618e</guid><category>Ghost</category><category>Octopress</category><category>prismjs</category><category>Disqus</category><dc:creator>Captain Vincent</dc:creator><pubDate>Wed, 03 Feb 2016 10:57:59 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;接著進入下一個主題, 如何部署 Ghost 到 git.io 以及 Ghost 進階的功能設定
  &lt;strong&gt;(Syntax highlight, 使用 Disqus 添加留言功能, 添加 Google Analytics&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Buster &lt;a href="http://blog.axitkhurana.com/introducing-ghost/"&gt;作者Blog中介紹&lt;/a&gt; 有提到是受了 Octopress 的啟發以及在命名上由來的惡趣味, ker ker... Ghostbusters &lt;del&gt;又透露自己年紀了&lt;/del&gt; &lt;br&gt;
&lt;img src="http://upload.wikimedia.org/wikipedia/en/c/c7/Ghostbusters_cover.png" alt=""&gt;&lt;/p&gt;

&lt;h2 id="ghostgitio"&gt;部署 Ghost 到 git.io&lt;/h2&gt;

&lt;p&gt;首先要部署 Ghost 到 git.io 需要先安裝 python 以及套件 &lt;a href="https://github.com/axitkhurana/buster"&gt;buster&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;brew install python  
sudo pip install buster  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/32862072/attempting-to-install-buster-with-pip-on-mac"&gt;[Issue 1]&lt;/a&gt; 參考自 Stackoverflow, 在安裝 &lt;code&gt;sudo pip install buster&lt;/code&gt; 出現錯誤時, 可以看看是否同樣是因為&lt;mark&gt;尚未安裝 xcode 的command line tool 所造成的&lt;/mark&gt;&lt;/p&gt;

&lt;p&gt;然後在 Ghost 目錄底下建立一個名為 static 的資料夾, 指向 github 上 git.io 的 repo&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;git clone git@github.com:username/username.github.io.git static  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以手動方式完成(筆者是採用這種方式) 或是直接使用 Buster 提供的 command 來幫忙&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;buster setup [--gh-repo=&amp;lt;repo-url&amp;gt;]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接著透過以下指令分別產生完靜態頁面, 並透過 Browser 預覽產生完的結果&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;buster generate --domain=http://localhost:2368  
buster preview  
open http://localhost:9000  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後就可以將 Ghost 以及日後做的變更 deploy 到 git.io 上囉。&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;buster deploy  
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h2 id="syntaxhighlightinghost"&gt;Syntax Highlight in Ghost&lt;/h2&gt;

&lt;p&gt;使用 &lt;a href="http://prismjs.com/download.html"&gt;prismjs&lt;/a&gt; , 首先先至官網上如下圖操作&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1468/24679275812_eb4f8dafe5_z.jpg" alt=""&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;透過預覽來選擇不同的 Theme , 這邊設計有點詭異的地方在 preview window 在網頁底部  &lt;/li&gt;
&lt;li&gt;瀏覽完後再選擇你想使用的 Theme  &lt;/li&gt;
&lt;li&gt;接著勾選要支援 syntax highlight 的語言  &lt;/li&gt;
&lt;li&gt;接下來移至網頁底部分別按下按鈕來下載 js 與 css 檔案 (prism.css &amp;amp; prism.js)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1612/24797117325_4a9c842678.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;下載完後再將 prism.css &amp;amp; prism.js 分別放置當前 Ghost 所使用的 Theme 底下路徑中 (Ghost 所預設使用的 Theme 為 casper)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/content/themes/[theme name]/assets/css/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;與&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/content/themes/[theme name]/assets/js/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接著修改以下路徑的檔案&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/content/themes/[theme name]/default.hbs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在該檔案內分別&lt;mark&gt;添加以下關於 prism.css 與 prism.js 修改的兩行 Code&lt;/mark&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-javascript"&gt;    &amp;lt;link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Merriweather:300,700,700italic,300italic|Open+Sans:700,400" /&amp;gt;
    &amp;lt;link rel="stylesheet" type="text/css" href="{{asset "css/prism.css"}}" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;與&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-javascript"&gt;    &amp;lt;script type="text/javascript" src="{{asset "js/jquery.fitvids.js"}}"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type="text/javascript" src="{{asset "js/prism.js"}}"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接著就可以在文章中添加以下的寫法來測試一下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; ``` language-javascript
 var s = "JavaScript syntax highlighting";  
 alert(s); 
 ```
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h2 id="disqus"&gt;添加 Disqus 留言功能&lt;/h2&gt;

&lt;p&gt;Reference Page &lt;a href="http://academy.ghost.org/adding-disqus-to-your-ghost-blog/"&gt;Adding Disqus to your Ghost blog&lt;/a&gt; &lt;br&gt;
參考官網教學上的做法即可, &lt;del&gt;故省略翻譯&lt;/del&gt; XD&lt;/p&gt;

&lt;p&gt;第一步先註冊一個 Disqus 帳號&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1570/24187392983_8947254fb3_z.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;登入後先點選右上角的 Setting 選項 Add Disqus To Site&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1639/24814247255_60a5425209_n.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;再點選下圖中間的 Start Using Engage 或右上方 Install on Your Site 進入取得識別用的 Disqus URL&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1546/24186062574_15a900c299_z.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;註冊一個識別用的 Disqus URL&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1695/24187392843_907fa17378_z.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;取得用來內嵌的 Disqus Script&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1719/24186062594_26746cf4f3.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;接著會得到的類似以下內文的 Script&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-javascript"&gt;&amp;lt;div id="disqus_thread"&amp;gt;&amp;lt;/div&amp;gt;  
&amp;lt;script&amp;gt;  
/**
* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables
*/
/*
var disqus_config = function () {  
this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable  
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable  
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');

    s.src = '//captainvincent.disqus.com/embed.js';

    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
})();
&amp;lt;/script&amp;gt;  
&amp;lt;noscript&amp;gt;Please enable JavaScript to view the &amp;lt;a href="https://disqus.com/?ref_noscript" rel="nofollow"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再透過修改底下路徑的檔案, 將 Script 貼入希望放置留言區的地方, 目前筆者是放在 footer 區塊裡的 &lt;code&gt;&amp;lt;section class="share"&amp;gt;&lt;/code&gt; 之後&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;content/themes/[theme name]/post.hbs  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;並修改剛貼入的 Script 中底下的四行, 先將註解符號 &lt;code&gt;/*&lt;/code&gt; &lt;code&gt;*/&lt;/code&gt; 移除,&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-javascript"&gt;/*
this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable  
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable  
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後再將 &lt;code&gt;PAGE_URL&lt;/code&gt; 置換成 &lt;code&gt;'{{@blog.url}}{{url}}'&lt;/code&gt;, &lt;code&gt;PAGE_IDENTIFIER&lt;/code&gt; 置換成 &lt;code&gt;'ghost-{{id}}'&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-javascript"&gt;this.page.url = '{{@blog.url}}{{url}}';  
this.page.identifier = 'ghost-{{id}}';  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
存擋完畢就大功告成了。&lt;/p&gt;

&lt;h2 id="googleanalytics"&gt;添加 Google Analytics&lt;/h2&gt;

&lt;p&gt;先建立 &lt;a href="https://accounts.google.com/SignUpExpress?service=analytics&amp;amp;continue=https%3A%2F%2Fanalytics.google.com%2Fanalytics%2Fweb%2F"&gt;Google Analytisc Account&lt;/a&gt; , 並先取得 Tracking Code 類似下圖 &lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1519/24520255780_f1e379d615.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;再透過 Ghost Platform 所提供的管理頁面選項 Code Injection&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1664/24789705376_446840ebd2_z.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;選擇右上角 Save 之後就完成了。&lt;/p&gt;</content:encoded></item><item><title>How to setup Ghost blog platform (上)</title><description>&lt;p&gt;Reference Page &lt;a href="https://stefanscherer.github.io/setup-ghost-for-github-pages/"&gt;setup-ghost-for-github-pages&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;用 Setup Ghost 作為 Ghost 部落格的第一篇文章也滿別具意義的, 不過在最一開始 Survey 時選用架設 Blog 的 Framework 是 &lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt; , 但隨著架設完後一邊試用的體悟, 發現整個操作還真是 &lt;del&gt;Suck&lt;/del&gt; Geek啊! 只好再廣泛的涉略一下後選用了 Ghost。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1532/24635687672_85473e64a4_z.jpg" alt=""&gt;
雖然 Octopress 與其同為支援 Ｍarkdown 的語法, 但選用Ghost的最大好處是後台已經整合了 Markdown的即視編輯器 (可能還稱不上殺手應用, 但已深得我心)&lt;/p&gt;

&lt;h2 id="beforeinstallnodejs"&gt;Before Install Node.js&lt;/h2&gt;

&lt;p&gt;Ghost 是用 Node.js 打造, 所以在執行過程中需要啟動 &lt;a href="https://zh.wikipedia.org/wiki/Node.js"&gt;Node.js&lt;/a&gt; &lt;br&gt;
而在 Mac 環境上安裝軟體套件目前常見的方式是透過 brew (也是參考網頁所上提供的)&lt;/p&gt;</description><link>http://localhost:2368/how-to-setup-ghost/</link><guid isPermaLink="false">bcd278b7-b38d-43c2-8b45-a3ffb2eb919f</guid><category>Ghost</category><category>Octopress</category><dc:creator>Captain Vincent</dc:creator><pubDate>Mon, 01 Feb 2016 15:41:06 GMT</pubDate><content:encoded>&lt;p&gt;Reference Page &lt;a href="https://stefanscherer.github.io/setup-ghost-for-github-pages/"&gt;setup-ghost-for-github-pages&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;用 Setup Ghost 作為 Ghost 部落格的第一篇文章也滿別具意義的, 不過在最一開始 Survey 時選用架設 Blog 的 Framework 是 &lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt; , 但隨著架設完後一邊試用的體悟, 發現整個操作還真是 &lt;del&gt;Suck&lt;/del&gt; Geek啊! 只好再廣泛的涉略一下後選用了 Ghost。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1532/24635687672_85473e64a4_z.jpg" alt=""&gt;
雖然 Octopress 與其同為支援 Ｍarkdown 的語法, 但選用Ghost的最大好處是後台已經整合了 Markdown的即視編輯器 (可能還稱不上殺手應用, 但已深得我心)&lt;/p&gt;

&lt;h2 id="beforeinstallnodejs"&gt;Before Install Node.js&lt;/h2&gt;

&lt;p&gt;Ghost 是用 Node.js 打造, 所以在執行過程中需要啟動 &lt;a href="https://zh.wikipedia.org/wiki/Node.js"&gt;Node.js&lt;/a&gt; &lt;br&gt;
而在 Mac 環境上安裝軟體套件目前常見的方式是透過 brew (也是參考網頁所上提供的), 但因為遇到了以下問題所以又花了些時間一一排除, 這邊稍微做簡單的說明避免大家繞路。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;透過 brew 無法安裝目前 Ghost 所相容的版本, 在啟動時出現以下 Error Message &lt;br&gt;
&lt;code&gt;Ghost needs Node version ~0.10.0 || ~0.12.0 || ~4.2.0 you are using version 5.4.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修正後的做法, 改先透過安裝 nvm(node version manager) &lt;code&gt;brew install nvm&lt;/code&gt; 之後再進行指定版本的 node.js 安裝 &lt;a href="http://icarus4.logdown.com/posts/175092-nodejs-installation-guide"&gt;參考網頁&lt;/a&gt; , &lt;br&gt;
但後續仍會遇到 &lt;a href="https://github.com/creationix/nvm/issues/855"&gt;https://github.com/creationix/nvm/issues/855&lt;/a&gt; 的問題, 需透過多餘的指令解決衝突的部分, &lt;br&gt;
&lt;code&gt;NVM is not compatible with the npm config "prefix"&lt;/code&gt; &lt;br&gt;
並且會導致 Shell start-up latency 時間拉長&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;所以最終的建議做法是 follow &lt;a href="https://github.com/creationix/nvm"&gt;nvm官網&lt;/a&gt; 指令來安裝 nvm , 如下&lt;/strong&gt; &lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;git clone https://github.com/creationix/nvm.git ~/.nvm &amp;amp;&amp;amp; cd ~/.nvm &amp;amp;&amp;amp; git checkout `git describe --abbrev=0 --tags`  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;將以下行加入 ~/.bashrc, ~/.profile, or ~/.zshrc, 讓系統自動幫你在登入時 source 完 script&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;export NVM_DIR="$HOME/.nvm"  
[ -s "$NVM_DIR/nvm.sh" ] &amp;amp;&amp;amp; . "$NVM_DIR/nvm.sh" # This loads nvm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;By the way&lt;/strong&gt; 官網也就有提到 &lt;mark&gt;Homebrew installation is not supported.&lt;/mark&gt;&lt;/p&gt;

&lt;h2 id="installnodejs"&gt;Install Node.js&lt;/h2&gt;

&lt;p&gt;在順利安裝完 nvm 之後, 透過以下指令可以秀出目前 nvm 的版本&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;nvm ls-remote  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;並再以指令安裝建議的版本, 筆者目前安裝的版本為 Ghost 所建議的 4.2.0&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;nvm install 4.2.0  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定所使用的 Node.js version&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;nvm use 4.2.0  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="downloadandinstallghost"&gt;Download and Install Ghost&lt;/h2&gt;

&lt;p&gt;Check for the latest version of Ghost from &lt;a href="https://ghost.org/download/"&gt;Ghost.org&lt;/a&gt;  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;mkdir ghost  
cd ghost  
wget --no-check-certificate https://ghost.org/zip/ghost-0.7.5.zip  
unzip ghost-0.7.5.zip  
npm install --production  
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;npm 全名為 Node Package Manager，是 Node.js 的套件（package）管理工具, 透過 &lt;code&gt;npm install&lt;/code&gt; 會安裝 node.js 應用程序底下, package.json 文本中 dependencies 指定的相關套件, 透過這樣的方式可以降低拿到該應用程序在執行環境建立的複雜度。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="startghost"&gt;Start Ghost&lt;/h2&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;npm start  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="logintoghost"&gt;Login to Ghost&lt;/h2&gt;

&lt;p&gt;透過 Browser 開啟以下網址連結到設定頁面, 也可以閱讀 Ghost 幫使用者預設好的第一篇文章 Welcome to Ghost 上所提供的資訊&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;open http://localhost:2368/ghost  
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;總結&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;透過以上的步驟就可以在本地端建立一個部落格平台, 下一章節會繼續介紹如何將本地端的部落格部署到 git.io 上。&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item></channel></rss>