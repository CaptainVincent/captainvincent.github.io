<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Hello World! I'm Vincent.</title><description>The Wilderness Years.</description><link>http://captainvincent.github.io/</link><generator>Ghost 0.11</generator><lastBuildDate>Mon, 12 Dec 2016 12:31:36 GMT</lastBuildDate><atom:link href="http://captainvincent.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>GDG DevFest Taipei 2016</title><description>&lt;blockquote&gt;
  &lt;p&gt;本次為 Google 開發者社群推廣的一日活動, 完整議程參考 &lt;a href="https://devfest-taipei-3cbee.firebaseapp.com/schedule/day1"&gt;主辦單位提供&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;議程筆記&lt;/h2&gt;

&lt;p&gt;Personal 會議整理&lt;/p&gt;

&lt;h3 id="materialdesign"&gt;Material Design / 實感設計&lt;/h3&gt;

&lt;p&gt;@Takuo Suzuki / 鈴木拓生&lt;/p&gt;

&lt;p&gt;傳統的應用程式在不同的 platform 通常都呈現了不同的 interface, 對一般的使用者在使用上的經驗無法連貫以及學習曲線上的困難, Google 於 2014 制定了 Material Design 規範了 UX 設計。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;對於這些規範的內容可以從網路上獲得許多免費資源的介紹, 這邊有查到一個模組以 react 的 component 實踐 material design &lt;a href="http://react-toolbox.com/#/"&gt;React Toolbox&lt;/a&gt;。 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id="hackpad"&gt;Hackpad&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The details can be found at
&lt;ul&gt;&lt;li&gt;&lt;a href="https://material.google.com/"&gt;https://material.google.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://material.io/"&gt;https:&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>http://captainvincent.github.io/gdg-devfest-taipei-2016/</link><guid isPermaLink="false">f2cf11d5-fff5-4057-b7b8-277bad2ca5e7</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Fri, 02 Dec 2016 23:44:42 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;本次為 Google 開發者社群推廣的一日活動, 完整議程參考 &lt;a href="https://devfest-taipei-3cbee.firebaseapp.com/schedule/day1"&gt;主辦單位提供&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;議程筆記&lt;/h2&gt;

&lt;p&gt;Personal 會議整理&lt;/p&gt;

&lt;h3 id="materialdesign"&gt;Material Design / 實感設計&lt;/h3&gt;

&lt;p&gt;@Takuo Suzuki / 鈴木拓生&lt;/p&gt;

&lt;p&gt;傳統的應用程式在不同的 platform 通常都呈現了不同的 interface, 對一般的使用者在使用上的經驗無法連貫以及學習曲線上的困難, Google 於 2014 制定了 Material Design 規範了 UX 設計。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;對於這些規範的內容可以從網路上獲得許多免費資源的介紹, 這邊有查到一個模組以 react 的 component 實踐 material design &lt;a href="http://react-toolbox.com/#/"&gt;React Toolbox&lt;/a&gt;。 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id="hackpad"&gt;Hackpad&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The details can be found at
&lt;ul&gt;&lt;li&gt;&lt;a href="https://material.google.com/"&gt;https://material.google.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://material.io/"&gt;https://material.io/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Showcases:
&lt;ul&gt;&lt;li&gt;g.co/materialshowcase&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Tangible Surfaces  &lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Depth focuses attention and provides structure.&lt;/li&gt;
&lt;li&gt;Interaction cues &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rich Imagery and Bold Colors  &lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Primary + Accent&lt;/li&gt;
&lt;li&gt;Color density depends on content&lt;/li&gt;
&lt;li&gt;Noto Fonts &lt;a href="https://www.google.com/get/noto/"&gt;https://www.google.com/get/noto/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Meaningful Motion  &lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Materials transform&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Don't&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Hamburger Diet: Not every app needs a left nav drawer&lt;/li&gt;
&lt;li&gt;Don't force the FAB (Floating Action Button)&lt;/li&gt;
&lt;li&gt;Everything doesn't need to be a card&lt;/li&gt;
&lt;li&gt;Don't make the screen's lower right corner a FAB ghetto&lt;/li&gt;
&lt;li&gt;Don't wait unitl the end to think about motion (plan beforhand)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Do&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Design for device independence: Mobile + Web, Portrait + Landscape&lt;/li&gt;
&lt;li&gt;When it comes to buttons, start flat  and promote as needed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Web Frameworks&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Polymer: paper elements
&lt;a href="https://elements.polymer-project.org/browse?package=paper-elements"&gt;https://elements.polymer-project.org/browse?package=paper-elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Angular Material &lt;a href="https://material.angularjs.org/latest/"&gt;https://material.angularjs.org/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Material Design Lite
&lt;a href="https://getmdl.io/"&gt;https://getmdl.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google Fonts
&lt;a href="https://fonts.google.com/"&gt;https://fonts.google.com/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Device Metrics
&lt;a href="https://material.io/devices/"&gt;https://material.io/devices/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Material icons
&lt;a href="https://material.io/icons/"&gt;https://material.io/icons/&lt;/a&gt; &lt;br&gt;
(svg is recommanded!)&lt;/li&gt;
&lt;li&gt;Resizer
&lt;a href="http://material.io/resizer/"&gt;http://material.io/resizer/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Downloads&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ai template
&lt;a href="https://material.google.com/resources/layout-templates.html#"&gt;https://material.google.com/resources/layout-templates.html#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What's Next?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Material Design Codelab &lt;a href="https://github.com/googlecodelabs/android-design-library"&gt;https://github.com/googlecodelabs/android-design-library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Plaid App plaidapp.io&lt;/li&gt;
&lt;li&gt;12/8 Google Developer Day Livestream&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Q&amp;amp;A&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why Button Navigation?
&lt;ul&gt;&lt;li&gt;Easier to touch (than top)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id="reactnativeperformancetuning"&gt;React Native Performance Tuning&lt;/h3&gt;

&lt;p&gt;@Ray Shih&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dr. Stephen Strange: How do I get from here to there?&lt;/p&gt;
  
  &lt;p&gt;The Ancient One: How did you become a doctor?&lt;/p&gt;
  
  &lt;p&gt;Dr. Stephen Strange: Study and practice. Years of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;講者開頭先介紹了對他來說 React 的本質就是 Data -&gt; View 的過程, 傳統的網頁處理 Dom (View) 是有 life cycle 的 (State 的切換), 但在 react native 是透過 Virtual DOM 的 diff 不同來表達 state 的差異、更新。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;前言的部分筆者聽不是很瞭...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Why React-Native&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不需要自己去刻 JSON parser&lt;/li&gt;
&lt;li&gt;render function 可以很容易的 Scale 做拆解&lt;/li&gt;
&lt;li&gt;開發即時&lt;/li&gt;
&lt;li&gt;It's Native&lt;/li&gt;
&lt;li&gt;Facebook 真的有在用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Measure&lt;/strong&gt; You Can't Optimize What You Can't Measure&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Systrace 評估是否執行超過一個 frame 框
&lt;ul&gt;&lt;li&gt;Render thread&lt;/li&gt;
&lt;li&gt;nativemodules thread&lt;/li&gt;
&lt;li&gt;uithread thread&lt;/li&gt;
&lt;li&gt;jsthread thread&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;console.log&lt;/li&gt;
&lt;li&gt;End user test&lt;/li&gt;
&lt;li&gt;react 本身已有套分析工具&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Technical&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Async Task 放到背後執行&lt;/li&gt;
&lt;li&gt;Virtual DOM diff 本身也有 performance 問題, 盡量減少 virtual DOM diff 的次數: shouldComponentUpdate (內容去比對新舊 property)&lt;/li&gt;
&lt;li&gt;global single state 但筆者認為這邊應該要用 flux 架構來解決更新資料的問題&lt;/li&gt;
&lt;li&gt;減少 Bridge 溝通的次數&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;講者有釋出模組 &lt;a href="https://www.npmjs.com/package/fun-react"&gt;fun-react&lt;/a&gt; 包裝了一些功能。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h3 id="antiantiad"&gt;Anti-Anti-AD / 反反廣告&lt;/h3&gt;

&lt;p&gt;@Aki Yu&lt;/p&gt;

&lt;p&gt;APP 不管是在 Apple Store or Google Play 其實都賣不太動 (除非本身是知名軟體), 主要還是靠廣告佔了整體 82% 的收入, 直到 Adblock 的出現之後, 讓廣告收益銳減 (對開發者來說, 其實不知道發生什麼事, 只知道廣告流量突然降低)。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Adblock 運作的原理是針對連線去對 content 做 filter, 從系統層下手而非應用層。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;講者使用 Charles (網路工具) 來示範建立 Proxy, 再讓手機透過此 Proxy Server 連線內含廣告的應用軟體, 撈出有無開啟的連線差異確認廣告網址 domain, 最後在程式中檢查對廣告 domain 做 request header 的確認連線有無成功, 以此判定是否安裝 Adblock。&lt;/p&gt;

&lt;p&gt;如果使用者安裝 Adblock 開發者可以做什麼?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;do nothing  &lt;/li&gt;
&lt;li&gt;fix UI/UX bug (解決廣告欄被移除內容的顯示問題)  &lt;/li&gt;
&lt;li&gt;Shut down App (not good)  &lt;/li&gt;
&lt;li&gt;Limitation might be a good way (限制部分功能提示解除 Adblock 黑名單)  &lt;/li&gt;
&lt;li&gt;以顯示客製 AD 取代  &lt;/li&gt;
&lt;li&gt;Begging users (最好的方式是 &lt;strong&gt;求使用者&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;手機連線 Proxy 帶到的 security keyword : man in the middle attack。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h3 id="prototypeui"&gt;Prototype 與 UI 狀態間的測試&lt;/h3&gt;

&lt;p&gt;@Akane Lee&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UI 六種狀態&lt;/strong&gt; (部分節入字 O'Reilly)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;理想 ideal: 一切完美的情況下, 最能呈現應用本身的狀態&lt;/li&gt;
&lt;li&gt;空白 empty: 第一次開始使用, 所有資料都 reset 的時候&lt;/li&gt;
&lt;li&gt;極限 maximum: 內容的最大值、最小值 (溫度的正負極限顯示, 文字換行的表示)&lt;/li&gt;
&lt;li&gt;錯誤 error: 各種錯誤發生時的狀態 (錯誤的提示)&lt;/li&gt;
&lt;li&gt;載入 loading: 降低等待的不耐煩 (超過 4 秒給進度條)&lt;/li&gt;
&lt;li&gt;局部資料 partial： 理想狀態下的小地方變動, 藉由統一規則來設計 (動作搭配復原的設計, 對使用者學習過程中滿重要的)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Prototype&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;測試驗證產品, 用以表達 User Behaivor。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Wireframe (有紙本與非紙本的形式), 快速、簡單、成本低&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用者不容易看懂, 僅做內部測試容易與真實情況產生落差, 比較容易因為按步操作而忽略到錯誤的情形。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mockup 接近成品, 容易理解 ex. &lt;a href="https://www.invisionapp.com/"&gt;https://www.invisionapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;仍是有與真實情境不同, 預期以外的細節落差無法反映的問題&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Program 程式等級的, 離上架差一步, 最精準&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;成本高、製作時程長、來回修改不易&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="referencekeyword"&gt;Reference Keyword&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Rapid Prototyping&lt;/strong&gt; : Sketching &amp;amp; Paper Prototyping、Digtial Prototyping、Native Prototyping。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id="activityrecognitionwithtensorflow"&gt;Activity Recognition with TensorFlow&lt;/h3&gt;

&lt;p&gt;@Aaron Lai&lt;/p&gt;

&lt;p&gt;汗... 機器學習還真的不太適合在會議上做分享。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses.html"&gt;台大課程 - 李宏毅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://playground.tensorflow.org/"&gt;TensorFlow Playground&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="hackpad"&gt;Hackpad&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Activity Net&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://activity-net.org/"&gt;http://activity-net.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;辨識整體影片內容&lt;/li&gt;
&lt;li&gt;偵測片段活動內容&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TensorFlow&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tensorflow.org/"&gt;https://www.tensorflow.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Auto-Differentiation&lt;/li&gt;
&lt;li&gt;Input - Placeholders
&lt;ul&gt;&lt;li&gt;statuc or dynamic shape&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Variables
&lt;ul&gt;&lt;li&gt;pass initial values&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Basic Ops
&lt;ul&gt;&lt;li&gt;Matrix multiply, concatenate&lt;/li&gt;
&lt;li&gt;add(boradcast), multiply&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Session
&lt;ul&gt;&lt;li&gt;Connect the backend&lt;/li&gt;
&lt;li&gt;Run the graph&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language- py"&gt;    tf.inialize_all_variables()
    tf.Session()
    tf.run()
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Variable Scope&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Variables within the same scope could be "reuse"&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update Parameters&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language- py"&gt;    tf.train(optimizer)
    minimize(cost)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Assign Device&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language- py"&gt;    tf.device()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Machine Learning Framework&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hypotheses--&gt;Inference--&gt;Training&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deep Learning&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Course by Hung-Yi Lee
&lt;a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses"&gt;http://speech.ee.ntu.edu.tw/~tlkagk/courses&lt;/a&gt;&lt;em&gt;MLSD15&lt;/em&gt;2.html &lt;br&gt;
+我自己推薦 Course by Stanford  &lt;a href="https://www.youtube.com/playlist?list=PLkt2uSq6rBVctENoVBg1TpCC7OQi31AlC"&gt;https://www.youtube.com/playlist?list=PLkt2uSq6rBVctENoVBg1TpCC7OQi31AlC&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Neural Network&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Logistic Regression&lt;/li&gt;
&lt;li&gt;Many neurons&lt;/li&gt;
&lt;li&gt;Different Activation function&lt;/li&gt;
&lt;li&gt;More Layers&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Deep Neural NetWork
&lt;ul&gt;&lt;li&gt;ImageNet &lt;a href="http://image-net.org/"&gt;http://image-net.org/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;TensorFlow Playground
&lt;a href="http://playground.tensorflow.org/"&gt;http://playground.tensorflow.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DNN Example: autoencoder&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;MNIST data &lt;a href="http://yann.lecun.com/exdb/mnist/"&gt;http://yann.lecun.com/exdb/mnist/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Auto-encode: DNN as Encoder and Decoder&lt;/li&gt;
&lt;li&gt;Unsupervised (Dimension reduction) &lt;/li&gt;
&lt;li&gt;"Representaion" of the image&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Neural Network With Memory&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Recurrent Neural Network
&lt;ul&gt;&lt;li&gt;Memory cell&lt;/li&gt;
&lt;li&gt;Reuse&lt;/li&gt;
&lt;li&gt;Sequence&lt;/li&gt;
&lt;li&gt;Hard to train&lt;/li&gt;
&lt;li&gt;Cannot "connect the dots"&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Long Short-Term Memory (LSTM)
&lt;ul&gt;&lt;li&gt;Gate Mechanism&lt;/li&gt;
&lt;li&gt;&lt;a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/"&gt;http://colah.github.io/posts/2015-08-Understanding-LSTMs/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Convolution Neural Network
&lt;ul&gt;&lt;li&gt;&lt;a href="http://cs231n.github.io/convolutional-networks/"&gt;http://cs231n.github.io/convolutional-networks/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Attention Mechanism
&lt;ul&gt;&lt;li&gt;&lt;a href="http://distill.pub/2016/augmented-rnns/"&gt;http://distill.pub/2016/augmented-rnns/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Putting All Thing Together&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Video --&gt; Inception-V3 (GoogleNet) --&gt; 2048 dims features --&gt; Attention RNN --&gt;Match: small DNN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TensorFlow Examples&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/aymericdamien/TensorFlow-Examples"&gt;https://github.com/aymericdamien/TensorFlow-Examples&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;blockquote&gt;
  &lt;p&gt;最後, 在一日的議程上其實感覺會結束得有點倉促, 私心慢慢覺得最近由社群所舉辦的 Conference 有逐漸疲軟的趨勢, 不如早期剛如雨後春筍般成立社群時的群眾參與度熱烈, 我想未來想藉由在這樣的舞台 Promote 自己也會愈來愈困難 囧&gt;; 但意外的慶幸自己能在這次的議程上, 關於技術的分享比較少看到新的 Terms 了, 期許自己未來也能對被關注的技術保有更多的敏銳度。&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title>react-native-animatable 解析 (未完)</title><description>&lt;p&gt;&lt;a href="https://github.com/oblador/react-native-animatable/blob/master/index.js"&gt;Github Source Code&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;最近開始學習 JavaScript, 趁著 trace 別人寫的 code 來認識基本語法; 本篇就從為了要實做一些動畫效果, 一邊觀察 react-native-animatable 這個模組來一邊學習動畫的操作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="http://browniefed.com/react-native-animation-book/"&gt;Animation Reference&lt;/a&gt; @browniefed&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;關於動畫功能介紹與舉例皆滿詳盡的一本 GitBook。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="reactjscomponent"&gt;ReactJS Component 生命週期&lt;/h2&gt;

&lt;p&gt;在介紹模組內容之前, 要先補齊一些對元件的基礎觀念。( &lt;a href="http://andyyou.logdown.com/posts/178998-reactjs-assembly-operation-and-life-cycle"&gt;Reference I&lt;/a&gt;、&lt;a href="https://facebook.github.io/react/docs/react-component.html"&gt;Reference II&lt;/a&gt; )&lt;/p&gt;

&lt;h3 id="3stages"&gt;3 Stages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mounting&lt;/strong&gt;：元件正準備要被寫入 DOM&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Updating&lt;/strong&gt;：元件偵測到狀態的改變準備重新渲染。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unmounting&lt;/strong&gt;：元件正要被從 DOM 中移除。


&lt;blockquote&gt;
  &lt;p&gt;分別會用 Will、Did 來修飾被觸發的 Callback Function Name, 來代表在這些 Stage 發生前或後的關係。&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;strong&gt;Mounting&lt;/strong&gt;</description><link>http://captainvincent.github.io/react-native-animatable-jie-xi/</link><guid isPermaLink="false">a554483a-fa8b-4551-a8fe-f6a7f3465c3b</guid><category>react-native</category><dc:creator>Captain Vincent</dc:creator><pubDate>Sun, 20 Nov 2016 15:06:40 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href="https://github.com/oblador/react-native-animatable/blob/master/index.js"&gt;Github Source Code&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;最近開始學習 JavaScript, 趁著 trace 別人寫的 code 來認識基本語法; 本篇就從為了要實做一些動畫效果, 一邊觀察 react-native-animatable 這個模組來一邊學習動畫的操作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="http://browniefed.com/react-native-animation-book/"&gt;Animation Reference&lt;/a&gt; @browniefed&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;關於動畫功能介紹與舉例皆滿詳盡的一本 GitBook。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="reactjscomponent"&gt;ReactJS Component 生命週期&lt;/h2&gt;

&lt;p&gt;在介紹模組內容之前, 要先補齊一些對元件的基礎觀念。( &lt;a href="http://andyyou.logdown.com/posts/178998-reactjs-assembly-operation-and-life-cycle"&gt;Reference I&lt;/a&gt;、&lt;a href="https://facebook.github.io/react/docs/react-component.html"&gt;Reference II&lt;/a&gt; )&lt;/p&gt;

&lt;h3 id="3stages"&gt;3 Stages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mounting&lt;/strong&gt;：元件正準備要被寫入 DOM&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Updating&lt;/strong&gt;：元件偵測到狀態的改變準備重新渲染。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unmounting&lt;/strong&gt;：元件正要被從 DOM 中移除。


&lt;blockquote&gt;
  &lt;p&gt;分別會用 Will、Did 來修飾被觸發的 Callback Function Name, 來代表在這些 Stage 發生前或後的關係。&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;strong&gt;Mounting Stage&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;getInitialState() / constructor()：當物件被調用時此方法會在寫入 DOM 之前被觸發, 通常用來管理狀態的元件可以用這個方法初始化一些資料, constructor 的 naming 比較符合物件導向習慣的用語, 但是在 ES6 才支援。&lt;/li&gt;
&lt;li&gt;componentWillMount：當元件內部的結構處理完畢 &lt;strong&gt;準備寫入 DOM 之前觸發&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;componentDidMount(DOMElement rootNode)：當元件 &lt;strong&gt;被寫入 DOM 之後觸發&lt;/strong&gt;。


&lt;blockquote&gt;
  &lt;p&gt;當初始化需要操作 DOM 元素就可以用這個方法。&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;strong&gt;Updating Stage&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;componentWillReceiveProps(nextProps)：已掛載的元件收到新的 props 時被觸發。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在這個方法裡你通常會去比較 this.props 和 nextProps 然後再用 this.setState 去改變狀態。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;shouldComponentUpdate(nextProps, nextState)：這個函式需要回傳一個布林值, 當元件判斷是否需要更新 DOM 時會被觸發。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;你可以在這個方法裡面去比較 this.props、this.state、nextProps、nextState 來決定是否需要更新, 回傳 false 則會跳過此次觸發不更新, 如果你什麼都不回傳預設會當做 false。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;componentWillUpdate：例如在上面 shouldComponentUpdate 你回傳了 true, 元件確定要更新了, 在準備更新前這個方法會被觸發。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;componentDidupdate(prevProps, prevState, rootNode)：更新後觸發。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Unmounting Stage&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;componentWillUnmount()：當元件準備要被移除或破壞時觸發。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=""&gt;補充&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;掛載後才能使用的方法
&lt;ul&gt;&lt;li&gt;getDOMNode()：使用此方法會傳回一個 DOM 元素物件, 透過這個方法你可以取得一個參考物件直接操作 DOM 節點。&lt;/li&gt;
&lt;li&gt;forceUpdate()：任何已掛載的元件, 當你知道元件內部有些狀態已經改變但他不是透過 this.setState() 去修改值的時候可以呼叫這個方法強迫更新。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;componentDidMount() 和 componentDidUpdate() 的 rootNode 參數只是提供你一個比較方便的方式存取 DOM , 實際使用和 this.getDOMNode() 是一樣的。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;react-native-animatable 的模組結構很單純, Source Code 的部分只有一個 index.js 檔案, 後面將對 Source Code 的部分拆分成幾個 Section (片段) 來介紹。&lt;/p&gt;

&lt;h3 id="codesection1"&gt;Code Section 1&lt;/h3&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;// Transform an object to an array the way react native wants it for transform styles
// { a: x, b: y } =&amp;gt; [{ a: x }, { b: y }]
function createKeyedArray(obj) {  
  return Object.keys(obj).map(key =&amp;gt; {
    let keyed = {};
    keyed[key] = obj[key]; // Copy value
    return keyed;
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt;: { a: x, b: y } =&gt; [{ a: x }, { b: y }]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;語法複習&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Object.keys(obj)&lt;/strong&gt; 從 object 中取出所有的鍵值, 物件的屬性構成由 (key, value)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Array.prototype.map(Callback)&lt;/strong&gt; 會將當前陣列的每個元素執行 Callback 回傳的結果, 集合成另一個陣列回傳&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;=&gt;&lt;/strong&gt; fat arrow function (箭頭函式)
&lt;ul&gt;&lt;li&gt;(param1, param2, …, paramN) =&gt; { statements } &lt;/li&gt;
&lt;li&gt;(param1, param2, …, paramN) =&gt; expression // 等於 :  =&gt; { return expression; } &lt;/li&gt;
&lt;li&gt;singleParam =&gt; { statements } // 只有一個參數時,&lt;/li&gt;
&lt;li&gt;() =&gt; { statements } //若無參數,就一定要加括號:&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="codesection2"&gt;Code Section 2&lt;/h3&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;// Helper function to calculate transform values, args:
// direction: in|out
// originOrDestination: up|down|left|right
// verticalValue: amplitude for up/down animations
// horizontalValue: amplitude for left/right animations
function getAnimationValueForDirection(direction, originOrDestination, verticalValue, horizontalValue) {  
  const isVertical = originOrDestination === 'up' || originOrDestination === 'down';
  const modifier = (isVertical &amp;amp;&amp;amp; direction === 'out' ? -1 : 1) * (originOrDestination === 'down' || originOrDestination === 'left' ? -1 : 1);
  return modifier * (isVertical ? verticalValue : horizontalValue);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="codesection3"&gt;Code Section 3&lt;/h3&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;const TRANSFORM_STYLE_PROPERTIES = [  
  'rotate',
  'rotateX',
  'rotateY',
  'rotateZ',
  'scale',
  'scaleX',
  'scaleY',
  'translateX',
  'translateY',
  'skewX',
  'skewY',
];

// Transforms { translateX: 1 } to { transform: [{ translateX: 1 }]}
function wrapStyleTransforms(style) {  
  let wrapped = {};
  Object.keys(style).forEach(key =&amp;gt; {
    if (TRANSFORM_STYLE_PROPERTIES.indexOf(key) !== -1) {
      if (!wrapped.transform) {
        wrapped.transform = []; // Create new array.
      }
      wrapped.transform.push({
        [key]: style[key],
      });
    } else {
      wrapped[key] = style[key];
    }
  });
  return wrapped;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt;: Transforms { translateX: 1, undefined: value } to { transform: [{ translateX: 1 }], undefined: value}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;語法複習&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;forEach&lt;/strong&gt; 如同 map 會反覆迭代陣列中的元素, 差別是不會回傳值&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;// Returns a flattened version of style with only `keys` values.
function getStyleValues(keys, style) {  
  if (!StyleSheet.flatten) {
    throw new Error('StyleSheet.flatten not available, upgrade React Native or polyfill with StyleSheet.flatten = require(\'flattenStyle\');');
  }
  let values = {};
  let flatStyle = Object.assign({}, StyleSheet.flatten(style));
  if (flatStyle.transform) {
    flatStyle.transform.forEach(transform =&amp;gt; {
      const key = Object.keys(transform)[0];
      flatStyle[key] = transform[key];
    });
    delete flatStyle.transform;
  }

  (typeof keys === 'string' ? [keys] : keys).forEach(key =&amp;gt; {
    values[key] = (key in flatStyle ? flatStyle[key] : getDefaultStyleValue(key));
  });
  return values;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;StyleSheet.flatten&lt;/strong&gt; Flattens an array of style objects, 將多個 style object 合併成單一有效的 style object (重複的元素會剔除掉無效的) &lt;a href="https://facebook.github.io/react-native/docs/stylesheet.html#flatten"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Object.assign(target, ...sources)&lt;/strong&gt; 回傳從 source 端複製後的 target object&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Object.assign 對於 object 中如果存在其他指向 object 的屬性, 會僅複製到 reference, 造成兩物件的物件屬性如果變化會產生連動關係, 可透過lodash 的 clonedeep 來解決。&lt;a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"&gt;Reference I&lt;/a&gt;、&lt;a href="http://jigsawye.com/2015/10/06/javascript-object-assign/"&gt;Reference II&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Property initializers&lt;/strong&gt; ES6+ 的寫法之一是透過 static propType、static defaultProps 為 property 建立檢查的機制與預設值&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;...&lt;/strong&gt; 擴展運算符 (Spread Operator)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var str = 'hello';  
[...str] //  ['h','e','l','l','o']
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>React Native 學習手冊 (GitBook)</title><description>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;Learning React Native. by &lt;strong&gt;Bonnie Eisenman&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="https://c1.staticflickr.com/1/320/31449681432_7dc3803237_z.jpg" alt="BookCover"&gt;&lt;/p&gt;

&lt;p&gt;筆者最近花了差不多一個月的時間, 總算把 &lt;strong&gt;React Native 學習手冊&lt;/strong&gt; 閱讀以及例子都練習完畢了 (...累), 過程中當然也一邊把重點都整理到 Gitbook 讓自己之後可以複習、消化, 回首來看, 這本也是筆者少數真的有完成的電子書了, 平時更新 Blog 就感到頗為費心, 但果然還是不能跟寫書相比 (不管是量 或是 資料上的 Survey), 不過知識不應該僅屬於個人, 希望有需要的人, 這本電子書整理的資料也能對你有所幫助。&lt;/p&gt;

&lt;h3 id="gitbookthttpswwwgitbookcombookcaptainvincentreactnativedetails"&gt;&lt;a href="https://www.gitbook.com/book/captainvincent/reactnative/details"&gt;GitBookt 傳送門&lt;/a&gt;&lt;/h3&gt;</description><link>http://captainvincent.github.io/react-native-xue-xi-shou-ce/</link><guid isPermaLink="false">fdff0b7d-6af1-487b-981a-8465da27012b</guid><category>Facebook</category><category>React Native</category><category>Gitbook</category><dc:creator>Captain Vincent</dc:creator><pubDate>Wed, 16 Nov 2016 12:54:43 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;Learning React Native. by &lt;strong&gt;Bonnie Eisenman&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="https://c1.staticflickr.com/1/320/31449681432_7dc3803237_z.jpg" alt="BookCover"&gt;&lt;/p&gt;

&lt;p&gt;筆者最近花了差不多一個月的時間, 總算把 &lt;strong&gt;React Native 學習手冊&lt;/strong&gt; 閱讀以及例子都練習完畢了 (...累), 過程中當然也一邊把重點都整理到 Gitbook 讓自己之後可以複習、消化, 回首來看, 這本也是筆者少數真的有完成的電子書了, 平時更新 Blog 就感到頗為費心, 但果然還是不能跟寫書相比 (不管是量 或是 資料上的 Survey), 不過知識不應該僅屬於個人, 希望有需要的人, 這本電子書整理的資料也能對你有所幫助。&lt;/p&gt;

&lt;h3 id="gitbookthttpswwwgitbookcombookcaptainvincentreactnativedetails"&gt;&lt;a href="https://www.gitbook.com/book/captainvincent/reactnative/details"&gt;GitBookt 傳送門&lt;/a&gt;&lt;/h3&gt;</content:encoded></item><item><title>面對父母老去的勇氣 書摘</title><description>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;老いた親を愛せますか? それでも介護はやってくる － &lt;strong&gt;岸見一郎&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在 Amazon.JP 查詢日文書名時, 不經意地注意到, 此作者的書也是由 &lt;strong&gt;幻冬社&lt;/strong&gt; 所出版 (不也就是之前剛拜讀過著作的 &lt;strong&gt;見城 徹&lt;/strong&gt; 先生所創立), 這世界實在太小(?)&lt;/p&gt;

&lt;p&gt;此書的閱讀起因, 一是來自於作者的另一篇知名著作「被討厭的勇氣」(筆者同事也曾向筆者熱情推薦, 但一直還未有機會翻閱) 而勾起的好奇, 另一個理由就是筆者隨者年過而立, 也開始意識到父母親老了, 在生活相處的細節慢慢感受到角色的轉變, 父母不再如壯年般, 能適應變遷快速的今日, 存在緩慢甚至拒絕、排斥學習的固化心態, 身為家中的么子 (腰子?) , 一直在思索長年身為遊子的我們, 要如何陪伴父母面對老年, 又如何持續維繫家中的凝聚; 本文就著手整理一些書中心理建設的觀念, 供彼此互勉學習。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;面對人生沒有道理的現實, 無需逞強, 勇敢承認很多事情是我們做不到的。&lt;/li&gt;
&lt;li&gt;父母會在子女需要自己時, 感到存在的意義而打起精神, 最好的孝順－就是不孝 (這裡指的是讓父母有限度的為子女擔憂)。&lt;/li&gt;
&lt;li&gt;明白身為人的價值是在 &lt;strong&gt;還能夠感受喜悅&lt;/strong&gt;, 而非生產力, 父母製造麻煩有時是為了吸引子女的注意, 確保在家中的地位,&lt;/li&gt;&lt;/ul&gt;</description><link>http://captainvincent.github.io/mian-dui-fu-mu-lao-qu-de-yong-qi/</link><guid isPermaLink="false">7e6c0181-b22d-4fa3-8358-6ea3ffff4054</guid><category>岸見一郎</category><dc:creator>Captain Vincent</dc:creator><pubDate>Sat, 12 Nov 2016 23:56:56 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;老いた親を愛せますか? それでも介護はやってくる － &lt;strong&gt;岸見一郎&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在 Amazon.JP 查詢日文書名時, 不經意地注意到, 此作者的書也是由 &lt;strong&gt;幻冬社&lt;/strong&gt; 所出版 (不也就是之前剛拜讀過著作的 &lt;strong&gt;見城 徹&lt;/strong&gt; 先生所創立), 這世界實在太小(?)&lt;/p&gt;

&lt;p&gt;此書的閱讀起因, 一是來自於作者的另一篇知名著作「被討厭的勇氣」(筆者同事也曾向筆者熱情推薦, 但一直還未有機會翻閱) 而勾起的好奇, 另一個理由就是筆者隨者年過而立, 也開始意識到父母親老了, 在生活相處的細節慢慢感受到角色的轉變, 父母不再如壯年般, 能適應變遷快速的今日, 存在緩慢甚至拒絕、排斥學習的固化心態, 身為家中的么子 (腰子?) , 一直在思索長年身為遊子的我們, 要如何陪伴父母面對老年, 又如何持續維繫家中的凝聚; 本文就著手整理一些書中心理建設的觀念, 供彼此互勉學習。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;面對人生沒有道理的現實, 無需逞強, 勇敢承認很多事情是我們做不到的。&lt;/li&gt;
&lt;li&gt;父母會在子女需要自己時, 感到存在的意義而打起精神, 最好的孝順－就是不孝 (這裡指的是讓父母有限度的為子女擔憂)。&lt;/li&gt;
&lt;li&gt;明白身為人的價值是在 &lt;strong&gt;還能夠感受喜悅&lt;/strong&gt;, 而非生產力, 父母製造麻煩有時是為了吸引子女的注意, 確保在家中的地位, 讓父母相信自己存在的價值, 便能避免如此。&lt;/li&gt;
&lt;li&gt;不讓父母被當患者而活, 而是活得像他自己。&lt;/li&gt;
&lt;li&gt;失智患者就像身處在朦朧大霧之中, 時而清醒時而迷濛, 清醒時並非完全記得過去, 而是瞭解自身與他人的關係以及身處何處, 面對患者不應勉強回憶過去而導致爭執 (甚至執著成為仍是記得過去不愉快的那一方), 面對重複提及的話語也要能耐心聽取, 應尊重患者活在當下, 面對他們僅有「現在」的這個事實。&lt;/li&gt;
&lt;li&gt;尊敬雙親, &lt;strong&gt;體認到對方是無可取代的對象&lt;/strong&gt;, 不刻意美化也不帶理想的有色眼鏡而批判現在的對方。&lt;/li&gt;
&lt;li&gt;不要強逼對方按照自己的想法而活, 也不應阻止父母親想做的事, 因為欲求是能夠感受到活著喜悅的方式, 一旦想做的事變少了, 能做到的事也就會更少。&lt;/li&gt;
&lt;li&gt;不要因付出而計較對方是否領情, 也不要因照護的過程而對父母親激動。&lt;/li&gt;
&lt;li&gt;待在身邊也是很重要的支持了。&lt;/li&gt;
&lt;li&gt;總是認為對方的立意良善, 有助於改善親子互動的關係, 解開過去的心結。&lt;/li&gt;
&lt;li&gt;避開爭權的鬥爭, 也放下彼此在家庭中的角色, 以「人」的身份來對談。&lt;/li&gt;
&lt;li&gt;明白子女再怎麼付出也無法報答完父母的恩情, 也許我們無法將父母拉回時間共通的社會, 但是我們可以走進他們獨自的世界, 不斷地澆水－就算今後再也不會開花。&lt;/li&gt;
&lt;li&gt;感謝父母仍存在的每一天, 並把握人生的當下。&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title>編輯這種病 書摘</title><description>&lt;h5 id=""&gt;－記那些折磨過我的大牌作家們－&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;編集者という病い － &lt;strong&gt;見城徹&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;書在很匆忙地翻閱中被催還回去了, 所以不敢稱這篇為筆記, 比較像是個人對書中有的記憶點摘要一下而已。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;見城&lt;/strong&gt; 先生認為會暢銷的內容 (無論是書籍、電視節目或任何傳媒) 都具備四個要素, 只要能成就這些條件, 必定會大受歡迎。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;原創性&lt;/li&gt;
&lt;li&gt;淺顯易懂&lt;/li&gt;
&lt;li&gt;與眾不同&lt;/li&gt;
&lt;li&gt;感染力強&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;見城&lt;/strong&gt; ：「創作是孤獨的。耶穌用羊來比喻人, 在上百匹羊當中, 總會有一隻是多餘的、異常的、在群體中落單的羊。我認為反映那一隻羊的內在世界就是創作, 創作是為這個目的而存在的。創作是為了那隻苦悶的、在共同群體中格格不入的羊而存在。」, 身為編輯要治好的就是這些邊緣人的「創作病」&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;插曲&lt;/p&gt;
  
  &lt;p&gt;因為此書的關係也回頭去聽了一些 &lt;strong&gt;尾崎豐&lt;/strong&gt; 比較廣為流傳的曲目; 另外, 筆者也丟臉的發現原來自己喜歡的 Merry Christmas, Mr Lawrence. 作者就是 &lt;strong&gt;阪本龍一&lt;/strong&gt;。&lt;strong&gt;見城&lt;/strong&gt; 先生書中提到的世界, 原來離我並沒有那麼遠。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Merry Christmas Mr. Lawrence&lt;/strong&gt;&lt;/p&gt;</description><link>http://captainvincent.github.io/bian-ji-zhe-zhong-bing/</link><guid isPermaLink="false">0b40d163-6a52-4c58-a267-f5065d7f6514</guid><category>見城徹</category><dc:creator>Captain Vincent</dc:creator><pubDate>Tue, 01 Nov 2016 13:45:13 GMT</pubDate><content:encoded>&lt;h5 id=""&gt;－記那些折磨過我的大牌作家們－&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;編集者という病い － &lt;strong&gt;見城徹&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;書在很匆忙地翻閱中被催還回去了, 所以不敢稱這篇為筆記, 比較像是個人對書中有的記憶點摘要一下而已。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;見城&lt;/strong&gt; 先生認為會暢銷的內容 (無論是書籍、電視節目或任何傳媒) 都具備四個要素, 只要能成就這些條件, 必定會大受歡迎。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;原創性&lt;/li&gt;
&lt;li&gt;淺顯易懂&lt;/li&gt;
&lt;li&gt;與眾不同&lt;/li&gt;
&lt;li&gt;感染力強&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;見城&lt;/strong&gt; ：「創作是孤獨的。耶穌用羊來比喻人, 在上百匹羊當中, 總會有一隻是多餘的、異常的、在群體中落單的羊。我認為反映那一隻羊的內在世界就是創作, 創作是為這個目的而存在的。創作是為了那隻苦悶的、在共同群體中格格不入的羊而存在。」, 身為編輯要治好的就是這些邊緣人的「創作病」&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;插曲&lt;/p&gt;
  
  &lt;p&gt;因為此書的關係也回頭去聽了一些 &lt;strong&gt;尾崎豐&lt;/strong&gt; 比較廣為流傳的曲目; 另外, 筆者也丟臉的發現原來自己喜歡的 Merry Christmas, Mr Lawrence. 作者就是 &lt;strong&gt;阪本龍一&lt;/strong&gt;。&lt;strong&gt;見城&lt;/strong&gt; 先生書中提到的世界, 原來離我並沒有那麼遠。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Merry Christmas Mr. Lawrence - Ryuichi Sakamoto&lt;/strong&gt;&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/T1cQBP0Vzx8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;I Love You - 尾崎豊 (Yutaka Ozaki)&lt;/strong&gt;&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/iaMF-YLNSxQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;卒業 - 尾崎豊&lt;/strong&gt;&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/tWTm5YuCn_A" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;１５の夜 - 尾崎豊&lt;/strong&gt;&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Yu88zx_--wE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content:encoded></item><item><title>強者之道 筆記</title><description>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;Relentless. by &lt;strong&gt;Tim S. Grover, Shari Lesser Wenk&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tim S. Grover 是 Michael Jordan 御用也是唯一的訓練師 (之後也幫助過 Kobe Bryan, Dwyane Wade ...etc), 筆者本身也十分認同造就這些偉大球員的關鍵因素是來自於心靈的強大而非體能上的天賦, 雖不能將這些球員的表現全然歸功於訓練師的方針, 但至少透過身邊的人 (Tim S. Grover) 來描述其精神面與一般人不同之處, 讓我們讀者也能一窺堂奧做為借鏡。&lt;/p&gt;

&lt;h2 id=""&gt;前言&lt;/h2&gt;

&lt;p&gt;大多數的人樂於接受「這樣就夠好了」的想法, 但想要達到無人能抵的程度, 就要成為永不滿足的人。&lt;/p&gt;

&lt;h5 id=""&gt;群體中的三種角色&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;被動者&lt;/strong&gt;－調停者而非決策者的角色, 在群體中總是追隨領導者前進, 一切順利時能處理某種程度的壓力, 但面對大場面時則對產出會有不負責任的反應。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;終結者&lt;/strong&gt;－可以處理大部分的壓力, 能預測事情接下來的狀況, 但在某些預料外的狀況時, 則會無所適從, 重視且追隨表面的名聲、利益以及人們所認同的成功。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;掃蕩者&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>http://captainvincent.github.io/qiang-zhe-zhi-dao/</link><guid isPermaLink="false">90bdc23c-e378-4a69-9cce-5101ead5701c</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Wed, 12 Oct 2016 13:08:44 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;Relentless. by &lt;strong&gt;Tim S. Grover, Shari Lesser Wenk&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tim S. Grover 是 Michael Jordan 御用也是唯一的訓練師 (之後也幫助過 Kobe Bryan, Dwyane Wade ...etc), 筆者本身也十分認同造就這些偉大球員的關鍵因素是來自於心靈的強大而非體能上的天賦, 雖不能將這些球員的表現全然歸功於訓練師的方針, 但至少透過身邊的人 (Tim S. Grover) 來描述其精神面與一般人不同之處, 讓我們讀者也能一窺堂奧做為借鏡。&lt;/p&gt;

&lt;h2 id=""&gt;前言&lt;/h2&gt;

&lt;p&gt;大多數的人樂於接受「這樣就夠好了」的想法, 但想要達到無人能抵的程度, 就要成為永不滿足的人。&lt;/p&gt;

&lt;h5 id=""&gt;群體中的三種角色&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;被動者&lt;/strong&gt;－調停者而非決策者的角色, 在群體中總是追隨領導者前進, 一切順利時能處理某種程度的壓力, 但面對大場面時則對產出會有不負責任的反應。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;終結者&lt;/strong&gt;－可以處理大部分的壓力, 能預測事情接下來的狀況, 但在某些預料外的狀況時, 則會無所適從, 重視且追隨表面的名聲、利益以及人們所認同的成功。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;掃蕩者&lt;/strong&gt;－某種程度來說, 終結者是等待機會表現的人, 而掃蕩者則是會主動創造機會, 視成功為理所當然並永不滿足。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;要知道即使我們成為永不滿足現狀的人, 但事實上我們並不需要、也無法做到, 在人生的每個面向都活得像個掃蕩者, 取捨是每一位掃蕩者都明白的事。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="13"&gt;13 項特質&lt;/h2&gt;

&lt;p&gt;後面標號僅作為 &lt;strong&gt;掃蕩者&lt;/strong&gt; 具備的特質區別之用, 對於原作者而言, 在這些特質上並無任何順序關係 (ex. 重要性、優先性 ...etc)。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;當每個人都覺得已經足夠時，你依然繼續更嚴格的砥礪自己。  &lt;/li&gt;
&lt;li&gt;你會進入絕對領域，讓每個人都閉上嘴，並掌控所有無法掌控之事。&lt;/li&gt;
&lt;li&gt;你完全清楚自己的定位。&lt;/li&gt;
&lt;li&gt;你擁有一個拒絕學好的黑暗面。&lt;/li&gt;
&lt;li&gt;你不會被壓力給嚇倒，而是在壓力中成長茁壯。&lt;/li&gt;
&lt;li&gt;每個人按下「緊急按鈕」後，都會找尋你的身影。&lt;/li&gt;
&lt;li&gt;你不跟任何人競爭，而是找出對手的弱點然後進攻。&lt;/li&gt;
&lt;li&gt;你做出決定，而非建議；當每個人都在問問題時，你已對答案了然於心。&lt;/li&gt;
&lt;li&gt;你不需要熱愛工作，但你沉迷於最終的結果。&lt;/li&gt;
&lt;li&gt;與其受到大家的喜愛，你寧願大家懼怕你。&lt;/li&gt;
&lt;li&gt;你只信賴極為少數的幾個人，而那些你信賴的人最好絕對別讓你失望。&lt;/li&gt;
&lt;li&gt;你不知失敗為何物；你很清楚要得到想要的東西並不只有眼前這條路。&lt;/li&gt;
&lt;li&gt;你不會慶祝眼前的成就，因為你永遠想要更多。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;在作者介紹的這十三種特質中, 筆者本來欲一一為這些篇幅做些簡單的整理摘要, 以表示原作者在標題背後想傳達的想法; But! 人生最厲害就是這個BUT! 雖然整本書的字數不少, 但關於這些特質的內文其實引用意義不大, 故事性的文章通常是在建構、給予一個道理背後強而有力的理由, 但作者卻將故事性闡述的手法應用在這些特質上, 似乎在訴說著, 一旦當你有了這些特質, 真的面臨事件時的態度應該會是像怎樣, 「因為過往的掃蕩者都是這樣反應的」; 所以最後筆者對本書著墨的重點仍是回歸到 &lt;strong&gt;對群體中角色定位的認知, 以及這些較為淺白易懂的文字標題&lt;/strong&gt; 上, 其他部分也就未再贅述。&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title>不憂鬱哪能算是工作 筆記</title><description>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;憂鬱でなければ、仕事じゃない － &lt;strong&gt;見城徹、藤田晉&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;會注意到這本書, 是因為其中一位作者 (見城徹) 的另一本著作「人生是一個人的狂熱」而開始, 在還沒來得及拜讀的情況下已被書名吸引住目光, 也許跟我個人過往在學習、工作方面的經驗有關, 面對人生路上追求目標的孤寂感格外有感觸; 以及書商在簡介上的內容也勾起我對作者本身的好奇, 便借閱了其他兩本著作「不憂鬱哪能算是工作」與「編輯這種病」(後者之後等有機會再另寫分享一篇) 來翻閱並記錄摘要。&lt;/p&gt;

&lt;p&gt;本書是集結 &lt;strong&gt;見城先生&lt;/strong&gt; 在工作上多年執著的原則、慣例, 再交由藤田晉對這些寶貴的箴言、誡律寫下屬於這個時代的註解, 而本文就是再透過筆者自行的消化整理的產物。&lt;/p&gt;

&lt;h2 id=""&gt;第一章 人的基本&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;要為小事計較&lt;/strong&gt;－信守每一個微小承諾才能贏得別人的信任, 所有的人際關係都建立在一些細膩的人情世故上, 對己對人都切勿馬虎敷衍處理。 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;打電話給別人時，不能先掛電話&lt;/strong&gt;－打電話給對方實際上是一種打擾他人的行為, 在職場上的潛規則不能忽視, 禮儀其實無所不在。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自我表現和自我厭惡是「孿生兄弟」&lt;/strong&gt;－人的寬度與深度是由這兩者所創出來的, 只有同時具備兩種面向的人才能持續發光發熱。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;努力靠自己，評價由別人&lt;/strong&gt;－現實是殘酷的, 過程終究只是結果的副產物, 若不能帶來好的結果, 一切努力也將白費,&lt;/li&gt;&lt;/ul&gt;</description><link>http://captainvincent.github.io/bu-you-yu-na-neng-suan-shi-gong-zuo/</link><guid isPermaLink="false">3e72ce02-cbee-440d-a91a-0f85c6d99842</guid><category>見城徹</category><category>藤田晉</category><dc:creator>Captain Vincent</dc:creator><pubDate>Sun, 09 Oct 2016 13:06:56 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;憂鬱でなければ、仕事じゃない － &lt;strong&gt;見城徹、藤田晉&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;會注意到這本書, 是因為其中一位作者 (見城徹) 的另一本著作「人生是一個人的狂熱」而開始, 在還沒來得及拜讀的情況下已被書名吸引住目光, 也許跟我個人過往在學習、工作方面的經驗有關, 面對人生路上追求目標的孤寂感格外有感觸; 以及書商在簡介上的內容也勾起我對作者本身的好奇, 便借閱了其他兩本著作「不憂鬱哪能算是工作」與「編輯這種病」(後者之後等有機會再另寫分享一篇) 來翻閱並記錄摘要。&lt;/p&gt;

&lt;p&gt;本書是集結 &lt;strong&gt;見城先生&lt;/strong&gt; 在工作上多年執著的原則、慣例, 再交由藤田晉對這些寶貴的箴言、誡律寫下屬於這個時代的註解, 而本文就是再透過筆者自行的消化整理的產物。&lt;/p&gt;

&lt;h2 id=""&gt;第一章 人的基本&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;要為小事計較&lt;/strong&gt;－信守每一個微小承諾才能贏得別人的信任, 所有的人際關係都建立在一些細膩的人情世故上, 對己對人都切勿馬虎敷衍處理。 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;打電話給別人時，不能先掛電話&lt;/strong&gt;－打電話給對方實際上是一種打擾他人的行為, 在職場上的潛規則不能忽視, 禮儀其實無所不在。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自我表現和自我厭惡是「孿生兄弟」&lt;/strong&gt;－人的寬度與深度是由這兩者所創出來的, 只有同時具備兩種面向的人才能持續發光發熱。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;努力靠自己，評價由別人&lt;/strong&gt;－現實是殘酷的, 過程終究只是結果的副產物, 若不能帶來好的結果, 一切努力也將白費, 所以我們鼓勵對目標投入他人望塵莫及的努力, 同時也要明白該追逐的是最終的成果而非這之中的過程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;坦誠是上策，做事光明磊落&lt;/strong&gt;－做人足夠坦誠, 行事才能得以輕鬆自在。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=""&gt;第二章 磨練自我&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工作太順利，就要起疑心&lt;/strong&gt;－過於順利簡單的事情無法讓自己脫離平庸, 勇於挑戰困難的目標, 有朝一日必會開花結果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;別去參加派對&lt;/strong&gt;－成功者需能忍受孤寂, 參加派對是一種相互取暖的活動, 這些膚淺的聚會並無法累積深厚的情誼, 只是無意義的活動罷了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;「極端」才是關鍵&lt;/strong&gt;－不一般的事物才有其價值, 難以堅持貫策的行為才能建立價值, 追求極端、遠離中庸。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;困境才是下定決心的最佳機會&lt;/strong&gt;－愈是身處於絕境, 也才能愈展現出不凡的覺悟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自己付出了莫大的努力，在別人眼中卻是運氣&lt;/strong&gt;－「運氣好」只能用在自謙的時候, 不要輕視任何人背後的努力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;畢卡索的立體派抽象藝術，藍波的軍火商&lt;/strong&gt;－唯有扎實的基礎才能突破傳統, 人生沒有不用扎根的捷徑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寧為山頂凍死豹，不當山麓痴肥豬&lt;/strong&gt;－莫要沉浸於安穩, 安穩在職場的另一詞彙等同於死亡。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不憂鬱，哪算是工作&lt;/strong&gt;－走出舒適圈的同時會讓人陷入憂鬱, 然而更要在黑暗中奮力跳躍。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=""&gt;第三章 把握人心&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;因為用完而無法遞給對方的名片，用限時專送寄過去&lt;/strong&gt;－「一期一會」是指人的一生只有一次相遇的機會, 也代表者日本人是如何珍惜人與人之間的緣份, 藤田先生雖然認為時代的變遷對於名片的定位已經不如從前, 但也同意不少傳統大佬對於使用名片的規炬仍十分講究。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最糟糕的飯店工作人員，就是試圖用天氣的話題和客人拉近距離&lt;/strong&gt;－真誠與人交談, 而不是將其視為一項慣性無意義的行為。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要言不由衷地隨便約人吃飯&lt;/strong&gt;－任何一項承諾都要將其視為自身信用的延伸, 珍惜這項資產。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要和第一次見面的人去KTV&lt;/strong&gt;－無法與人真心交流的場合不要參加, 尤其是第一次見面時不要將時間用娛樂來消磨掉。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺乏刺激，就無法抓住對方的心&lt;/strong&gt;－用心去觀察、瞭解對方才能將話題帶入對方身上, 進而拉近彼此。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=""&gt;第四章 影響他人&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;拜託時的一百對一法則&lt;/strong&gt;－待人時常展現誠意, 讓對方積欠恩情, 直至最後總能得到正面回饋, 其價值也不言而喻。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;無償的行為才能創造最大的利益&lt;/strong&gt;－每個人都會珍惜對深陷困境的自己伸出援手的人 (無私的幫助)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如天使般頑強，如惡魔般細膩&lt;/strong&gt;－對他人的善意表現需能頑強 (持久), 而內心惡魔的想法 (有求於人) 需細膩的表現, 不要引來他人反感。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寧為毒藥，莫當良藥&lt;/strong&gt;－莫當濫好人, 適當的猛藥才能助於有突破, 總是打安全牌的人能做到的事也相當有限。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;惟有戀愛，才能孕育對他人的想像力&lt;/strong&gt;－對他人的影響力來自於對他人敏銳的觀察, 談戀愛有助於建立同理心。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=""&gt;第五章 邁向勝利&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;條條大路通自己&lt;/strong&gt;－掌握一個領域只需要熟識三位權威、三位潛力的新人, 其他介於這兩者之間的人都會紛紛上門。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;甘願花錢惹人反感&lt;/strong&gt;－做為創新者顛覆過去總會引來反彈的聲浪, 別在意那些「只是被開槍者發出的慘叫聲」。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;打擊率三成三分三厘的工作哲學&lt;/strong&gt;－能成為一名強打者的先決條件是具備好的場均打擊率, 而非某一場比賽的完全打擊, 勝利時更要思考如何保持, 而非因大獲全勝而忘了保持原本的「打擊姿勢」。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;創造「只應天上有」的事物&lt;/strong&gt;－超越日常性的事物具備獨特極端的特性, 往往能夠吸引大眾。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;莽撞行事，強烈地改變&lt;/strong&gt;－真正的莽撞是愚笨的, 但有意識的莽撞才能製造精彩的成功。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;暢銷是地獄的入口&lt;/strong&gt;－一旦成功之後, 後面有的只是更多的痛苦在等待, 若無法有此覺悟就無法持續成功, 但這才是正道。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=""&gt;第六章 培養成功的動機&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;勝利者一無所獲&lt;/strong&gt;－出自海明威的短篇小說, 作者渴望的是從成功中知道「我還可以奮戰」, 而不是為了回饋而滿足。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;沒有痛苦，就不可能有收穫&lt;/strong&gt;－唯有身處在嚴峻的條件下, 才能更激發身為挑戰者的自覺。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;運動是工作的影子練習&lt;/strong&gt;－運動並不是一件快樂的事, 但不自找痛苦的人成不了大器, 運動中可以在內心重建戰鬥的力量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;葡萄酒是努力工作的男人的「血液」&lt;/strong&gt;－將此作為努力工作後的犒賞, 但筆者本身不喝酒, 所以也就無法體會這種「充實感」。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果無法去「京味」，我就不想工作了&lt;/strong&gt;－西新橋的一家高級日本餐廳「京味」, 作者一直以此作為自身工作的指標, 如果有一天無法再負擔此餐廳的開銷便要退休了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;男人，就要戮力奮戰到流完最後一滴血&lt;/strong&gt;－面對人生中的逆境, 每個人心中都有些信念能讓自己得以支撐下去, 這句話是當 見城先生 六十歲面臨公司存亡得以有勇氣做出重要決策的力量。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;透過本書的閱讀, 似乎可以稍加刻畫出 &lt;strong&gt;見城先生&lt;/strong&gt; 的性格, 如同藤田先生也認同的做法, 在這個追求功利主義的社會, 仍舊堅持以人為本的經營之道, 在人與人之間的互動近乎偏執, 對自身的要求也是以追求痛苦、自殘的態度來砥礪自己, 我們都應當從他身上看見自身的不足, 省去抱怨成功為何仍不降臨在自己的力氣, 繼續努力在黑暗中跳躍吧!&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title>跳槽法則 筆記</title><description>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;ビジネスエリートへのキャリア戦略 － &lt;strong&gt;渡辺 秀和&lt;/strong&gt; (二○一○年一舉拿下「日本獵頭大賽」顧問組MVP大獎)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如何「資歷佈局」? 相較於過去社會的經營者多半是 50~60 歲的中年人, 這個年代年紀輕輕就擁有社會知名度已經不是什麼罕見的事情, 但天才的出現並不會因時代而劇增, 所以這些現代活躍的人物, 是如何擺脫原來僅是平凡的人生, 要來分析這箇中「訣竅」。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;做自己喜歡的事、得到高收入, 同時成為有社會影響力的人。&lt;/strong&gt; (現今趨勢, 是以彈性自由、行動快速並選擇負起社會改革責任的人取代過去組織內部菁英的角色)&lt;/p&gt;

&lt;h2 id=""&gt;打造資歷階梯&lt;/h2&gt;

&lt;p&gt;在 &lt;strong&gt;現在的自己&lt;/strong&gt; 與 &lt;strong&gt;想成為的自己&lt;/strong&gt; 中勾勒出資歷的階梯, 也許無法一步到位, 但透過一層一層的跨越, 也會大幅提升實現的可能性。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;這個時代已經不同過去對職業持有從一而終的看法, 書中建議以逐步逐夢相對踏實的方式邁向目標。 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;設定職涯目標 (避免在目的不明確的情況下, 一直埋頭苦幹, 最終發現走在錯誤的道路上)  &lt;/li&gt;
&lt;li&gt;思考從現狀到目標職務的階梯 (若是不夠瞭解企業聘用人才的條件, 也無從得知這問題的答案)  &lt;/li&gt;
&lt;li&gt;集中努力, 成功跳槽, 勇往直前 (取決於實踐力)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=""&gt;如何提高年薪&lt;/h2&gt;</description><link>http://captainvincent.github.io/tiao-cao-fa-ze/</link><guid isPermaLink="false">826594dc-e155-44c4-a360-1a93271f00e3</guid><category>渡邊秀和</category><dc:creator>Captain Vincent</dc:creator><pubDate>Sat, 01 Oct 2016 08:02:44 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;ビジネスエリートへのキャリア戦略 － &lt;strong&gt;渡辺 秀和&lt;/strong&gt; (二○一○年一舉拿下「日本獵頭大賽」顧問組MVP大獎)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如何「資歷佈局」? 相較於過去社會的經營者多半是 50~60 歲的中年人, 這個年代年紀輕輕就擁有社會知名度已經不是什麼罕見的事情, 但天才的出現並不會因時代而劇增, 所以這些現代活躍的人物, 是如何擺脫原來僅是平凡的人生, 要來分析這箇中「訣竅」。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;做自己喜歡的事、得到高收入, 同時成為有社會影響力的人。&lt;/strong&gt; (現今趨勢, 是以彈性自由、行動快速並選擇負起社會改革責任的人取代過去組織內部菁英的角色)&lt;/p&gt;

&lt;h2 id=""&gt;打造資歷階梯&lt;/h2&gt;

&lt;p&gt;在 &lt;strong&gt;現在的自己&lt;/strong&gt; 與 &lt;strong&gt;想成為的自己&lt;/strong&gt; 中勾勒出資歷的階梯, 也許無法一步到位, 但透過一層一層的跨越, 也會大幅提升實現的可能性。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;這個時代已經不同過去對職業持有從一而終的看法, 書中建議以逐步逐夢相對踏實的方式邁向目標。 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;設定職涯目標 (避免在目的不明確的情況下, 一直埋頭苦幹, 最終發現走在錯誤的道路上)  &lt;/li&gt;
&lt;li&gt;思考從現狀到目標職務的階梯 (若是不夠瞭解企業聘用人才的條件, 也無從得知這問題的答案)  &lt;/li&gt;
&lt;li&gt;集中努力, 成功跳槽, 勇往直前 (取決於實踐力)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=""&gt;如何提高年薪&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;考證照實際付出的代價極高, 需謹慎評估證照對於目標職務的助益有多大。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;跨越薪資之牆&lt;/strong&gt; , 以下是三種在薪資上可以有所突破的途徑。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;階級之牆 (跨越後的薪資差距最大)  &lt;/li&gt;
&lt;li&gt;外商之牆  &lt;/li&gt;
&lt;li&gt;業界之牆&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;三種跳板行業&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;網路商務需求及彈性大  &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;年輕成長中的事業群, 跳槽到其他準備電商化的傳統企業都有即戰力的優勢, 加上這方面的經驗對創業也有幫助, 以及全球化的特性、不排斥年輕人的產業、能夠解決社會問題...等等優點。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;企業顧問有助於學到解決各種問題的能力  &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;善用跳板工作可以跨越障礙, 作者推薦管理顧問業的工作, 既不受過去背景束縛, 也能夠跨足其他管理職位。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;金融投資相關部門有助於找錢創業  &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;大部份毫無企管相關知識或技能能創業成功的人少之又少, 但好在現今拜網路發達所賜, 創業的成本已經極低, 主要發展路線－先培養管理、行銷、策略的經驗, 進入目標領域學習知識與技能, 成立解決該行業現有問題的事業。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=""&gt;取得其他有利條件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;打造明確亮點&lt;/strong&gt;－在資歷上打造出明確的亮點, 持續發展強項可以作為「轉職」或「二度就業」的有利條件。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;英語能力&lt;/strong&gt;－儘早準備有利於跳槽, 但若是真的排斥英語的人, 也要果決選擇放棄, 千萬不要做半套。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;海外商務經驗&lt;/strong&gt;－在外商公司上班 ≠ 海外工作經歷, 待在企業內的海外事業部門反而更佳。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;進入家族企業&lt;/strong&gt;－在年齡層逐漸老化的管理階層, 若能進入家族企業與第二代經營者接觸並取得信任, 將有助於提早打入公司核心 (第二代年輕管理者與資深管理階層會有疏遠的關係)。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;家族企業關係緊密, 所以需與家族保持良好關係, 若與家族經營者關係破裂則會有相當致命的衝擊, 另外需注意的一點是家族企業的職務流動性低, 進入時應謹慎注意是否為幹部職缺, 若非特殊職務則有可能走入無法發揮能力表現的困境。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「35歲界線」一說, 實際上年齡對於不同行業的轉職分界各有不同, 也無需以此設限自己, 大原則 － 年輕的時候應該要盡可能提早累積 &lt;strong&gt;有效&lt;/strong&gt; 資歷, 而年齡接近轉職分界時, 則應該要著手以跨越階級之牆為目標。&lt;/p&gt;

&lt;h2 id=""&gt;職涯陷阱&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;追求通才能力的盲點&lt;/strong&gt;－相較於兼顧能力的求職者, 企業更偏好凹凸不平的能力分佈, 這邊也呼應了 &lt;strong&gt;打造明確亮點&lt;/strong&gt; (比起通才企業可愛好專才)。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;職業適性測驗的盲點&lt;/strong&gt;－適性測驗與結果的配對過於簡單、不可靠, 作者鼓勵應以個人喜好為優先嘗試而非適合與否, 並在追尋過程中設底線, 避免無止境的摸索導致最終失敗風險增高。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;明星企業光環的盲點&lt;/strong&gt;－「朝著終點累積必要的履歷」, 而對於年輕人過分追求進入知名企業的光環, 往往會影響長遠佈局的規劃, 而與目標漸行漸遠。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;長輩建議的迷思&lt;/strong&gt;－世代職涯價值觀存在許多差異, 對於長輩的協助需心存感激, 但採納建議前仍應評估是否可套用現代社會。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;公司內部評價的迷思&lt;/strong&gt;－求職市場與公司的評斷標準不一定相同, 過分追逐公司內部的評價反而會深陷對公司有價值未必對市場有吸引的角色或技能。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=""&gt;三種跳槽註定失敗的情況&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;輕忽與旁人合作的技巧 (報告、聯絡、商量...etc), 像是最常見的主動報告進度是向上管理的方式之一  &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;經營不善的人際關係往往也會成為跳槽的絆腳石。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;起步太慢導致惡性循環, 主管對新進員工的印象來自於一開始, 通常能留下優秀的印象, 會容易產生鬥志繼而適應工作達成好成績  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;不知變通, 無法適應新觀念, 總是心中有：「可是我們以前怎麼樣怎麼樣」的習慣, 無法接受新觀念明白背後的理由&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=""&gt;跳槽法則&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;根據「&lt;strong&gt;喜好&lt;/strong&gt;」規劃職涯目標, 應該先屏除學生時代追逐明星光環的動機, 以成為喜好領域的一流人物為目標。 &lt;br&gt;
&lt;ul&gt;&lt;li&gt;選擇 領域 or 類型&lt;/li&gt;
&lt;li&gt;選擇 角色 (一般企業經營者、新創企業經營者、經營與策略管理專家、公司內部專業技術者)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;三大訣竅幫助確立目標。 &lt;br&gt;
&lt;ul&gt;&lt;li&gt;擬定大方向並立即行動 (細節會在實踐中慢慢補齊)&lt;/li&gt;
&lt;li&gt;決定要快速, 不可拖延&lt;/li&gt;
&lt;li&gt;多方檢驗目標, 可以透過讀書會、職業講座、與周遭朋友或閱讀書籍的方式檢驗是否適合自己&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;應趁年輕時加倍努力, 順著出人頭地的上升氣流, 往後生活會輕鬆不少, 反而在年輕時即想先取得工作與生活的平衡, 會讓晚期與同儕相比更加辛苦。  &lt;/li&gt;
&lt;li&gt;轉職跳槽時的選擇, 工作對於資歷佈局上的益處 &gt;&gt; 立即性的收入些微差距。  &lt;/li&gt;
&lt;li&gt;認真工作與仕途順遂無關, 應主動爭取工作項目來累積資歷成為「&lt;strong&gt;有經驗者&lt;/strong&gt;」, 千萬不要單方面相信「只要認真完成工作, 總會有好事發生」。  &lt;/li&gt;
&lt;li&gt;要在景氣好的時候跳槽, 而非在景氣好的時候留戀舊職務待遇而裹足不前。  &lt;/li&gt;
&lt;li&gt;求職前的準備需周全 (書面工作), 事前反覆的練習也不可少 (面試的練習), 不管是「主動面試」或「透過人才仲介顧問公司介紹」其實各有優點。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=""&gt;實踐上的建議&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;設定職涯目標&lt;/strong&gt;－從喜好的事物下手, 但有時印象深刻跟喜愛會讓人混淆, 作者提供一個方法是寫日記, 記錄追蹤生活中的喜好。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;思考如何抵達職涯高峰的路徑&lt;/strong&gt;－建立資歷階梯的三個關鍵點。&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;綜觀大局思考選擇&lt;/li&gt;
&lt;li&gt;設計抵達目標的最短路徑, 不應該以追求圓滿的技能而消磨時間&lt;/li&gt;
&lt;li&gt;選擇有興趣的領域, 除了抵達終點以外, 過程中的每一站也要能符合求職者本身的喜好會更能順利進行&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;集中努力&lt;/strong&gt;－努力學習能順利跨越轉職障礙的技能, 並在轉職前將準備工作備妥, 包含書面資料針對該職缺的需求做整理突出、筆試則可以對過去的考古題搜集、面試則多對臨場可能被提出的大哉問問題做訓練, 這些準備工作的性價比其實相當高。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;求職管道&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;利用免費人力銀行的資訊, 透過刊登也可以吸引以下兩種途徑的對象。&lt;/li&gt;
&lt;li&gt;獵人頭公司 (獵才顧問), 此類較有機會出現稀有職缺, 但要避免心裡因為「有人主動網羅我」而內心起伏做出倉促的判斷。&lt;/li&gt;
&lt;li&gt;人才仲介顧問, 對求職者來說偏主動的管道, 但須注意各顧問公司專才皆不同, 可多方比較。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;集中努力而非更努力&lt;/strong&gt;－現在人並非不努力, 甚至是已經太努力了, 但這些努力需集中在規劃的方向上, 而不能白白浪費無用的地方。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;此書分享的內容雖然不算博大精深, 但確實為筆者注入了許多不同的思路, 書中的諸多觀念也仍舊符合這個時代的腳步, 算是近期對筆者在技術方面以外最有幫助的書, 如狄更斯的雙城記所寫「這是最好的時代，也是最壞的時代」, 希望身處在大環境不盡完美的你我, 都能勇於承擔、開創自己期盼的未來。&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title>近況更新</title><description>&lt;blockquote&gt;
  &lt;p&gt;近期因為幫忙開店 (美甲) 的事情, Github 上的 commit 驟減許多, (雖然之前 commit 的內容也都只是在 Blog 的更新以及 Gitbook 的撰寫上), 不過隨著目前店已經慢慢上軌道, 開始會將心力放回自身的學習上。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/CaptainVincent"&gt;CaptainVincent@Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一整個空白的七八月 ^.^|||
&lt;img src="https://c7.staticflickr.com/6/5004/29950628326_5cafc2bd3b_z.jpg" alt="Github"&gt;&lt;/p&gt;

&lt;h4 id=""&gt;美甲店照片&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/JULY-Nail-Studio%E6%9F%92%E6%9C%88%E7%BE%8E%E7%94%B2-1067815983285188/?fref=ts"&gt;JULY Nail Studio.柒月美甲 FB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先進行全室內的重新粉刷
&lt;img src="https://c5.staticflickr.com/6/5082/29692243300_5d09266ce1_z.jpg" alt="Prepare 1"&gt;&lt;/p&gt;

&lt;p&gt;所有傢俱的組裝
&lt;img src="https://c5.staticflickr.com/9/8647/29692177860_e5203fbc83_z.jpg" alt="Prepare 2"&gt;&lt;/p&gt;

&lt;p&gt;散落整個室內的工具 以及 待組裝的傢俱
&lt;img src="https://c3.staticflickr.com/9/8262/29358403434_cf9206024a_z.jpg" alt="Prepare 3"&gt;&lt;/p&gt;

&lt;p&gt;店面外觀 (地址位於中壢市三和二街9之1號1F, 實際上店門口是朝 三和三街42巷)
&lt;img src="https://c1.staticflickr.com/9/8330/29872515592_56a51fd140_z.jpg" alt="Done 1"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://c5.staticflickr.com/9/8283/29952130556_a90bd39957_z.jpg" alt="Done 2"&gt;&lt;/p&gt;

&lt;p&gt;室內以純白色系為主&lt;/p&gt;

&lt;p&gt;&lt;img src="https://c5.staticflickr.com/6/5478/29692371580_d0126f7373_z.jpg" alt="Done 3"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://c5.staticflickr.com/9/8560/29872516572_a168d52705_z.jpg" alt="Done 4"&gt;&lt;/p&gt;

&lt;p&gt;筆者操刀, 定期會更新的黑板畫&lt;/p&gt;

&lt;p&gt;&lt;img src="https://c7.staticflickr.com/9/8103/29692373230_869639dd09_z.jpg" alt="BlackBoard 1"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://c5.staticflickr.com/9/8502/29692375980_7c152903fb_z.jpg" alt="BlackBoard 2"&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;之後 筆者就會開始逐步恢復 Blog 與 GitBook 的更新頻率。&lt;/p&gt;

&lt;p&gt;&lt;img src="https://c8.staticflickr.com/9/8222/29984781735_da71ff19bf.jpg" alt="Under Construction"&gt;&lt;/p&gt;</description><link>http://captainvincent.github.io/jin-kuang-geng-xin/</link><guid isPermaLink="false">a11b6a78-40ab-4ebe-b6c9-98688b6444e4</guid><category>JULY Nail</category><category>柒月美甲</category><dc:creator>Captain Vincent</dc:creator><pubDate>Wed, 28 Sep 2016 13:05:19 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;近期因為幫忙開店 (美甲) 的事情, Github 上的 commit 驟減許多, (雖然之前 commit 的內容也都只是在 Blog 的更新以及 Gitbook 的撰寫上), 不過隨著目前店已經慢慢上軌道, 開始會將心力放回自身的學習上。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/CaptainVincent"&gt;CaptainVincent@Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一整個空白的七八月 ^.^|||
&lt;img src="https://c7.staticflickr.com/6/5004/29950628326_5cafc2bd3b_z.jpg" alt="Github"&gt;&lt;/p&gt;

&lt;h4 id=""&gt;美甲店照片&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/JULY-Nail-Studio%E6%9F%92%E6%9C%88%E7%BE%8E%E7%94%B2-1067815983285188/?fref=ts"&gt;JULY Nail Studio.柒月美甲 FB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先進行全室內的重新粉刷
&lt;img src="https://c5.staticflickr.com/6/5082/29692243300_5d09266ce1_z.jpg" alt="Prepare 1"&gt;&lt;/p&gt;

&lt;p&gt;所有傢俱的組裝
&lt;img src="https://c5.staticflickr.com/9/8647/29692177860_e5203fbc83_z.jpg" alt="Prepare 2"&gt;&lt;/p&gt;

&lt;p&gt;散落整個室內的工具 以及 待組裝的傢俱
&lt;img src="https://c3.staticflickr.com/9/8262/29358403434_cf9206024a_z.jpg" alt="Prepare 3"&gt;&lt;/p&gt;

&lt;p&gt;店面外觀 (地址位於中壢市三和二街9之1號1F, 實際上店門口是朝 三和三街42巷)
&lt;img src="https://c1.staticflickr.com/9/8330/29872515592_56a51fd140_z.jpg" alt="Done 1"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://c5.staticflickr.com/9/8283/29952130556_a90bd39957_z.jpg" alt="Done 2"&gt;&lt;/p&gt;

&lt;p&gt;室內以純白色系為主&lt;/p&gt;

&lt;p&gt;&lt;img src="https://c5.staticflickr.com/6/5478/29692371580_d0126f7373_z.jpg" alt="Done 3"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://c5.staticflickr.com/9/8560/29872516572_a168d52705_z.jpg" alt="Done 4"&gt;&lt;/p&gt;

&lt;p&gt;筆者操刀, 定期會更新的黑板畫&lt;/p&gt;

&lt;p&gt;&lt;img src="https://c7.staticflickr.com/9/8103/29692373230_869639dd09_z.jpg" alt="BlackBoard 1"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://c5.staticflickr.com/9/8502/29692375980_7c152903fb_z.jpg" alt="BlackBoard 2"&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;之後 筆者就會開始逐步恢復 Blog 與 GitBook 的更新頻率。&lt;/p&gt;

&lt;p&gt;&lt;img src="https://c8.staticflickr.com/9/8222/29984781735_da71ff19bf.jpg" alt="Under Construction"&gt;&lt;/p&gt;</content:encoded></item><item><title>米腸包香腸 (中和美食)</title><description>&lt;blockquote&gt;
  &lt;p&gt;最近一家吃了 &lt;strong&gt;十五年以上&lt;/strong&gt; 的米腸包香腸攤位臨時搬家, 老闆還來不及跟所有老顧客做通知, 這裡就熱心幫忙店家做一些推薦並分享。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="https://c8.staticflickr.com/9/8141/29856438151_f1cc3dbb3d.jpg" alt="MixPic"&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/%E4%B8%AD%E5%BC%8F%E5%A4%A7%E4%BA%A8%E5%A0%A1-%E5%8E%9F%E5%BB%BA%E4%B8%80%E8%88%87%E5%BB%BA%E5%85%AD%E8%B7%AF%E6%94%A4%E4%BD%8D-1477394529197634/"&gt;粉絲團專頁&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=""&gt;新地址&lt;/h4&gt;

&lt;p&gt;地圖也可以從粉絲團上的公告看到, 目前已經搬移到了&lt;strong&gt;中和建八路與錦和路的交會路口&lt;/strong&gt;。
&lt;img src="https://c7.staticflickr.com/9/8703/29823856982_47237ae4f7.jpg" alt="NewMap"&gt;&lt;/p&gt;

&lt;h4 id=""&gt;舊地址名片 (已搬家)&lt;/h4&gt;

&lt;p&gt;訂購專線仍適用, 但 &lt;strong&gt;地址已更新如上&lt;/strong&gt;、營業時間有做調整, 目前新地方試營運從 &lt;strong&gt;中午開始營業到晚上八點&lt;/strong&gt;。
&lt;img src="https://c2.staticflickr.com/9/8274/29311622193_c8dea44c73.jpg" alt="BusinessCard"&gt;&lt;/p&gt;

&lt;h4 id=""&gt;用料實在乾淨也衛生&lt;/h4&gt;

&lt;p&gt;獨特的醬料配方一起搭配刺激你的味蕾, 滿足所有人的口味。
&lt;img src="https://c3.staticflickr.com/9/8444/29905209146_7de5fcca86_z.jpg" alt="Sauces"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://c4.staticflickr.com/9/8490/29939767555_1b4ecf5033_z.jpg" alt="Sample"&gt;&lt;/p&gt;

&lt;h4 id=""&gt;貼心的好滋味&lt;/h4&gt;

&lt;p&gt;在專注製作美食之餘, 老闆也會細心的替香腸以及米腸劃刀, 讓小嘴巴的我也能輕鬆入口, 更對於第一次上門的顧客, 店家會貼心說明如何手持他們獨門包裝方式的美食, 讓客人可以不會因為配料豐富而吃得滿手或是紙袋內落的都是。
&lt;img src="https://c7.staticflickr.com/9/8050/29312587494_a83c23bba3_z.jpg" alt="Sample2"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://c1.staticflickr.com/9/8054/29312597184_7a4a449194_z.jpg" alt="Sample3"&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;喜愛吃米腸包香腸的朋友, 有機會經過中和一定不要忘記去給老闆與老闆娘捧場一下, 這真的是要在地才知道的好滋味。&lt;/p&gt;
&lt;/blockquote&gt;</description><link>http://captainvincent.github.io/zhong-he-mei-shi-mi-chang-bao-xiang-chang/</link><guid isPermaLink="false">87c86e87-4d13-4b9d-95be-2642a4487dd0</guid><category>米腸包香腸</category><category>大腸包小腸</category><category>中和</category><category>美食</category><dc:creator>Captain Vincent</dc:creator><pubDate>Mon, 26 Sep 2016 09:04:11 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;最近一家吃了 &lt;strong&gt;十五年以上&lt;/strong&gt; 的米腸包香腸攤位臨時搬家, 老闆還來不及跟所有老顧客做通知, 這裡就熱心幫忙店家做一些推薦並分享。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="https://c8.staticflickr.com/9/8141/29856438151_f1cc3dbb3d.jpg" alt="MixPic"&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/%E4%B8%AD%E5%BC%8F%E5%A4%A7%E4%BA%A8%E5%A0%A1-%E5%8E%9F%E5%BB%BA%E4%B8%80%E8%88%87%E5%BB%BA%E5%85%AD%E8%B7%AF%E6%94%A4%E4%BD%8D-1477394529197634/"&gt;粉絲團專頁&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=""&gt;新地址&lt;/h4&gt;

&lt;p&gt;地圖也可以從粉絲團上的公告看到, 目前已經搬移到了&lt;strong&gt;中和建八路與錦和路的交會路口&lt;/strong&gt;。
&lt;img src="https://c7.staticflickr.com/9/8703/29823856982_47237ae4f7.jpg" alt="NewMap"&gt;&lt;/p&gt;

&lt;h4 id=""&gt;舊地址名片 (已搬家)&lt;/h4&gt;

&lt;p&gt;訂購專線仍適用, 但 &lt;strong&gt;地址已更新如上&lt;/strong&gt;、營業時間有做調整, 目前新地方試營運從 &lt;strong&gt;中午開始營業到晚上八點&lt;/strong&gt;。
&lt;img src="https://c2.staticflickr.com/9/8274/29311622193_c8dea44c73.jpg" alt="BusinessCard"&gt;&lt;/p&gt;

&lt;h4 id=""&gt;用料實在乾淨也衛生&lt;/h4&gt;

&lt;p&gt;獨特的醬料配方一起搭配刺激你的味蕾, 滿足所有人的口味。
&lt;img src="https://c3.staticflickr.com/9/8444/29905209146_7de5fcca86_z.jpg" alt="Sauces"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://c4.staticflickr.com/9/8490/29939767555_1b4ecf5033_z.jpg" alt="Sample"&gt;&lt;/p&gt;

&lt;h4 id=""&gt;貼心的好滋味&lt;/h4&gt;

&lt;p&gt;在專注製作美食之餘, 老闆也會細心的替香腸以及米腸劃刀, 讓小嘴巴的我也能輕鬆入口, 更對於第一次上門的顧客, 店家會貼心說明如何手持他們獨門包裝方式的美食, 讓客人可以不會因為配料豐富而吃得滿手或是紙袋內落的都是。
&lt;img src="https://c7.staticflickr.com/9/8050/29312587494_a83c23bba3_z.jpg" alt="Sample2"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://c1.staticflickr.com/9/8054/29312597184_7a4a449194_z.jpg" alt="Sample3"&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;喜愛吃米腸包香腸的朋友, 有機會經過中和一定不要忘記去給老闆與老闆娘捧場一下, 這真的是要在地才知道的好滋味。&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title>Ghost 0.9.0 Upgrade</title><description>&lt;p&gt;&lt;img src="https://c4.staticflickr.com/9/8400/28643234163_717f156e19.jpg" alt="更新通知"&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;最近打開 Ghost 一直提醒我更新, 所以這篇文章就在一邊更新的過程中催生出來, 祝我好運吧！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="http://support.ghost.org/how-to-upgrade/"&gt;How to upgrade&lt;/a&gt; (英文官方連結)&lt;/p&gt;

&lt;h3 id="preparation"&gt;Preparation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;h5 id="exportimporthttpsupportghostorgimportandexportmyghostblogsettingsanddata"&gt;備份 &lt;a href="http://support.ghost.org/import-and-export-my-ghost-blog-settings-and-data/"&gt;Export &amp;amp; Import&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;將資料先以 JSON 格式匯出, 以免悲劇性的錯誤發生 (但順利升級的話是不用特別再匯入的)。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id="ghost"&gt;確認能夠停止、重新啟動 Ghost&lt;/h5&gt;

&lt;p&gt;這部分可以參考 &lt;a href="http://docs.ghost.org/zh_TW/installation/deploy/"&gt;官方中文安裝文件&lt;/a&gt;, 其中列舉安裝方式是最終目標都是將 Ghost 部署到線上的機器, 所以會有幾種登出 SSH 仍不要停掉 Ghost 的做法, 這時候就會牽涉本章節標題的步驟 (確認能夠停止、重新啟動 Ghost), 但如果有閱讀過筆者 &lt;a href="http://captainvincent.github.io/how-to-setup-ghost-blog-platform-xia/"&gt;How to setup Ghost blog platform (下)&lt;/a&gt; , 會知道筆者平時是透過 &lt;code&gt;npm start&lt;/code&gt; run 在本地端, 等文章完成後,&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>http://captainvincent.github.io/ghost-0-9-0-upgrade/</link><guid isPermaLink="false">0ed885c0-14b7-4524-94d1-9ddf7a68930d</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Sat, 27 Aug 2016 12:10:11 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src="https://c4.staticflickr.com/9/8400/28643234163_717f156e19.jpg" alt="更新通知"&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;最近打開 Ghost 一直提醒我更新, 所以這篇文章就在一邊更新的過程中催生出來, 祝我好運吧！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="http://support.ghost.org/how-to-upgrade/"&gt;How to upgrade&lt;/a&gt; (英文官方連結)&lt;/p&gt;

&lt;h3 id="preparation"&gt;Preparation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;h5 id="exportimporthttpsupportghostorgimportandexportmyghostblogsettingsanddata"&gt;備份 &lt;a href="http://support.ghost.org/import-and-export-my-ghost-blog-settings-and-data/"&gt;Export &amp;amp; Import&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;將資料先以 JSON 格式匯出, 以免悲劇性的錯誤發生 (但順利升級的話是不用特別再匯入的)。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id="ghost"&gt;確認能夠停止、重新啟動 Ghost&lt;/h5&gt;

&lt;p&gt;這部分可以參考 &lt;a href="http://docs.ghost.org/zh_TW/installation/deploy/"&gt;官方中文安裝文件&lt;/a&gt;, 其中列舉安裝方式是最終目標都是將 Ghost 部署到線上的機器, 所以會有幾種登出 SSH 仍不要停掉 Ghost 的做法, 這時候就會牽涉本章節標題的步驟 (確認能夠停止、重新啟動 Ghost), 但如果有閱讀過筆者 &lt;a href="http://captainvincent.github.io/how-to-setup-ghost-blog-platform-xia/"&gt;How to setup Ghost blog platform (下)&lt;/a&gt; , 會知道筆者平時是透過 &lt;code&gt;npm start&lt;/code&gt; run 在本地端, 等文章完成後, 再透過 buster 的腳本將部落格轉成靜態網頁發佈至 &lt;a href="http://captainvincent.github.io/"&gt;github.io&lt;/a&gt;, 所以關於這種做法要停止、重新開始則僅需要停掉 &lt;code&gt;npm start&lt;/code&gt; 這個 process, 等更新完之後再重新啟動即可。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id=""&gt;版本進版的挑選&lt;/h5&gt;

&lt;p&gt;遵循 &lt;a href="http://semver.org/lang/zh-TW/"&gt;Semantic Versioning&lt;/a&gt; 的版本規範 Version : Major.Minor.Patch, 所以官網關於在進版上有一些建議 &lt;a href="http://support.ghost.org/how-to-upgrade/#3.-consider-the-version-jump"&gt;參考連結&lt;/a&gt;, 避免使用到帶有 Upgrade Bug 的版本。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="upgrading"&gt;Upgrading&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;h5 id="ghost"&gt;停止 Ghost 運行&lt;/h5&gt;

&lt;p&gt;先根據目前帶起 Ghost 的執行方式, 使其停止運行。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id=""&gt;下載欲更新版本&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://ghost.org/developers/"&gt;Ghost.org download page,&lt;/a&gt; or &lt;a href="https://github.com/TryGhost/Ghost/releases"&gt;GitHub release page&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id=""&gt;解壓縮下載包&lt;/h5&gt;

&lt;p&gt;嗯, 就是解壓縮 you know ~&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id=""&gt;刪除原始安裝路徑下的部分資料夾、檔案, 並進行替換&lt;/h5&gt;

&lt;p&gt;不要刪掉 &lt;code&gt;content&lt;/code&gt; 資料夾! 不要刪掉 &lt;code&gt;content&lt;/code&gt; 資料夾! 不要刪掉 &lt;code&gt;content&lt;/code&gt; 資料夾! 很重要所以說三遍, 這邊列出我有替換的部分：
&lt;code&gt;core folder&lt;/code&gt;、&lt;code&gt;index.js&lt;/code&gt;、&lt;code&gt;npm-shrinkwrap.json&lt;/code&gt;、&lt;code&gt;npm-shrinkwrap.json&lt;/code&gt;、&lt;code&gt;PRIVACY.md&lt;/code&gt;、&lt;code&gt;README.md&lt;/code&gt;, 以及最麻煩的 &lt;code&gt;content/themes/casper&lt;/code&gt; (要手動 merge 修改過的部分到新的版本, 筆者因為自身有引用一些語法高光、數學公式的 javascript 以及 修改過 Theme 的字體大小, 若皆無則可直接使用新版本覆蓋)。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id=""&gt;確認檔案的權限&lt;/h5&gt;

&lt;p&gt;這邊因為 Ghost 可能部署在雲端由多人共筆, 所以要確認使用者皆有讀寫的權限。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id="ghost"&gt;更新 Ghost 的相依套件&lt;/h5&gt;

&lt;p&gt;在 Ghost 安裝目錄可以見到 &lt;code&gt;content&lt;/code&gt; 與 &lt;code&gt;core&lt;/code&gt;, 在此路徑下執行 &lt;code&gt;npm install --production&lt;/code&gt; (應無任何錯誤產生, 但警告可以容許)。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id="ghost"&gt;重啟 Ghost&lt;/h5&gt;

&lt;p&gt;先根據自身帶起 Ghost 的執行方式, 使其重新運行。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id="troubleshooting"&gt;Troubleshooting&lt;/h5&gt;

&lt;p&gt;&lt;a href="http://support.ghost.org/how-to-upgrade/#troubleshooting"&gt;官網參考資料&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;可喜可賀, 筆者總算升級完成, 但似乎覺得好像更新後也沒什麼不同。世界依舊美好 :)&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title>2016 COSCUP Day - 2</title><description>&lt;p&gt;&lt;img src="https://c7.staticflickr.com/9/8118/28868620030_52dd7da609.jpg" alt="COSCUP Day2"&gt;&lt;/p&gt;

&lt;p&gt;前一天太晚睡, 第一個共同議程遲到錯過了 QQ。&lt;/p&gt;

&lt;h3 id="servotheparallelbrowserengine"&gt;Servo, the Parallel Browser Engine&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://shinglyu.github.io/my_presentations/2016-coscup-servo-intro.pdf"&gt;講者投影片&lt;/a&gt;、&lt;a href="https://servo.org/bhtml-newtab/newtab.html"&gt;Demo 測試網頁&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;因應硬體平行化的架構, 將 browser 本身可拆分的工作 (ex. tree 中去計算 layout 的部分) 去進行平行化的 engine 設計, 但 javascript engine 仍直接沿用 SpiderMonkey。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;加速&lt;/li&gt;
&lt;li&gt;平均使用 CPU 可以降低耗電&lt;/li&gt;
&lt;li&gt;將繪圖部分整理利用 GPU 加速&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用 Github 的 workflow 讓貢獻者意願增加, 並會對 Servo 做跨瀏覽器相容的測試。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rust (Servo 使用的語言) 透過 compiler time 協助安全性的處理,&lt;/p&gt;&lt;/blockquote&gt;</description><link>http://captainvincent.github.io/2016-coscup-day-2/</link><guid isPermaLink="false">e0a4cf4a-e826-48d3-aad2-e48f2ce92e66</guid><category>COSCUP</category><dc:creator>Captain Vincent</dc:creator><pubDate>Sun, 21 Aug 2016 02:49:44 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src="https://c7.staticflickr.com/9/8118/28868620030_52dd7da609.jpg" alt="COSCUP Day2"&gt;&lt;/p&gt;

&lt;p&gt;前一天太晚睡, 第一個共同議程遲到錯過了 QQ。&lt;/p&gt;

&lt;h3 id="servotheparallelbrowserengine"&gt;Servo, the Parallel Browser Engine&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://shinglyu.github.io/my_presentations/2016-coscup-servo-intro.pdf"&gt;講者投影片&lt;/a&gt;、&lt;a href="https://servo.org/bhtml-newtab/newtab.html"&gt;Demo 測試網頁&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;因應硬體平行化的架構, 將 browser 本身可拆分的工作 (ex. tree 中去計算 layout 的部分) 去進行平行化的 engine 設計, 但 javascript engine 仍直接沿用 SpiderMonkey。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;加速&lt;/li&gt;
&lt;li&gt;平均使用 CPU 可以降低耗電&lt;/li&gt;
&lt;li&gt;將繪圖部分整理利用 GPU 加速&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用 Github 的 workflow 讓貢獻者意願增加, 並會對 Servo 做跨瀏覽器相容的測試。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rust (Servo 使用的語言) 透過 compiler time 協助安全性的處理, crates.io 相當於 Rust 的 npm, 目前 Servo 算是 Rust 的大用戶。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="weex"&gt;Weex 輕量級跨平台動態解決方案&lt;/h3&gt;

&lt;p&gt;因應 2015 雙11 活動設計&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Native 體驗&lt;/li&gt;
&lt;li&gt;Web 般靈活的修改呈現&lt;/li&gt;
&lt;li&gt;依據使用者消費習慣推薦內容&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;方案&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON -&gt; NativeView 方案 (建立 Native template, 難以維護、Bug 修正更新不及時)&lt;/li&gt;
&lt;li&gt;React Native (效能上 Weex 表現較佳, 基於 React Native 的設計是以 APP 為單位)&lt;/li&gt;
&lt;li&gt;Vue.js + Web conponent =&gt; Weex (可使用在 單一頁面、嵌入 Native、嵌入 Web、整個 App 的建立 ... etc 的應用場景)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目標&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;變化性高&lt;/li&gt;
&lt;li&gt;性能要求&lt;/li&gt;
&lt;li&gt;一次開發三端同步 (Web、iOS、Android)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;靈感來源&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Component&lt;/li&gt;
&lt;li&gt;Vuejs&lt;/li&gt;
&lt;li&gt;Polymer&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;類似 React Native 要解決的問題, 但應用場景加入更多的變化的框架, 提供給開發者多一些的選擇。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="ahighscalemlplatformusingsparkandkafka"&gt;A High Scale ML Platform Using SPARK and KAFKA&lt;/h3&gt;

&lt;p&gt;Batch vs Streaming&lt;/p&gt;

&lt;h5 id="batch"&gt;Batch&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Batch 大量一波一波收到的資料, 可容忍不即時&lt;/li&gt;
&lt;li&gt;使用 Spark, 因為是 in-memory 的計算, 並且對 Machine Learning 以及 SQL 的整合都很 friendly&lt;/li&gt;
&lt;li&gt;演算法
&lt;ul&gt;&lt;li&gt;Alternating Least Square&lt;/li&gt;
&lt;li&gt;Logistic Regression (分類演算法)&lt;/li&gt;
&lt;li&gt;GDBT (Ranking 演算法)&lt;/li&gt;
&lt;li&gt;Clustering (依據使用者的行為分類)&lt;/li&gt;
&lt;li&gt;Top-k rank&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Text Mining
&lt;ul&gt;&lt;li&gt;Naive Bayes&lt;/li&gt;
&lt;li&gt;Latent dirichlet allocation &lt;/li&gt;
&lt;li&gt;Word2vec&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id="streamingexaccesslog"&gt;Streaming (ex. access log)&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Streaming 持續收到的資料, 需較即時地處理&lt;/li&gt;
&lt;li&gt;應用在根據使用者行為的 live prediction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;囧&gt; 可能是對 (SPARK、KAFKA) 這兩個 term 太陌生了, 所以聽著聽著就睡著了。&lt;/p&gt;

&lt;h3 id="nas"&gt;NAS 也可以揀土豆&lt;/h3&gt;

&lt;p&gt;介紹機器學習的一些方法以及他們一些訓練的實驗 (看了一下共筆    , 結果想抄筆記還沒得抄)。&lt;/p&gt;

&lt;h3 id=""&gt;開放公司文化之下的軟體開發 / 如何用開源軟體賺錢？&lt;/h3&gt;

&lt;p&gt;全體共同議程, 雖有諸多廣告的內容, 但整體上不至於討厭。&lt;/p&gt;

&lt;p&gt;對於「開源」各方的直覺態度&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;小企業 - 免費的！功能不強沒關係&lt;/li&gt;
&lt;li&gt;大企業 - 我們賣硬體，加一點軟體是不是可以多賣一點錢&lt;/li&gt;
&lt;li&gt;員工 - 老闆要一個功能，我不會寫，找看看有沒有人寫過&lt;/li&gt;
&lt;li&gt;政府 - 我們來辦比賽！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;結論, 我們該如何使用開源軟體？ (需求主導)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;觀察客戶要甚麼&lt;/li&gt;
&lt;li&gt;加上重要功能，甚至比原來的軟體強大&lt;/li&gt;
&lt;li&gt;願意自己重寫&lt;/li&gt;
&lt;li&gt;甚至徹底改變商業模式&lt;/li&gt;
&lt;li&gt;建置世界級的大系統&lt;/li&gt;
&lt;li&gt;注重使用者體驗&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="lightningtalk"&gt;Lightning Talk&lt;/h3&gt;

&lt;p&gt;個人覺得的亮點&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;用 Git 的 branch 來畫台北捷運圖 (雖有點浪費才能, 但挺有趣的)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/"&gt;HackMD&lt;/a&gt; 的應用, 使用 markdown 來撰寫部落格後, 覺得他們整合大部分我所使用到的功能, 會找時間體驗一下他們的服務&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;del&gt;捕夢網請的模特兒不錯&lt;/del&gt;, 兩天的議程終於結束了, 參加完之後總是會讓體內燃著熱血, 要繼續 GoGo 邁向神乎其技的境界。 &lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title>2016 COSCUP Day - 1</title><description>&lt;blockquote&gt;
  &lt;p&gt;本篇是筆者今年參加 COSCUP 不負責任、不引戰的個人摘要筆記與心得文。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="https://c8.staticflickr.com/9/8293/29037136191_aa48f5b26e.jpg" alt="Day 1"&gt;&lt;/p&gt;

&lt;h3 id="llvm"&gt;LLVM框架由淺入淺&lt;/h3&gt;

&lt;p&gt;全體共同議程, 介紹一些由高階語言轉成 machine code 的幾個環節如何拆分, 引入介紹透過 LLVM 的框架標準化這幾個環節, 讓對編譯器有興趣的使用者可以自行串接 LLVM IR 做各種調配。&lt;/p&gt;

&lt;h3 id="mculightweightjavascriptengine"&gt;MCU 與 lightweight javascript engine 的邂逅&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sssslide.com/speakerdeck.com/iamblue/mcu-yu-lightweight-javascript-engine-de-xie-hou"&gt;講者之前相同題目的 Slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=n3NY_2RPAl0"&gt;講者之前相同題目的影片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;介紹在 MCU 終端的嵌入式硬體上執行 JS (相較於 MPU 的 device 會帶起較完整的系統並具備較高規格的硬體, MCU 的硬體規格限制更多), 最早期的啟發來自於基於 Tiny.js 開發的 Espruino, 原理是邊 parse 編解析 (但不構成 AST), 陸陸續續也出現一些針對物聯網嚴苛 device 條件所產生的&lt;/p&gt;</description><link>http://captainvincent.github.io/2016-coscup-day-1/</link><guid isPermaLink="false">a09358a9-97d5-48e3-b5de-26bc396ce87a</guid><category>COSCUP</category><dc:creator>Captain Vincent</dc:creator><pubDate>Fri, 19 Aug 2016 23:27:03 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;本篇是筆者今年參加 COSCUP 不負責任、不引戰的個人摘要筆記與心得文。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="https://c8.staticflickr.com/9/8293/29037136191_aa48f5b26e.jpg" alt="Day 1"&gt;&lt;/p&gt;

&lt;h3 id="llvm"&gt;LLVM框架由淺入淺&lt;/h3&gt;

&lt;p&gt;全體共同議程, 介紹一些由高階語言轉成 machine code 的幾個環節如何拆分, 引入介紹透過 LLVM 的框架標準化這幾個環節, 讓對編譯器有興趣的使用者可以自行串接 LLVM IR 做各種調配。&lt;/p&gt;

&lt;h3 id="mculightweightjavascriptengine"&gt;MCU 與 lightweight javascript engine 的邂逅&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sssslide.com/speakerdeck.com/iamblue/mcu-yu-lightweight-javascript-engine-de-xie-hou"&gt;講者之前相同題目的 Slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=n3NY_2RPAl0"&gt;講者之前相同題目的影片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;介紹在 MCU 終端的嵌入式硬體上執行 JS (相較於 MPU 的 device 會帶起較完整的系統並具備較高規格的硬體, MCU 的硬體規格限制更多), 最早期的啟發來自於基於 Tiny.js 開發的 Espruino, 原理是邊 parse 編解析 (但不構成 AST), 陸陸續續也出現一些針對物聯網嚴苛 device 條件所產生的 engine 設計, 最後講者是透過去封裝一層名為 Microlattice.JS 的 interface 去使用 jerryscript (lightweight JS engine), 建構在freeRTOS 上。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;因為設備問題, 所以 talk 只進行到一半, 剩下部分需參考講者之前演講資訊。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="freebirdjs"&gt;物聯網不滿足 - 自由管理物聯網裝置和溝通的 freebird.js&lt;/h3&gt;

&lt;p&gt;從物聯網的一些基礎介紹起, 帶起要解決的問題, 主要是破碎的溝通方式 (同質、異質網路的相容性), 雖有 IFTTT 的解決方案(?), 但可能會導致 device 之間溝通的 latency 過長, 再來是想建立有系統的方式解決溝通問題 (因為從上層到底層都有問題要解決), 而開源計畫的 freebird.js 就是要解決 相容 以及 快速開發 IoT 應用的法門之一。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;精神就是幫開發者做掉一些 dirty job, 讓開發者可以更容易地進入物聯網的, 但目前 protocol、晶片 driver 推陳出新, 仍須仰賴推廣讓開發者共同參與。 (另外 freebird.js 尚未 release 約 10~11 月)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="log"&gt;萬事萬物皆是 Log&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://medium.com/@poga/%E8%90%AC%E4%BA%8B%E8%90%AC%E7%89%A9%E7%9A%86%E6%98%AF-log-%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B%E4%B9%9F%E4%BE%86%E9%BB%9E%E7%A7%91%E6%99%AE-caf3029359f8#.y9qlju1iz"&gt;作者提供的逐字稿&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Determinism 相同的過程 = 相同的結果 (讓系統可以如此般趨於穩定的境界), 所以在設計系統架構時試著先用 log 去表示。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;讓會眾可以安心抓神奇寶貝的講者 (?)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="opensourcedevops"&gt;Open Source 的 DevOps 工具箱&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://onedrive.live.com/view.aspx?resid=449602EB8FBEC303!2399&amp;amp;ithint=file%2cpptx&amp;amp;app=PowerPoint&amp;amp;authkey=!ANC0p7Yoi51Wu9E"&gt;講者投影片&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;精神在於建立一種文化, 介紹常見的軟體工程在開發時應有的配置 (列舉可用的 open source 工具, 詳細參閱投影片)。&lt;/p&gt;

&lt;h3 id=""&gt;寫出高性能的服務與應用。那些你沒想過的事！&lt;/h3&gt;

&lt;p&gt;全體共同議程, 比較偏向大學的 計算機組織 與 作業系統該有知識 (?), 算是溫故為主的內容。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;總結&lt;/p&gt;
  
  &lt;p&gt;COSCUP 的伙食不錯, &lt;del&gt;中研院 電擊獸 很多&lt;/del&gt;, 跟其他主題更明確的聚會相比, 感覺準備的內容有比較多一點的學生感, 但引用朋友的見解, 來參加聚會聽 talk 只是配菜, 重點在於 要多認識人 或是 上台當講者, 筆者只能默默期許自己。&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title>Movie - The Weather Man (2005)</title><description>&lt;h2 id=""&gt;成年人的電影, 寓意深遠的對白&lt;/h2&gt;

&lt;p&gt;Michael Caine 還真是適合扮演智慧的長者, 如同黑暗騎士 (Dark Knight) 中管家阿福 (Alfred) 的設定, 在榮格心理學裡智慧老人的化身。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Robert Spritzel&lt;/strong&gt;: David, sacrifice is... to get anything of value, you have to sacrifice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dave Spritz&lt;/strong&gt;: I know that dad, but I think that if we continue down this road, it's gonna be too detrimental for the kids.&lt;/p&gt;</description><link>http://captainvincent.github.io/the-weather-man-2005/</link><guid isPermaLink="false">4a31bf6f-0539-4382-9b4e-68d0fda78a20</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Tue, 05 Jul 2016 10:44:03 GMT</pubDate><content:encoded>&lt;h2 id=""&gt;成年人的電影, 寓意深遠的對白&lt;/h2&gt;

&lt;p&gt;Michael Caine 還真是適合扮演智慧的長者, 如同黑暗騎士 (Dark Knight) 中管家阿福 (Alfred) 的設定, 在榮格心理學裡智慧老人的化身。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Robert Spritzel&lt;/strong&gt;: David, sacrifice is... to get anything of value, you have to sacrifice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dave Spritz&lt;/strong&gt;: I know that dad, but I think that if we continue down this road, it's gonna be too detrimental for the kids. It's just too hard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Robert Spritzel&lt;/strong&gt;: Do you know that the harder thing to do and the right thing to do are usually the same thing? Nothing that has meaning is easy. &lt;strong&gt;"Easy" doesn't enter into grown-up life.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.imdb.com/title/tt0384680/quotes"&gt;Quotes From Here&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Work On TensorFlow</title><description>&lt;blockquote&gt;
  &lt;p&gt;本篇為透過修習 機器學習 課程後進一步的實作練習紀錄。 &lt;a href="http://wiki.jikexueyuan.com/project/tensorflow-zh/"&gt;簡體參考文獻&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.tensorflow.org/"&gt;TensorFlow&lt;/a&gt; 為一套由 Google 所提供的開源機器學習系統, 目前的版本號為 r0.9。&lt;/p&gt;

&lt;h4 id="install"&gt;Install&lt;/h4&gt;

&lt;p&gt;先從 &lt;a href="https://www.tensorflow.org/versions/r0.9/get_started/os_setup.html#pip-installation"&gt;參考列表&lt;/a&gt; 上選擇合適的版本, 這邊除了使用到 GPU 的版本, 其餘在安裝方式雷同。&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0rc0-py2-none-any.whl  
sudo pip install --upgrade $TF_BINARY_URL  
&lt;/code&gt;&lt;/pre&gt;</description><link>http://captainvincent.github.io/work-on-tensorflow/</link><guid isPermaLink="false">44af6ff1-7a3b-4226-a867-c8beb53f76b4</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Thu, 23 Jun 2016 12:20:46 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;本篇為透過修習 機器學習 課程後進一步的實作練習紀錄。 &lt;a href="http://wiki.jikexueyuan.com/project/tensorflow-zh/"&gt;簡體參考文獻&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.tensorflow.org/"&gt;TensorFlow&lt;/a&gt; 為一套由 Google 所提供的開源機器學習系統, 目前的版本號為 r0.9。&lt;/p&gt;

&lt;h4 id="install"&gt;Install&lt;/h4&gt;

&lt;p&gt;先從 &lt;a href="https://www.tensorflow.org/versions/r0.9/get_started/os_setup.html#pip-installation"&gt;參考列表&lt;/a&gt; 上選擇合適的版本, 這邊除了使用到 GPU 的版本, 其餘在安裝方式雷同。&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0rc0-py2-none-any.whl  
sudo pip install --upgrade $TF_BINARY_URL  
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item></channel></rss>
