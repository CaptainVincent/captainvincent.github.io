<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Hello World! I'm Vincent</title><description>Thoughts, stories and ideas.</description><link>http://localhost:2368/</link><generator>Ghost 0.7</generator><lastBuildDate>Wed, 04 May 2016 04:01:23 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>新 操作生涯不是夢 筆記 (未完)</title><description>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;The New Trading for a Living. &lt;strong&gt;Dr. Alexander Elder&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本書為 &lt;strong&gt;操作生涯不是夢&lt;/strong&gt; 與 &lt;strong&gt;走進我的交易室&lt;/strong&gt; 兩本經典著作的作者, 在經過二十年後對前者做出的修訂, 在經典中添加這些年的經驗與教訓。&lt;/p&gt;

&lt;h2 id=""&gt;導論&lt;/h2&gt;

&lt;p&gt;關鍵在於心理層面, 但絕大多數的人屈服於此, 本書 (亦或是此篇文章) 提供知識, 但動機需由讀者自行尋找, 唯有渴望成功的人, 才能走過這滿是荊棘的道路, 這裡先帶出幾個遵循的重點&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;交易為追尋理性的活動, 勿情緒化的隨波逐流&lt;/li&gt;
&lt;li&gt;優秀的交易者會小心照顧資本
&lt;ul&gt;&lt;li&gt;負合遊戲, 扣除手續費、滑價、買/賣價差, 這是場負合的遊戲, 只是中等以上的技巧是不夠的&lt;/li&gt;
&lt;li&gt;一般交易者承擔的滑價為手續費的 3 倍, 避免使用市價單買進 (改用限價單, 但不保證成交), 錯過了某筆交易仍有其他無數的機會, 除了停損單, 一旦市場反應不如預期, 應儘速出場&lt;/li&gt;
&lt;li&gt;尋找低廉手續費率的經紀人、建立進出頻率較少的系統、在平穩的市況進場&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>http://localhost:2368/xin-cao-zuo-sheng-ya-bu-shi-meng-bi-ji/</link><guid isPermaLink="false">af53c9d7-7beb-4cb6-a7f4-655a54cda3a7</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Tue, 03 May 2016 18:03:05 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;The New Trading for a Living. &lt;strong&gt;Dr. Alexander Elder&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本書為 &lt;strong&gt;操作生涯不是夢&lt;/strong&gt; 與 &lt;strong&gt;走進我的交易室&lt;/strong&gt; 兩本經典著作的作者, 在經過二十年後對前者做出的修訂, 在經典中添加這些年的經驗與教訓。&lt;/p&gt;

&lt;h2 id=""&gt;導論&lt;/h2&gt;

&lt;p&gt;關鍵在於心理層面, 但絕大多數的人屈服於此, 本書 (亦或是此篇文章) 提供知識, 但動機需由讀者自行尋找, 唯有渴望成功的人, 才能走過這滿是荊棘的道路, 這裡先帶出幾個遵循的重點&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;交易為追尋理性的活動, 勿情緒化的隨波逐流&lt;/li&gt;
&lt;li&gt;優秀的交易者會小心照顧資本
&lt;ul&gt;&lt;li&gt;負合遊戲, 扣除手續費、滑價、買/賣價差, 這是場負合的遊戲, 只是中等以上的技巧是不夠的&lt;/li&gt;
&lt;li&gt;一般交易者承擔的滑價為手續費的 3 倍, 避免使用市價單買進 (改用限價單, 但不保證成交), 錯過了某筆交易仍有其他無數的機會, 除了停損單, 一旦市場反應不如預期, 應儘速出場&lt;/li&gt;
&lt;li&gt;尋找低廉手續費率的經紀人、建立進出頻率較少的系統、在平穩的市況進場 (避免滑價跟買/賣價差擴大) 以及 採用停損單進場, 盡可能 &lt;strong&gt;降低交易成本&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;題外話&lt;/p&gt;
  
  &lt;p&gt;這本書也解惑了筆者心中一直以來的問題, 作者曾訪問過甘氏的兒子, 得知其父親一生從無能力倚靠交易維生, 在交易市場上的豐功偉業僅是投機分子虛構出的傳奇故事 (慶幸如此, 筆者不用再多看這玄而又玄的 &lt;del&gt;謬論&lt;/del&gt; 理論)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;心理的迷思&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;123&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;杜克大學教授 Dan Ariely 曾敘述一個有趣的實驗, 兩組接受智力測試的其中一組, 先「不小心」的偷看到答案後而作答, 測試結果不言而喻, 接著兩組人被要求進行第二次的測驗, 並預測第二次的成績, 凡是預測準確者都可以獲得獎賞, 神奇的是作弊組在第二次測驗的預測中, 也給出了明顯較高的預測, 顯然他們寧可相信自己比較聰明, 寧可錯失獎賞的機會。&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title>丹尼爾博士 跑步方程式 筆記 (未完)</title><description>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;Daniel's Running Formula. - 3rd Edition by &lt;strong&gt;Jack T. Daniels&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;開始翻閱這本書的理由, 是由於筆者開始意識到了自己該重新鍛鍊身體的歲數了, 過去著重於重量訓練的自己, 在找回自己這方面決定從跑步開始, 先提升自己的心肺功能再開始高強度的訓練, 這就是筆者的初衷。&lt;/p&gt;

&lt;h2 id=""&gt;跑者成功的要素&lt;/h2&gt;

&lt;p&gt;才能、內在動機、機緣 與 訓練方向。&lt;/p&gt;

&lt;p&gt;不可否定的, 才能仍是取決於一個成功跑者的最重要因素 (心肺功能、最大攝氧量 VO2max ...etc), 但天分與動機的強弱各會造就不同特質的跑者, 應獨立視為不同的個體來給予指導。&lt;/p&gt;

&lt;h4 id=""&gt;跑步法則&lt;/h4&gt;

&lt;p&gt;以下法則將歸納為心理與生理的兩個層面, 將這十點融入為平常生活的一部份, 保持兩者的健康, 並專注於當下的目標。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;跑者的優劣勢&lt;/strong&gt; 每位跑者皆有不同的特質, 首先應當強化弱點, 後期再回歸鍛鍊強項&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;正向思考&lt;/strong&gt; 需保持正向的態度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;身體狀況有起有落&lt;/strong&gt; 理解自身的狀況並接納&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;訓練保持彈性&lt;/strong&gt; 能應付訓練時的突發狀況, 也較能維持平常心&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;從小而大的目標&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;獎勵自己&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;睡得好、&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>http://localhost:2368/dan-ni-er-bo-shi-pao-bu-fang-cheng-shi-bi-ji/</link><guid isPermaLink="false">4d93e42e-2cf8-46b4-a3dd-1a4059efc0d8</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Wed, 20 Apr 2016 12:55:27 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;Daniel's Running Formula. - 3rd Edition by &lt;strong&gt;Jack T. Daniels&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;開始翻閱這本書的理由, 是由於筆者開始意識到了自己該重新鍛鍊身體的歲數了, 過去著重於重量訓練的自己, 在找回自己這方面決定從跑步開始, 先提升自己的心肺功能再開始高強度的訓練, 這就是筆者的初衷。&lt;/p&gt;

&lt;h2 id=""&gt;跑者成功的要素&lt;/h2&gt;

&lt;p&gt;才能、內在動機、機緣 與 訓練方向。&lt;/p&gt;

&lt;p&gt;不可否定的, 才能仍是取決於一個成功跑者的最重要因素 (心肺功能、最大攝氧量 VO2max ...etc), 但天分與動機的強弱各會造就不同特質的跑者, 應獨立視為不同的個體來給予指導。&lt;/p&gt;

&lt;h4 id=""&gt;跑步法則&lt;/h4&gt;

&lt;p&gt;以下法則將歸納為心理與生理的兩個層面, 將這十點融入為平常生活的一部份, 保持兩者的健康, 並專注於當下的目標。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;跑者的優劣勢&lt;/strong&gt; 每位跑者皆有不同的特質, 首先應當強化弱點, 後期再回歸鍛鍊強項&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;正向思考&lt;/strong&gt; 需保持正向的態度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;身體狀況有起有落&lt;/strong&gt; 理解自身的狀況並接納&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;訓練保持彈性&lt;/strong&gt; 能應付訓練時的突發狀況, 也較能維持平常心&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;從小而大的目標&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;獎勵自己&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;睡得好、吃得好&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生病、受傷時不訓練&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;長期健康的困擾應求助專業團隊&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;好成績不應倚靠僥倖&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=""&gt;跑步原則 (八項) 與技術&lt;/h2&gt;

&lt;p&gt;訓練需要的是原則而非某位優秀跑者的菜單, 適合自己的比照表操課更重要, 在開始介紹原則前, 先解釋身體 &lt;strong&gt;自主調解&lt;/strong&gt; 的能力, 意謂在相同的壓力在訓練中會慢慢得到適應, 而不同類型的訓練達到適應的時間所需也不同, 了解訓練的原則才能合理的去調配 &lt;strong&gt;量、強度 與 頻率&lt;/strong&gt;, 在達到目標的同時也保護身體。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;身體對訓練壓力的反應&lt;/strong&gt; 要了解評估身體對於每項訓練產生的影響 (可以參考丹尼爾博士製作的壓力量表, 內容包含追蹤兩週內的每日 睡面狀態、疼痛與生病狀況、訓練的恢復狀況、身體柔軟度、能量與補充、生理負荷、心理負荷、其他)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;訓練的專一性&lt;/strong&gt; 相同的壓力刺激在身體處於健康的狀態下, 都會為未來面臨的壓力做準備 (變強), 這是為何需要反覆的訓練&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;超負荷&lt;/strong&gt; 身體的變化是在恢復休息中 (兩次訓練間) 產生, 而訓練的目的是在於仍否能否持續適應新的訓練與強度, 在壓力與正向回饋間未取得平衡, 會導致身體無法跟上下一階段的訓練&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;訓練後的回饋&lt;/strong&gt; 調整 量、強度、休息、頻率 任意一項皆可改變其訓練產生的壓力
&lt;img src="https://farm2.staticflickr.com/1518/25983432104_9f07ea1721_z.jpg" alt="Training"&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;個人的限制&lt;/strong&gt; 訓練終會抵達每個人階段性的巔峰, 而這些限制來至於天生與外在生活環境上的因素, 反映在上圖也是為何壓力訓練 II (圖上只是舉例, 實際狀況因跑者而異) 不一定能如同之前的訓練效果產生回饋&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;進步幅度遞減&lt;/strong&gt; 參考下圖&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;退步風險加速&lt;/strong&gt; 訓練壓力對於進步效果與退步風險的影響, 評估方式仍可參考作者的壓力量表, 盡可能讓訓練壓力保持在藍色區域中
&lt;img src="https://farm2.staticflickr.com/1663/26563070676_0aff55ed66_z.jpg" alt="進步與退步"&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保有訓練成果&lt;/strong&gt; 減量期 (減少訓練時間或趟數, 但並非強度) 的運用, 可以轉移訓練重心至其他項目仍可保持本來的訓練成果&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=""&gt;擬定計畫&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;進行下一階段的訓練時需先在前一階段維持四~六週的訓練&lt;/li&gt;
&lt;li&gt;讓訓練成果來告訴你何時該調整&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;步頻&lt;/strong&gt; 建議每分鐘 180 步, 所有優秀跑者所共通的特點, 在不同比賽的速度掌控在於調整 步距 (步伐寬度), 而步頻的差距變化很小&lt;/li&gt;
&lt;li&gt;姿勢&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title>點線賺錢術 筆記</title><description>&lt;p&gt;原著：點線賺錢術(修正第十二版) 鄭超文 (2012/06)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;以技術分析的書來說, 有著墨到的部分算是相當包山包海, 但筆者認為知識仍應當求精而不在量 (尤其筆者剛閱讀完 &lt;a href="http://localhost:2368/ya-dang-li-lun/"&gt;亞當理論&lt;/a&gt; 後), 建議可以用參考書的角度看待即可, 不要迷失在技術分析的汪洋大海裡了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;基礎線圖介紹&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;K 線圖 與 直線圖 的畫法相距不遠, 主要都是表明當日 (時間架構) 下的最高、最低、開盤、收盤價, 直線圖是以左方的橫線表示開盤, 右方橫線表示收盤。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.mbalib.com/zh-tw/OX%E5%9B%BE"&gt;OX 圖&lt;/a&gt; (Point and Figure Chart), 畫法是先自訂小方格的單位區間, 往上一格標記 X 表示上升到高一個區間的價位, 往下一格標記 O 則表示下跌至低一個區間的價位, 同一區間內的震盪都不重複繪製, 直到 OX 標記轉換時換行開始繪製 (如下圖示)。
&lt;img src="https://farm2.staticflickr.com/1693/25836450674_a612a82f60_c.jpg" alt="Fig1"&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;技術分析的領域中, 型態 &gt; 成交量 &gt; K&lt;/p&gt;</description><link>http://localhost:2368/dian-xian-zhuan-qian-shu-bi-ji/</link><guid isPermaLink="false">aa476ede-793d-4fad-8e6f-83516b8f0e08</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Fri, 15 Apr 2016 09:03:43 GMT</pubDate><content:encoded>&lt;p&gt;原著：點線賺錢術(修正第十二版) 鄭超文 (2012/06)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;以技術分析的書來說, 有著墨到的部分算是相當包山包海, 但筆者認為知識仍應當求精而不在量 (尤其筆者剛閱讀完 &lt;a href="http://localhost:2368/ya-dang-li-lun/"&gt;亞當理論&lt;/a&gt; 後), 建議可以用參考書的角度看待即可, 不要迷失在技術分析的汪洋大海裡了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;基礎線圖介紹&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;K 線圖 與 直線圖 的畫法相距不遠, 主要都是表明當日 (時間架構) 下的最高、最低、開盤、收盤價, 直線圖是以左方的橫線表示開盤, 右方橫線表示收盤。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.mbalib.com/zh-tw/OX%E5%9B%BE"&gt;OX 圖&lt;/a&gt; (Point and Figure Chart), 畫法是先自訂小方格的單位區間, 往上一格標記 X 表示上升到高一個區間的價位, 往下一格標記 O 則表示下跌至低一個區間的價位, 同一區間內的震盪都不重複繪製, 直到 OX 標記轉換時換行開始繪製 (如下圖示)。
&lt;img src="https://farm2.staticflickr.com/1693/25836450674_a612a82f60_c.jpg" alt="Fig1"&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;技術分析的領域中, 型態 &gt; 成交量 &gt; K 線理論 與 各種指標 (作者見解)&lt;/p&gt;

&lt;h2 id="k"&gt;K 線理論&lt;/h2&gt;

&lt;p&gt;收盤價是多空雙方交戰的結果 (亦是共識), 所以由 K 線揣測交戰過程中的影響力衍伸出了許多理論, 這邊整理一些大方向的觀察點 &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;筆者其實對於 K 線理論中出現過多的命名其實頗有反感, 以及時常過分在解讀為什麼線圖會有這樣的反應... etc, 覺得一切都是 想太多。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;單日 K 線&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;收盤價 與 兩側端點 的距離&lt;/li&gt;
&lt;li&gt;收盤價 與 開盤價 (實線本身) 之間的距離 (長紅/黑 的底是支撐 出自 &lt;strong&gt;股技期招&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;開盤價跳空的方向 以及 當日收盤的表現&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;雙日 K 線 (需要分析雙日, 是對前一日明顯的趨勢再確認 ex. 前一日長紅/黑 K)&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;隔日 K 線是否延續前日的&lt;/li&gt;
&lt;li&gt;隔日 K 線的收盤是否入侵前日的 K 線&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多日 K 線的觀察 (省略, 主觀認定的成分居多)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;跳空, 跳空的缺口可視為重要的關卡 (支撐、壓力), 但實際跳空後的趨勢並沒有絕對的方向&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=""&gt;形態學&lt;/h2&gt;

&lt;h4 id=""&gt;趨勢線&lt;/h4&gt;

&lt;p&gt;關於趨勢線的應用也可以參考 &lt;a href="http://localhost:2368/duo-kong-cao-zuo-mi-ji-bi-ji/"&gt;多空操作秘笈筆記&lt;/a&gt;, 基本上任意一段具有趨勢的線圖, 都能使用連接低點與高點畫出支撐與壓力的直線 (低點的連線為支撐, 高點為壓力), 上升的走勢對低點較敏感, 所以稱連接低點的直線 (支撐) 為上升趨勢線, 下降的走勢則稱連接高點的直線 (壓力) 為下降趨勢線, 通常支撐與壓力的 &lt;strong&gt;突破&lt;/strong&gt; 看作新趨勢的產生, 而假突破的判定有 &lt;strong&gt;3% 幅度&lt;/strong&gt; 的說法, 這邊也可選用突破時的 &lt;strong&gt;成交量&lt;/strong&gt; 搭配判定 (否則出現 3% 的突破再跟進的意願會降低), 另外一點是當支撐或壓力線貫穿後, 會成為反方向走勢的阻力 （支撐=&gt;壓力, 壓力=&gt;支撐)。&lt;/p&gt;

&lt;p&gt;複習觀念 &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;突破判定  &lt;/li&gt;
&lt;li&gt;壓力支撐互換  &lt;/li&gt;
&lt;li&gt;趨勢愈水平的突破意義愈大&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=""&gt;重要型態&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;頭肩頂/底 (頸線, 目標反轉突破)&lt;/li&gt;
&lt;li&gt;雙重頂/底 (頸線, 目標反轉突破)&lt;/li&gt;
&lt;li&gt;箱型走勢 (上有壓力下有支撐的盤整, 目標水平突破)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=""&gt;次要型態&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;圓弧形走勢 (類似箱型走勢, 只是在水平走勢中帶有凹口)&lt;/li&gt;
&lt;li&gt;三角形 (壓力與支撐線交會, 貫穿後可用軌道水平線來預測目標價)
&lt;ul&gt;&lt;li&gt;三角旗形 (等腰三角形, 上下方的直線傾斜角度相當)&lt;/li&gt;
&lt;li&gt;上升三角形 (壓力線持平, 支撐攀高)&lt;/li&gt;
&lt;li&gt;下降三角形 (支撐線持平, 壓力走低)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=""&gt;補充資料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;OX 圖, 第一部分已介紹&lt;/li&gt;
&lt;li&gt;日本 RENKO 圖 (使用短週期 MA 取代 開盤價, 書中說勝率不高)&lt;/li&gt;
&lt;li&gt;寶塔線圖 (看不懂 囧&gt;)&lt;/li&gt;
&lt;li&gt;甘氏理論 (似乎很不科學 囧&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=""&gt;成交量&lt;/h2&gt;

&lt;p&gt;趨勢的產生, 如果沒有伴隨成交量的證明可能為假, 參考 &lt;a href="http://localhost:2368/duo-kong-cao-zuo-mi-ji-bi-ji/"&gt;多空操作秘笈筆記&lt;/a&gt; 所述, 向上的突破需要伴隨爆量的成交量, 而向下的突破會因股票自身的重量而下墜, 所以不用成交量來證明, 另外此書提到的其他觀念&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;價格與成交量的同時上漲, 為正向關係 (趨勢向上時價漲量增, 價跌量縮)&lt;/li&gt;
&lt;li&gt;背離
&lt;ul&gt;&lt;li&gt;價格再創新高, 但量卻沒有前一波段高, 有可能反轉的前兆&lt;/li&gt;
&lt;li&gt;價遞增, 但量遞減的背離也是反轉&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;量縮, 同大趨勢的量縮是市場對於原先走勢的不認同反應&lt;/li&gt;
&lt;li&gt;規避流通性低的市場&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="obvhttpwikimbalibcomzhtwe883bde9878fe6bdaee68c87e6a087"&gt;&lt;a href="http://wiki.mbalib.com/zh-tw/%E8%83%BD%E9%87%8F%E6%BD%AE%E6%8C%87%E6%A0%87"&gt;OBV 公式&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;OBV 是從起始計算日基準點為 0, 開始每日加減成交量去觀察走勢 (收盤為漲則是 +成交量, 反之用 -成交量), 作者介紹此公式時引用兩種概念, 收集 (Accumulation) 及 派發 (Distribution), 概念是主力 &lt;strong&gt;出少進多&lt;/strong&gt; 與 &lt;strong&gt;出多進少&lt;/strong&gt; 的行為, 目標在蓄勢 (價格起伏不大) 待發, 透過 OBV 來過濾推測這些檯面下的行為。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;缺點, 突發性的消息可能會造成雜訊, 商品期貨因到期日 (較活躍) 會對成交量會有扭曲的變化, 當日的起伏並未反應在公式內&lt;/li&gt;
&lt;li&gt;修正方式
&lt;ol&gt;&lt;li&gt;需求指數 (Demand Index), 使用最高最低與收盤價加以平均 (此種補救方式亦可套用於 MA、MACD ...etc)&lt;/li&gt;
&lt;li&gt;使用 成交量多空比率淨額法 (Volume Accumulation) 來取代&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;公式如下&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;VA = V * [(C-H) - (H-C)]/(H-L) &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;V&lt;/strong&gt;olume 成交量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;H&lt;/strong&gt;igh 最高價&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;lose 收盤價&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt;ow 最低價&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="openinterest"&gt;未平倉合約 (Open Interest)&lt;/h2&gt;

&lt;p&gt;未平倉合約為商品合約與期貨選擇權市場的統計數字, 持有表示看好後市的趨勢可以持續, 但此數據的取得通常較晚, 所以極短線、當沖使用的可靠性低, 作者認定在重要性上：型態 &gt; 量 &gt; 價 &gt; 此數據。&lt;/p&gt;

&lt;h2 id=""&gt;波浪理論&lt;/h2&gt;

&lt;p&gt;筆者個人偏好的關係, 翻了一下這部分的章節, 決定還是將波浪理論給刪除了, 理由在於事後諸葛的成分實在太多 (應該說是解釋性的理論, 而非操作用的), 不過說來抱歉, 波浪理論的篇幅可能是佔本書最多的, 對於作者本身應該是頗有心得, 這邊沒有好好拜讀只能致上萬分歉意。&lt;/p&gt;

&lt;h2 id=""&gt;技術指標介紹&lt;/h2&gt;

&lt;p&gt;在開始介紹以下技術指標前, 還是要幫忙再提醒一次作者認定的重要程度為：型態 &gt; 成交量 &gt; K 線理論 與 各種指標, 所以切忌在指標與型態衝突的情況下仍倚靠指標進出市場。&lt;/p&gt;

&lt;h4 id="movingaverage"&gt;移動平均線 (Moving Average)&lt;/h4&gt;

&lt;p&gt;最簡單的計算方式就是取固定週期的天數, 收盤價加總平均來繪製連線, 短中長期分別是 (&amp;lt; 10日, 10~30日, &gt; 30日), 歐美機構看重 200日的長期、50日的中期, 台灣則是傾向於 年線 260日、半年線 130日、季線 65日、 月線 22日, MA 是落後指標, 週期愈長的 MA 在反應的速度愈慢。&lt;/p&gt;

&lt;h4 id="ema"&gt;指數平滑移動平均 (EMA)&lt;/h4&gt;

&lt;p&gt;另一種移動平均的計算方式, 這類型的變化著重在於近日的價格應對趨勢的影響較重, 計算公式如下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EMA&lt;sub&gt;t&lt;/sub&gt; = α * Y&lt;sub&gt;t&lt;/sub&gt; + (1-α) * EMA&lt;sub&gt;t-1&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;加權的程度以常數 α 決定&lt;/li&gt;
&lt;li&gt;Y&lt;sub&gt;t&lt;/sub&gt; 為今日價格&lt;/li&gt;
&lt;li&gt;α 通常取 2/(N+1), N 為天數&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多移動平均種類介紹 &lt;a href="https://zh.wikipedia.org/wiki/%E7%A7%BB%E5%8B%95%E5%B9%B3%E5%9D%87"&gt;參考WIKI&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=""&gt;移動平均的相關策略介紹&lt;/h4&gt;

&lt;p&gt;策略上的應用主要還是突破理論為主, 但在盤整時的表現不佳&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;格蘭碧的移動平均八大法則節錄, 第一種是 價格趨勢 與 均線趨勢相同, 當價格穿越趨勢線時的突破信號, 另一種價格與均線靠近, 又開始逐步拉開的信號  &lt;/li&gt;
&lt;li&gt;利用均線軌道來認定突破, 常見的有 102%、98% 或 101.6%、99% 兩組, 當價為從上方突破時買進, 下方突破時賣出  &lt;/li&gt;
&lt;li&gt;高低價移動平均, 類似 2. 的均線軌道概念  &lt;/li&gt;
&lt;li&gt;長短期移動平均策略, 短週期為快線, 長週期為慢線, 所以當兩線交會時, 表示快線的趨勢即將要帶出了&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id="bias"&gt;乖離率 BIAS&lt;/h4&gt;

&lt;p&gt;量測價格與均線的距離, (C&lt;sub&gt;t&lt;/sub&gt; - MA&lt;sub&gt;n&lt;/sub&gt;) / MA&lt;sub&gt;n&lt;/sub&gt;, 此指數的意涵為價格具有回歸均線的特性, 所以當乖離率過大時可以往回歸均線的趨勢操作, 不過目前主流的操作應該順勢, 所以建議看看就好。&lt;/p&gt;

&lt;h4 id="macd"&gt;指數差離指標 MACD (相當實用)&lt;/h4&gt;

&lt;p&gt;計算出價格的 12日 EMA (快線) 與 26日 EMA (慢線), 兩者的差距 (12日 - 26 日) 稱 DIF (差離值), 再去計算 DIF 的 9日 EMA 稱為 DEM (差離平均值), 此時的 DIF 與 DEM 又呈現出快線與慢線的概念, 習慣將 DIF - DEM 繪製為柱狀圖, 攀升至 0 以上時買進 (表示上漲的趨勢中, 乖離率擴大), 跌落時賣出, 介紹以下幾種應用&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DIF 與 DEM &gt; 0 牛市, 皆 &amp;lt; 0 為熊市&lt;/li&gt;
&lt;li&gt;DIF 向上突破 DEM 時為買進訊號 (同之前柱狀圖的描述), 唯獨在 0 軸以下交叉, 僅可空頭平倉 (順勢交易)&lt;/li&gt;
&lt;li&gt;同上, 反向突破為賣空訊號, 0 軸下交叉僅可多頭平倉&lt;/li&gt;
&lt;li&gt;價格趨勢仍在, 但 MACD 卻開始趨緩表示背離, 需注意&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=""&gt;逆時鐘曲線&lt;/h4&gt;

&lt;p&gt;此分析方式是根據道氏理論中的經驗法則, 提出的股價與量的同步同向關係 (價漲量增、價跌量縮), 首先以交易量為水平軸, 價格為垂直軸, 再計算交易量與價格的 25日 MA, 並標示至座標軸上, 觀察此走勢圖的變化落在下圖循環的哪個邊上再進行對應的操作
&lt;img src="https://farm2.staticflickr.com/1543/26451338706_ce98a5e621_n.jpg" alt="Fig2"&gt;&lt;/p&gt;

&lt;h4 id="kd"&gt;隨機指標 KD 線理論&lt;/h4&gt;

&lt;p&gt;這裡介紹的是原名為 隨機指標 (Stochastic Index) 的修正後公式, 首先要求出 原始隨機值 (Raw Stochastic Value, RSV), 這邊以 9日 週期為例&lt;/p&gt;

&lt;p&gt;RSV = [(今日收盤價 - 9日內最低價) / (9日內最高價 - 9日內最低價)] * 100&lt;/p&gt;

&lt;p&gt;K = RSV 的三日平均 (快線), D = K 的三日平均 (慢線), 依據快慢線的原理, 當兩線交會時發出信號 (K &gt; D 買進、K &amp;lt; D 賣出), 此數據同 RSI 會表現出買超、賣超 (&gt;70 買超、 &amp;lt;30 賣超) 及 背離的訊息, 在 &gt;75 or &amp;lt;25 的區域內, 交叉所提供的買賣訊號較佳。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;作者觀點, 由數學計算出的技術指標, 其重要的買賣訊號都是 &lt;strong&gt;基於某一條移動平均線的突破&lt;/strong&gt;, KD 值的交叉相當於突破一條短期的 (5-6日) 的均線, MACD 穿越 0 軸相當於比季線還長的均線 (約 89日)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id="r"&gt;威廉 %R 理論&lt;/h4&gt;

&lt;p&gt;以五日週期為例, 公式的表示可以看出與 RSV 為互補關係 (相加為 100), 兩者差別在於 RSV 計算的是收盤價與最低價的幅度, 而 %R 是計算與最高價的距離&lt;/p&gt;

&lt;p&gt;%R = [(5日內最高價 - 今日收盤價) / (5日內最高價 - 5日內最低價)] * 100&lt;/p&gt;

&lt;h2 id=""&gt;威爾德技術分析系統&lt;/h2&gt;

&lt;p&gt;這章要介紹的是 Welles Wilder 所發明的指標, 不過參考筆者之前的文章 &lt;a href="http://localhost:2368/ya-dang-li-lun/"&gt;亞當理論 筆記&lt;/a&gt;, 似乎作者本身最終已求返璞歸真、萬法歸宗?&lt;/p&gt;

&lt;h4 id="momentummtm"&gt;動量指標 (Momentum, MTM)&lt;/h4&gt;

&lt;p&gt;動量的公式在於壓縮了 N 日的漲幅, 以漲幅的變化來看趨勢的發展, 當步伐愈踩愈小就是趨勢減緩的意思, 常見的是以 10日 為週期&lt;/p&gt;

&lt;p&gt;MTM = C&lt;sub&gt;t&lt;/sub&gt; - C&lt;sub&gt;t-n&lt;/sub&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C&lt;sub&gt;t&lt;/sub&gt;：今日收盤價&lt;/li&gt;
&lt;li&gt;C&lt;sub&gt;t-n&lt;/sub&gt;：N 日前收盤價&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="oscillatorosc"&gt;震盪指標 (Oscillator, OSC)&lt;/h4&gt;

&lt;p&gt;另一種動量表示方式為震盪量, 透過以下公式計算, 落在 100 基準線之上為多頭傾向, 以下則為空頭傾向, 構造及反應上與 MTM 相當&lt;/p&gt;

&lt;p&gt;OSC = (C&lt;sub&gt;t&lt;/sub&gt; / C&lt;sub&gt;t-n&lt;/sub&gt;) * 100&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C&lt;sub&gt;t&lt;/sub&gt;：今日收盤價&lt;/li&gt;
&lt;li&gt;C&lt;sub&gt;t-n&lt;/sub&gt;：N 日前收盤價&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="relativestrengthindexrsi"&gt;相對強弱指標 (Relative Strength Index, RSI)&lt;/h4&gt;

&lt;p&gt;這邊提醒一下, RSI 指標與 Stan Weinstein 提出的相對強度 (RS) 是不同的概念, RS 量測的是個股表現相對於整體市場是強勢還是弱勢, 不要搞混了! RSI 的公式如下&lt;/p&gt;

&lt;p&gt;RSI = [UpAvg / (UpAvg + DownAvg)] * 100&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UpAvg = 14 日漲幅平均值 (週期隨商品變動)&lt;/li&gt;
&lt;li&gt;DownAvg = 14 日跌幅平均值 (週期隨商品變動)&lt;/li&gt;
&lt;li&gt;漲/跌幅的計算, 收盤大於前一日的總和 與 收盤小於前一日的總和&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RSI &gt; 70 為買超, RSI &amp;lt; 30 為賣超, 在型態的判斷上會比一般 K 線圖明顯 (頭肩頂/底、雙頭頂/底、三角形 ...etc), 在超買、超賣區的反轉可能同時也是市場趨勢的 &lt;strong&gt;反轉訊號&lt;/strong&gt;, RSI 與價格的趨勢 &lt;strong&gt;背離&lt;/strong&gt; 也視為警訊, 另外則需注意的是在上下極端的區域內指標會有鈍化的現象 (股價波動的劇烈程度無法反映在指標內)。&lt;/p&gt;

&lt;h4 id="directionalmovementindexdmi"&gt;趨向指標 (Directional Movement Index, DMI)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;趨向變動值 (Directional Movement, DM) &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DM 的取法適用前後兩日, 最高價&lt;sub&gt;今日&lt;/sub&gt; - 最高價&lt;sub&gt;昨日&lt;/sub&gt; 與 最低價&lt;sub&gt;今日&lt;/sub&gt; - 最低價&lt;sub&gt;昨日&lt;/sub&gt; 兩者取相距較大的, 最高價者相距較大的值取 +, 反之取 -。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;真正波幅 (True Range, TR), 底下三者取最大者&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;最高&lt;sub&gt;今日&lt;/sub&gt; - 最低&lt;sub&gt;今日&lt;/sub&gt; &lt;/li&gt;
&lt;li&gt;最高&lt;sub&gt;今日&lt;/sub&gt; - 收盤&lt;sub&gt;昨日&lt;/sub&gt; &lt;/li&gt;
&lt;li&gt;最低&lt;sub&gt;今日&lt;/sub&gt; - 收盤&lt;sub&gt;今日&lt;/sub&gt; &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方向線 (DI)&lt;/p&gt;

&lt;p&gt;DI = (DM&lt;sub&gt;14&lt;/sub&gt; / TR&lt;sub&gt;14&lt;/sub&gt;) * 100, (14 是指此數值再取 14日 的平均)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;應用的部份因為書本缺頁, 此處無法筆記, 日後對該指標有更多的涉略之後再進行補充。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id="sar"&gt;停損點轉向操作系統 (SAR)&lt;/h4&gt;

&lt;p&gt;書本缺頁, 無法閱讀...&lt;/p&gt;

&lt;h2 id=""&gt;其他指標&lt;/h2&gt;

&lt;p&gt;前面章節已介紹過了幾種較為實用的技術指標, 接下來後面作者再略為簡介其他也較為人知的指標供作參考&lt;/p&gt;

&lt;h4 id="cdp"&gt;逆勢操作系統 CDP&lt;/h4&gt;

&lt;p&gt;此方式為炒短線的操作使用, 計算出五個參考價位, 透過開盤位在這五個值的何處來進行不同的操作 (ex. 低點買進高點賣出 或是 高點做空底點回補), 公式如下&lt;/p&gt;

&lt;p&gt;CDP (需求值) = (H + L + C)/3 or (H + L + 2C)/3&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;H&lt;/strong&gt;igh 最高價&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt;ow 最低價&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;lose 收盤價&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pt = 前一日的波幅 (H-L) &lt;br&gt;
AH (最高值) = CDP + Pt &lt;br&gt;
NH (近高值) = CDP*2 - L &lt;br&gt;
NL (近低值) = CDP*2 - H &lt;br&gt;
AL (最低值) = CDP - Pt&lt;/p&gt;

&lt;h4 id="psy"&gt;人氣指標心理線 PSY&lt;/h4&gt;

&lt;p&gt;計算上漲天數的比例, 當比例過高時為買超, 過低時為賣超, 公式如下&lt;/p&gt;

&lt;p&gt;PSY&lt;sub&gt;n&lt;/sub&gt; = (N 日內上漲的天數 / N) * 100&lt;/p&gt;

&lt;h4 id="ar"&gt;買賣氣勢指標 AR (目前多以淘汰)&lt;/h4&gt;

&lt;p&gt;AR = 0.8 ~ 1.2 屬於盤整行情, AR &gt; 1.5 時可能回檔&lt;/p&gt;

&lt;p&gt;AR = (最高價 - 開盤價 )的N日總和 / (開盤價 - 最低價 )的N日總和&lt;/p&gt;

&lt;h4 id="br"&gt;買賣意願指標 BR (目前多以淘汰)&lt;/h4&gt;

&lt;p&gt;公式以前一日的收來來取代 AR 中的開盤價, 0.7 ~1.5 屬於盤整, BR &gt; 3 注意回檔, BR &amp;lt; 0.3 時注意反彈, 一般 AR 可以單獨使用, 但 BR 則會搭配 AR 一起, BR &amp;lt; AR 或 BR 跌回 1/2 時可逢低買進, 公式如下&lt;/p&gt;

&lt;p&gt;BR = (今日最高價 - 前一日收盤)的N日總和 / (前一日收盤 - 今日最低價)&lt;/p&gt;

&lt;h4 id="vr"&gt;成交量意願指標 VR&lt;/h4&gt;

&lt;p&gt;用 上漲日與下跌日的交易金額比例 來衡量股市買賣的氣勢, 一樣俱備 超買、超賣、背離...etc 判斷, 公式如下&lt;/p&gt;

&lt;p&gt;VR = [(UP&lt;sub&gt;n&lt;/sub&gt; + SA&lt;sub&gt;n&lt;/sub&gt;/2) / (DOWN&lt;sub&gt;n&lt;/sub&gt; + SA&lt;sub&gt;n&lt;/sub&gt;/2)] * 100&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SA&lt;sub&gt;n&lt;/sub&gt;：N日內股價平盤的成交值總和&lt;/li&gt;
&lt;li&gt;UP&lt;sub&gt;n&lt;/sub&gt;：N日內股價上漲日的成交值總和&lt;/li&gt;
&lt;li&gt;DOWN&lt;sub&gt;n&lt;/sub&gt;：N日內股價下跌日的成交值總和&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=""&gt;成交筆數指標&lt;/h4&gt;

&lt;p&gt;觀察的重點類似成交量的用途, 成交量的增加有助於趨勢的持續&lt;/p&gt;

&lt;h4 id="adr"&gt;漲跌比率 ADR&lt;/h4&gt;

&lt;p&gt;用以評估市場為多頭或空頭, 但此公式的缺點為無法觀察到市場資金的流向, 在轉為空頭的初期市場資金會開始逐漸轉移至體質較為良好的企業&lt;/p&gt;

&lt;p&gt;N日內股票上漲家數的移動合計 / N日內股票下跌家數的移動合計&lt;/p&gt;

&lt;h4 id="tapi"&gt;成交量值指標 TAPI&lt;/h4&gt;

&lt;p&gt;此指標是在觀察價格與成交量之間的關係, 價漲量增 與 價跌量縮 的正常反應會讓 價格 與 TAPI 亦趨亦步, 當背離時可產生信號, 公式如下&lt;/p&gt;

&lt;p&gt;TAPI = 每日成交總值 / 當日加權指數&lt;/p&gt;

&lt;p&gt;成交總值 = Σ 各價位的成交量 * 價位&lt;/p&gt;

&lt;h4 id="adl"&gt;騰落指數 ADL&lt;/h4&gt;

&lt;p&gt;市場處於多頭時 ADL 上升, 屬於空頭時 ADL 下降, 公式如下&lt;/p&gt;

&lt;p&gt;ADL&lt;sub&gt;t&lt;/sub&gt; = 股票上漲家數 - 股票下跌家數 + ADL&lt;sub&gt;t-1&lt;/sub&gt;&lt;/p&gt;

&lt;h4 id="obos"&gt;超買超賣指標 OBOS&lt;/h4&gt;

&lt;p&gt;概念與 ADL 雷同, 用以衡量市場的漲跌氣勢, 公式如下&lt;/p&gt;

&lt;p&gt;OBOS = N 日內上漲家數總和 - N 日內下跌家數的總和&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;後續介紹的指標, 實用程度不一甚至無法使用, 但對於交易人來說可以稍加領略一下這些過去技術分析者所謂觀察的跡象為何, 也許對日後交易可以產生不同的見解, 另外這些諸多的技術指標追求的不外乎 &lt;strong&gt;突破、超買/賣後的回歸趨勢、背離的反轉現象&lt;/strong&gt; 這幾點, 如何消化成自己的交易系統才是最為真實的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;操作策略觀念&lt;/h2&gt;

&lt;h4 id=""&gt;投資三原則&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;閒用資金原則, 在無壓力的情況下進行操作&lt;/li&gt;
&lt;li&gt;避免借貸原則, 造成的槓桿風險以及還款壓力的副作用 (不要過份貪心)&lt;/li&gt;
&lt;li&gt;長期投資, 不要有過於短線的觀點, 但也非長抱不放的極端操作&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=""&gt;投資工具選擇&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;流通性 與 變現性&lt;/li&gt;
&lt;li&gt;資金規模, 有一句俗語：「小錢要集中, 大錢要分散」&lt;/li&gt;
&lt;li&gt;槓桿與報酬率, 槓桿能增加利潤也會帶來風險, 初期建議不要過於貪心, 避免看對行情仍承受不了震盪爆倉&lt;/li&gt;
&lt;li&gt;商品週期, 過於長期才能回報的投資在周轉上不便&lt;/li&gt;
&lt;li&gt;風險, 一般商品的風險如下
&lt;ul&gt;&lt;li&gt;差價 及 匯率差&lt;/li&gt;
&lt;li&gt;利率風險&lt;/li&gt;
&lt;li&gt;購買力的風險 (貨幣貶值時)&lt;/li&gt;
&lt;li&gt;市場風險 (交易熱絡比冷清要好)&lt;/li&gt;
&lt;li&gt;經營風險 (投資股票的話要注意企業經營上的基本面)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;專業顧問人才?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=""&gt;資金控管&lt;/h4&gt;

&lt;p&gt;作者建議將資金劃作三等份用以順勢加碼, 並提醒大眾隨著資本遭受損失愈大時, 要達到回收的報酬也會更高 (不是線性增加, 應該是類似指數型成長), 嚴格的遵守自訂的交易計劃, 避免心理上的弱點造成損失擴大來侵蝕資本, 謹慎保本才為上策, 另外分散風險也是可以降低單一市場震盪的技巧, 只是作者對後續章節的描述都...輕描淡寫。&lt;/p&gt;

&lt;h4 id=""&gt;總結&lt;/h4&gt;

&lt;p&gt;由於後面篇幅都過於簡短, 所以筆記就直接以總結來取代, 操作的方式作者陸續提了幾種&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;金字塔加碼, 作者認為要能掌握到波段才能用, 當掌握到波段時就無需金字塔式的進場, 而認定此方法無用&lt;/li&gt;
&lt;li&gt;等量攤平, 當走勢判斷錯誤時的降低持有成本的方式, 等到走勢返回時即可解套, 筆者認為這是 &lt;strong&gt;有違順勢交易的做法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;RSI 比值法, 依據超買、超賣的標準來操作&lt;/li&gt;
&lt;li&gt;漲跌百分比, 依據漲跌的百本比來操作 (&lt;del&gt;有點廢話&lt;/del&gt;), 上漲超過 10% 買進 或 下跌超過 8% 時賣出, 不同商品需客製幅度&lt;/li&gt;
&lt;li&gt;定期定額, 長期投資&lt;/li&gt;
&lt;li&gt;固定定額, 讓持有商品的量保持在相同價值, 多退少補&lt;/li&gt;
&lt;li&gt;順勢交易, 目前主流的大原則操作方式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後提醒各位交易人, 型態 &gt; 成交量 &gt; K 線理論 與 各種指標, 此書奉行的仍是順勢交易, 型態上的突破才是關鍵, 而非單純倚靠指標上的背離或超買、超賣來掌握進場時間點, 更嚴謹的來說, 任何方法都要實驗求證後才能採用, 切忌人云亦云。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;後記&lt;/p&gt;
  
  &lt;p&gt;書本是跟中壢圖書館借的, 筆者實在非常的惱火, 想要致富的人超級愛偷撕書 (已經是第二本了), 另外紀錄一下此書缺 117-120, 287-290。&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title>亞當理論 筆記</title><description>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;The Adam Theory of Markets or What Matters is Profit. by &lt;strong&gt;Welles J. Wilde&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;從事交易所需要瞭解的, 遠比大多數人想像的還要少得多。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;摘錄&lt;/h2&gt;

&lt;p&gt;如同開宗名義所表示的, 要忘掉那些根深蒂固的知識, 那些最有效的原則和秘密, 總是簡單明顯到一再被人們所忽視, 所以這本書很簡單扼要 (&lt;del&gt;薄&lt;/del&gt;)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;亞當理論&lt;/strong&gt; 被作者視為一套返璞歸真的觀察方法 (而作者本身在此之前曾制定出了 RSI、DMI、ATR 及 SAR ...etc 技術指標)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;屈服於市場 (順勢交易法則)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;更進一步解釋, 這邊書裡提到的是要屏棄其他所學, 不要妄加臆測市場, 交易最大的困難不是瞭解的不夠, 而是知道的太多, 既有的成見會讓我們無法對市場保持敬畏。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;市場最重要的事－價格 (書中沒有多做說明, 僅表示任何事情皆會反映在價格之上), 而另一件重要的事則是－趨勢&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;對稱性, 針對趨勢亞當理論中提出了對稱性的解釋,&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>http://localhost:2368/ya-dang-li-lun/</link><guid isPermaLink="false">70bf0e95-f0c3-4b22-adc9-1cce3c5c7b41</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Wed, 13 Apr 2016 21:13:41 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;The Adam Theory of Markets or What Matters is Profit. by &lt;strong&gt;Welles J. Wilde&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;從事交易所需要瞭解的, 遠比大多數人想像的還要少得多。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;摘錄&lt;/h2&gt;

&lt;p&gt;如同開宗名義所表示的, 要忘掉那些根深蒂固的知識, 那些最有效的原則和秘密, 總是簡單明顯到一再被人們所忽視, 所以這本書很簡單扼要 (&lt;del&gt;薄&lt;/del&gt;)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;亞當理論&lt;/strong&gt; 被作者視為一套返璞歸真的觀察方法 (而作者本身在此之前曾制定出了 RSI、DMI、ATR 及 SAR ...etc 技術指標)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;屈服於市場 (順勢交易法則)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;更進一步解釋, 這邊書裡提到的是要屏棄其他所學, 不要妄加臆測市場, 交易最大的困難不是瞭解的不夠, 而是知道的太多, 既有的成見會讓我們無法對市場保持敬畏。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;市場最重要的事－價格 (書中沒有多做說明, 僅表示任何事情皆會反映在價格之上), 而另一件重要的事則是－趨勢&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;對稱性, 針對趨勢亞當理論中提出了對稱性的解釋, 對角線的映射稱作 double reflection, 其強烈程度大於 single reflection, 並且在隨後的解釋認定以下兩種特性在對稱性上的表現愈好 (也就可以說明為何套用在突破點時不理想)&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;離目前時間愈近 &lt;/li&gt;
&lt;li&gt;斜率愈大的趨勢 
&lt;img src="https://farm2.staticflickr.com/1537/26398334016_82a3dabde8.jpg" alt="Fig1"&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;比起買低賣高, 亞當理論更信奉：&lt;strong&gt;「買高, 賣得更高」&lt;/strong&gt;, 這裡與別追逐市場 (不要追高殺低) 的想法完全背道而馳, 但書裡的想法是當市場開始走了你才知道方向, 價格不會漲到不能買的地步, 也不會跌到不能賣的時候&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只交易已經發動的市場 而 遠離那些靜止或走勢不明的&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;良好的交易者善於掌握 方向 (direction) 與 期間 (duration) 而非轉折點 (turning points), 亞當理論永遠抓不住頭部與底部, 只在意捕捉這兩者間的趨勢 &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;亞當理論在於 &lt;strong&gt;不&lt;/strong&gt; 要抓 &lt;strong&gt;反轉點&lt;/strong&gt;, 而是抓 &lt;strong&gt;突破點&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;培養虧損小錢的做法是常態 且 絕無例外 (停損, 停損的空間只能縮不能增)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;營業廳的交易員知道大家都將停損設在哪, 也會故意去誘發, 但當行情發動的時候就算他們想誘發也會變得很困難, 設立停損的好處遠勝過於壞處。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加碼操作的方式&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;觀察雙重映射圖 (double reflection) 來判定是否應該繼續加碼, 理想的轉折趨勢 (反轉回原來趨勢) 應該非常迅速在 1~3 日內完成 &lt;/li&gt;
&lt;li&gt;加碼的部位不能夠超過之前建立的部位&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;進場時機, 這邊指得是最合適用雙重應設圖來決策&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;突破時&lt;/li&gt;
&lt;li&gt;趨勢改變時&lt;/li&gt;
&lt;li&gt;價格跳空 (線圖沒有重疊部分) 時 或 當日高低價差很大, 如果與 1.、2. 同時發生時更值得留心&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;進場與停損 &lt;strong&gt;圖示&lt;/strong&gt;, 停損時需以對稱的低點作為停損價位, 但進場時須確保對稱低點不會跌破進場價位 (換句話說就是突破過去高點才進場), 初始的停損可以用之前的低點來做
&lt;img src="https://farm2.staticflickr.com/1568/26433568485_50377b240c.jpg" alt="Fig2"&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;亞當理論十準則
&lt;ol&gt;&lt;li&gt;賠錢部位不要加碼及攤平&lt;/li&gt;
&lt;li&gt;進場時絕對要設停損&lt;/li&gt;
&lt;li&gt;除非趨勢朝著交易的相同方向, 否則不要移動停損點&lt;/li&gt;
&lt;li&gt;決不讓合理的小損失擴大&lt;/li&gt;
&lt;li&gt;任何一筆交易或任何一天, 讓損失維持 &amp;lt; 10%&lt;/li&gt;
&lt;li&gt;別抓頭部底部&lt;/li&gt;
&lt;li&gt;不要逆勢操作&lt;/li&gt;
&lt;li&gt;保持彈性, 即便是亞當理論也會出錯&lt;/li&gt;
&lt;li&gt;交易不順時不妨縮手休息&lt;/li&gt;
&lt;li&gt;認清自己交易的目的&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1、2、3、4、5 點都是在說明停損的重要性 (不允許任何的犯錯), 6、7 點說明交易原則是順勢交易而不是靠抓反轉點, 最後三點則是一些交易人的心理建設。&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;p&gt;&lt;/p&gt;

&lt;li&gt;&lt;p&gt;不需要每日做 雙重映射 (Double Reflection) 圖, 僅當市場出現轉折時預測低點做停損 (不過這邊筆者的疑問是轉折的空間得保留多大)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;心像化, 這一章節談的東西有點玄, 所謂的心像化的定義為在心中不斷地描繪某件事的圖像, 日復一日、年復一年的將正面肯定的圖像一再地烙印在潛意識中 (作者會每日的開始花 15 分鐘完成這件工作, 想像的內容以操作準則為主 並 刻畫每一個階段性目標)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以另類的角度看待市場&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;抽象化讓自己遠離情緒的波動, 以數字去計算而非「錢」&lt;/li&gt;
&lt;li&gt;把握原則讓自己做對的事 (成為成功的交易者), 將「錢」視為次要目標&lt;/li&gt;
&lt;li&gt;在起步時以非常小的部位, 降低規模跟頻率, 不要讓自己開始想到「錢」&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;幾個讓交易者失去平常心的因素&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;建立太大的部位&lt;/li&gt;
&lt;li&gt;停損點設定太遠&lt;/li&gt;
&lt;li&gt;冒太大的風險&lt;/li&gt;
&lt;li&gt;想要證明自己比別人操作更好&lt;/li&gt;
&lt;li&gt;相對於交易利潤, 過分提高了自己的「要求」(這句筆者不太明瞭, 是指太過於貪心?)&lt;/li&gt;
&lt;li&gt;必須靠交易維生 (什麼!! 原來不行~ XD)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=""&gt;系統&lt;/h2&gt;

&lt;p&gt;作者提出一個好的系統具備以下性質&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;簡單&lt;/li&gt;
&lt;li&gt;追隨市場, 系統應 &lt;strong&gt;呈現市場樣貌&lt;/strong&gt; 而非揣測市場樣貌&lt;/li&gt;
&lt;li&gt;調適性, 具有彈性可以反應市場的狀況&lt;/li&gt;
&lt;li&gt;在任何時間架構下都能適用&lt;/li&gt;
&lt;li&gt;不能落後&lt;/li&gt;
&lt;li&gt;衡量準確不需人為干預&lt;/li&gt;
&lt;li&gt;排除武斷的因子&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;檢視市場現有架構的缺失&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;移動平均：武斷因為需人為決定時間架構 且 落後於市場&lt;/li&gt;
&lt;li&gt;漲跌週期：傾向於市場應該? 嘗試抓出頭/底部, 十分複雜&lt;/li&gt;
&lt;li&gt;線性回歸：傾向於市場應該? 且 落後指標&lt;/li&gt;
&lt;li&gt;趨勢線：武斷地採取時間架構 與 決定採用的點&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title>交易贏家的 21 週全記錄 筆記 (Mind Map)</title><description>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;Diary of a Professional Commodity Trader：Lessons from 21 Weeks of Real Trading. by &lt;strong&gt;Peter L. Brandt&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;&lt;strong&gt;紀律&lt;/strong&gt; 是邁向成功交易員的第一步。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這本書是筆者目前接觸到的第三本, 書中提及 &lt;strong&gt;股價趨勢技術分析 (Technical Analysis of Stock Trends(9th Edition)
  by Robert Edwards &amp;amp; John Magee)&lt;/strong&gt; 這本技術分析的聖經本了, 好險筆者也有便宜入手 (´_ゝ`)y-～。&lt;/p&gt;

&lt;h2 id=""&gt;起源&lt;/h2&gt;

&lt;p&gt;這邊簡單提一下 Peter L. Brandt 的背景, 剛開始會從事交易的機緣是因為作者的鄰居是 CBTO (芝加哥期貨交易所) 的交易員,&lt;/p&gt;</description><link>http://localhost:2368/jiao-yi-ying-jia-de-21zhou-quan-ji-lu-bi-ji-mind-map/</link><guid isPermaLink="false">0d8e26a6-72f7-4be2-a3ed-6f87b0cd05ca</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Wed, 13 Apr 2016 13:20:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;Diary of a Professional Commodity Trader：Lessons from 21 Weeks of Real Trading. by &lt;strong&gt;Peter L. Brandt&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;&lt;strong&gt;紀律&lt;/strong&gt; 是邁向成功交易員的第一步。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這本書是筆者目前接觸到的第三本, 書中提及 &lt;strong&gt;股價趨勢技術分析 (Technical Analysis of Stock Trends(9th Edition)
  by Robert Edwards &amp;amp; John Magee)&lt;/strong&gt; 這本技術分析的聖經本了, 好險筆者也有便宜入手 (´_ゝ`)y-～。&lt;/p&gt;

&lt;h2 id=""&gt;起源&lt;/h2&gt;

&lt;p&gt;這邊簡單提一下 Peter L. Brandt 的背景, 剛開始會從事交易的機緣是因為作者的鄰居是 CBTO (芝加哥期貨交易所) 的交易員, 當接觸瞭解後開始產生了濃厚興趣, 從而最後離開廣告業踏入期貨市場, 最初靠著廣告時期建立的商業關係, 順利簽下一些案子可以讓作者 &lt;strong&gt;不至於被迫立即投入交易市場&lt;/strong&gt;, 所以當最後開始交易自己的資本時, 作者也才能夠支撐到開始根據走勢圖來操作, 逐漸讓交易有了起色。&lt;/p&gt;

&lt;h2 id=""&gt;商品特性&lt;/h2&gt;

&lt;p&gt;期貨商品或外匯市場不同於債券、股票、房地產, 因為商品或外匯的空頭與多頭部位永遠對等, 但市場融券的人數僅只有 3% (參考至當時紐約證交所); 所以要在商品或外匯市場上獲利其實要擊敗專業交易人或商業避險者。&lt;/p&gt;

&lt;p&gt;三種不適合商品、期貨交易者&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;當日沖銷者, 價(點)差會讓造成當日沖銷的人需極高的報酬才能獲利。&lt;/li&gt;
&lt;li&gt;隨時隨地查看帳戶者, 交易須將注意力放在交易本身而不是帳戶的淨值。&lt;/li&gt;
&lt;li&gt;情緒化的人。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=""&gt;作者推薦書籍&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;金融怪傑 (Market Wizards)  &lt;/li&gt;
&lt;li&gt;老千騙局 (Liar's Poker)  &lt;/li&gt;
&lt;li&gt;大賣空 (The Big Short: Inside the Doomsday Machine)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="mindmap"&gt;筆記 (Mind Map)&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用方式類似 Google Map 的拖曳操作可以移動畫面, 右鍵可以彈出放大鏡的按鈕, 按壓放大鏡拖曳後可以 Zoom In/Out&lt;/p&gt;
&lt;/blockquote&gt;

&lt;iframe width="853" height="480" src="https://embed.coggle.it/diagram/VwhUH8PDvp8vcb33/3a1f57efc791d54d5c960241cc62e058913f96d44ffd1d48be45abd59544c984" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
  &lt;p&gt;筆者按：&lt;/p&gt;
  
  &lt;p&gt;這本書讀起來異常沈重, 個人認為書裡要談的重心其實是 &lt;strong&gt;交易者的心境&lt;/strong&gt;, 雖然在前半部份對於作者本身使用的技術線圖上都有著墨, 並在往後 21 週的交易中也有再進一步穿插說明技術面依據, 但如同 Peter L. Brandt 開門見山所說的, 他其實只使用傳統的繪圖方法, 所以在技術線圖的分析上並無特別之處(?), 不過就如同禪語中的：「見山是山，見山不是山，見山還是山」, 同一個心法 (技術分析方式) 我想握在不同交易人手上看見的都會是不同的風景；而書中更重大的使命莫過於在帶領讀者一同走過這段最終雖有獲利卻巔坡不平的過程 (甚至獲利也未達預期的目標), 相信用心閱讀書籍的朋友應該也能夠感受到筆者心中的挫敗感, 願各位也能從書中的經驗得到一些啟示。&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title>讀書別靠意志力 筆記 (Mind Map)</title><description>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;Garantiert erfolgreich lernen. by &lt;strong&gt;Christian Grüning&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;副標：「風靡德國的邏輯 K 書法」。此本書是筆者開始接觸心智圖筆記方式的啟蒙書, 所以當筆者開始撰寫部落格文章使用到心智圖的時候, 就一直想再花時間回顧介紹這本書, 換言之 「It's time」。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;學習的四個階段&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;資訊的瀏覽 (結構式閱讀)  &lt;/li&gt;
&lt;li&gt;資訊的整理 (心智圖法, 使用心智圖的方式是最符合大腦理解記憶的結構)  &lt;/li&gt;
&lt;li&gt;資訊的儲存  &lt;/li&gt;
&lt;li&gt;資訊的提取、運用&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=""&gt;影響學習的三個因素&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;學習動機  &lt;/li&gt;
&lt;li&gt;壓力控制 (當知識在建構時會產生理解衝突, 在突破前會感受到壓力而需放鬆)  &lt;/li&gt;
&lt;li&gt;專注力&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="mindmap"&gt;筆記 (Mind Map)&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用方式類似 Google Map 的拖曳操作可以移動畫面, 右鍵可以彈出放大鏡的按鈕, 按壓放大鏡拖曳後可以 Zoom In/Out&lt;/p&gt;
&lt;/blockquote&gt;

&lt;iframe width="853" height="480" src="https://embed.coggle.it/diagram/Vv6gE3KDZDovIgC1/62da971574a9d78dc8a641dc8a78bdac2458d4070a104a2a1944ba32a7a6280d" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><link>http://localhost:2368/du-shu-bie-kao-yi-zhi-li-mind-map/</link><guid isPermaLink="false">57664373-b556-47ed-b899-d7b2a1d7b6e3</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Thu, 07 Apr 2016 04:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;Garantiert erfolgreich lernen. by &lt;strong&gt;Christian Grüning&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;副標：「風靡德國的邏輯 K 書法」。此本書是筆者開始接觸心智圖筆記方式的啟蒙書, 所以當筆者開始撰寫部落格文章使用到心智圖的時候, 就一直想再花時間回顧介紹這本書, 換言之 「It's time」。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;學習的四個階段&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;資訊的瀏覽 (結構式閱讀)  &lt;/li&gt;
&lt;li&gt;資訊的整理 (心智圖法, 使用心智圖的方式是最符合大腦理解記憶的結構)  &lt;/li&gt;
&lt;li&gt;資訊的儲存  &lt;/li&gt;
&lt;li&gt;資訊的提取、運用&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=""&gt;影響學習的三個因素&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;學習動機  &lt;/li&gt;
&lt;li&gt;壓力控制 (當知識在建構時會產生理解衝突, 在突破前會感受到壓力而需放鬆)  &lt;/li&gt;
&lt;li&gt;專注力&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="mindmap"&gt;筆記 (Mind Map)&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用方式類似 Google Map 的拖曳操作可以移動畫面, 右鍵可以彈出放大鏡的按鈕, 按壓放大鏡拖曳後可以 Zoom In/Out&lt;/p&gt;
&lt;/blockquote&gt;

&lt;iframe width="853" height="480" src="https://embed.coggle.it/diagram/Vv6gE3KDZDovIgC1/62da971574a9d78dc8a641dc8a78bdac2458d4070a104a2a1944ba32a7a6280d" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content:encoded></item><item><title>寫字書 筆記</title><description>&lt;p&gt;原著：寫字書 鄭文彬 (2009/05)&lt;/p&gt;

&lt;h2 id=""&gt;基礎&lt;/h2&gt;

&lt;p&gt;寫字的關鍵有下述兩點, 握姿除了指表面上的姿勢, 更隱含著透過正確姿勢展現的施力方式, 在肌肉尚未掌握正確握筆姿勢應有的施力方式, 容易感受到阻礙不順暢 (舊有的施力習慣導致)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;表面上的握姿矯正 (靜態)&lt;/li&gt;
&lt;li&gt;使用正確的施力方式 (動態)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;傳統握筆器的凹槽設計雖能建構三指關係, 但在書寫上卻大大抑制了靈活與便利性。&lt;/p&gt;
  
  &lt;p&gt;勿以不正確的握筆姿勢也能寫出漂亮的字體為由而堅持, 不正確的方式會對手部造成的負荷, 我們仍應以建立良好的習慣為上策。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;握姿&lt;/h2&gt;

&lt;p&gt;握筆實則是虛, 將筆「架」在手中, 透過三指 (拇指、食指、中指) 的指尖將筆「撐」在手中而非「抓」在手中。
&lt;img src="https://farm2.staticflickr.com/1550/26169946695_64fe7dd35d_c.jpg" alt="Fig1"&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;手腕與手臂平行, 將手腕支點維持在書寫位置右下方 45 度&lt;/li&gt;
&lt;li&gt;筆桿橫躺於食指第三關節處, 與桌面夾角呈 60-70 度&lt;/li&gt;
&lt;li&gt;腕部為 大支點, 小指末端關節為 小支點&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=""&gt;出力方式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;橫劃：出腕力&lt;/li&gt;&lt;/ul&gt;</description><link>http://localhost:2368/xie-zi-shu-bi-ji/</link><guid isPermaLink="false">a9297d0a-87a2-43e6-9fb0-4c7a25570e94</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Thu, 31 Mar 2016 17:18:05 GMT</pubDate><content:encoded>&lt;p&gt;原著：寫字書 鄭文彬 (2009/05)&lt;/p&gt;

&lt;h2 id=""&gt;基礎&lt;/h2&gt;

&lt;p&gt;寫字的關鍵有下述兩點, 握姿除了指表面上的姿勢, 更隱含著透過正確姿勢展現的施力方式, 在肌肉尚未掌握正確握筆姿勢應有的施力方式, 容易感受到阻礙不順暢 (舊有的施力習慣導致)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;表面上的握姿矯正 (靜態)&lt;/li&gt;
&lt;li&gt;使用正確的施力方式 (動態)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;傳統握筆器的凹槽設計雖能建構三指關係, 但在書寫上卻大大抑制了靈活與便利性。&lt;/p&gt;
  
  &lt;p&gt;勿以不正確的握筆姿勢也能寫出漂亮的字體為由而堅持, 不正確的方式會對手部造成的負荷, 我們仍應以建立良好的習慣為上策。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;握姿&lt;/h2&gt;

&lt;p&gt;握筆實則是虛, 將筆「架」在手中, 透過三指 (拇指、食指、中指) 的指尖將筆「撐」在手中而非「抓」在手中。
&lt;img src="https://farm2.staticflickr.com/1550/26169946695_64fe7dd35d_c.jpg" alt="Fig1"&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;手腕與手臂平行, 將手腕支點維持在書寫位置右下方 45 度&lt;/li&gt;
&lt;li&gt;筆桿橫躺於食指第三關節處, 與桌面夾角呈 60-70 度&lt;/li&gt;
&lt;li&gt;腕部為 大支點, 小指末端關節為 小支點&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=""&gt;出力方式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;橫劃：出腕力&lt;/li&gt;
&lt;li&gt;&lt;p&gt;豎劃：&lt;strong&gt;食指向下按壓重心點施力&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;食指掌握整體寫字力道的關鍵 &lt;strong&gt;且&lt;/strong&gt; 在運筆過程中最重要的力量方向為向下。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;撇劃：腕指並施 (可以畫圈練習)&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;左下撇：腕 + 食指&lt;/li&gt;
&lt;li&gt;右下捺：拇指 + 食指&lt;/li&gt;
&lt;li&gt;右上鉤：拇指 + 中指&lt;/li&gt;
&lt;li&gt;左上鉤：中指往上挑, 拇、食指只有扶持作用&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;永遠用筆尖的右下半側來書寫 &lt;strong&gt;且&lt;/strong&gt; 過程中不應改變筆桿倚靠的方向, 而是挪移手腕來運筆 (換句話說寫字過程是操縱整個筆桿一同移動, 而非操控筆尖)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;書寫姿態&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;紙張左傾 30 度&lt;/li&gt;
&lt;li&gt;書寫位置保持在身體中心右方 (右肩窩的前方)&lt;/li&gt;
&lt;li&gt;書寫過程中挪動紙張來保持姿態&lt;/li&gt;
&lt;li&gt;桌面 &lt;strong&gt;勿&lt;/strong&gt; 高於手肘, 雙腳自然貼地不懸空&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=""&gt;寫字要訣&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;橫劃：字體的 &lt;strong&gt;所有橫劃&lt;/strong&gt; 皆須保持向右斜上的角度, 無一例外 (但勿誇張), 但當字體中有一長橫為主筆時, 則此筆傾斜角度需稍加收斂達到平衡。&lt;/li&gt;
&lt;li&gt;豎劃：垂直不偏倚&lt;/li&gt;
&lt;li&gt;撇劃：要自然向下、向外畫出, ex.ㄅ、力、鳥、刀&lt;/li&gt;
&lt;li&gt;筆畫要直：屏除轉折圓融、筆畫彎曲的筆觸&lt;/li&gt;
&lt;li&gt;口字結構：略矮的倒梯形&lt;/li&gt;
&lt;li&gt;主筆寬度：大筆畫的主筆寬度要凸顯&lt;/li&gt;
&lt;li&gt;字體構圖：絕大多數的字體應保持瘦長型的架構&lt;/li&gt;
&lt;li&gt;直式書寫時, 字體保持對齊中線&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title>不一樣的 Node.js 筆記 (一)</title><description>&lt;p&gt;原著：不一樣的 Node.js－用 JavaScript 打造高效能的前後台網頁程式 林政毅、蔡政崇、錢逢祥 (2014/05/12)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;作者群 期許本書可以替讀者勾勒出 Node.js 的技術藍圖。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="nodejs"&gt;Node.js 簡介&lt;/h2&gt;

&lt;p&gt;Node.js 為一個 opensource 的框架, 採用了 Chrome's V8 JavaScript Engine。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;它讓 Javascript 可以獨立運行於瀏覽器之外。&lt;/li&gt;
&lt;li&gt;制定了一系列機制於 API 來協助達到原生 JavaScript 所不支援的功能 (ex. Module、FileSystem、Socket、Process ...etc)&lt;/li&gt;
&lt;li&gt;支援第三方模組的功能擴充&lt;/li&gt;
&lt;li&gt;繼承 JavaScript 中 Event-driven&lt;/li&gt;&lt;/ul&gt;</description><link>http://localhost:2368/bu-yi-yang-de-node-js-bi-ji/</link><guid isPermaLink="false">8ccbede2-6c6b-4362-9e42-3800e73a3c83</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Tue, 22 Mar 2016 12:34:46 GMT</pubDate><content:encoded>&lt;p&gt;原著：不一樣的 Node.js－用 JavaScript 打造高效能的前後台網頁程式 林政毅、蔡政崇、錢逢祥 (2014/05/12)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;作者群 期許本書可以替讀者勾勒出 Node.js 的技術藍圖。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="nodejs"&gt;Node.js 簡介&lt;/h2&gt;

&lt;p&gt;Node.js 為一個 opensource 的框架, 採用了 Chrome's V8 JavaScript Engine。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;它讓 Javascript 可以獨立運行於瀏覽器之外。&lt;/li&gt;
&lt;li&gt;制定了一系列機制於 API 來協助達到原生 JavaScript 所不支援的功能 (ex. Module、FileSystem、Socket、Process ...etc)&lt;/li&gt;
&lt;li&gt;支援第三方模組的功能擴充&lt;/li&gt;
&lt;li&gt;繼承 JavaScript 中 Event-driven 的非同步特性


&lt;blockquote&gt;
  書中作者認定 Event-driven 的非同步概念是與多工/緒是不同的, 但筆者認為 Event-driven 其實也只是一種使用多工/緒鑄成的樣板, 透過用多工/緒的方式來將執行與等待的動作拆分開來。&lt;/blockquote&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;h3 id=""&gt;優勢&lt;/h3&gt;


&lt;ul&gt;
&lt;li&gt;統一前後開發的經驗&lt;/li&gt;
&lt;li&gt;開發效率高 (見仁見智)&lt;/li&gt;
&lt;li&gt;極佳的效能 (雖然 JIT 的技術引進後, 仍有無法跟原生的程式相抗衡的宿命)&lt;/li&gt;
&lt;li&gt;數以萬計的第三方模組支援&lt;/li&gt;
&lt;li&gt;跨平台&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="javascript"&gt;JavaScript 簡介&lt;/h3&gt;

&lt;p&gt;又稱做 ECMAScript (&lt;a href="https://zh.wikipedia.org/wiki/JavaScript"&gt;Wiki 傳送門&lt;/a&gt;),
在瀏覽器百家爭鳴的年代, 各家對 JavaScipt 實作的支援與標準不同, 最後由 ECMA 的協調下統一制定了 ECMA-262的標準。&lt;/p&gt;

&lt;p&gt;目前常見的 JavaScript Engine有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;V8 - Google Chrome 所使用, 首先引入 JIT 技術&lt;/li&gt;
&lt;li&gt;SpiderMonkey - Mozilla FireFox 所使用, 由 Javascript 語言發明人 Brendan Eich 開發; 而 Mozilla 基金會的前身是由當時被 IE 所擊敗的 Netscape 為了託管其 opensource 的專案所成立&lt;/li&gt;
&lt;li&gt;Chakra - 微軟 IE 9.0 之後開始搭載&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id="javascript"&gt;JavaScript 語法&lt;/h2&gt;

&lt;p&gt;因為 Node.js 是 base on JavaScript 而衍伸的, 所以在語法上我們還是要回來介紹 JavaScript 做為基石。 &lt;/p&gt;

&lt;h3 id=""&gt;變數宣告&lt;/h3&gt;

&lt;pre&gt;&lt;code class="language- language-javascript"&gt;var MyName = 'Vincent'; //顯式宣告  
YourName = 'Guest'; //隱式宣告  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=""&gt;變數型別&lt;/h3&gt;

&lt;pre&gt;&lt;code class="language- language-javascript"&gt;var text = undefined; //未宣告的變數或宣告後未初始化  
var text = 'string'; //字串  
var text = 520; //64 bit 浮點數  
var text = true; //布林變數 true or false  
var text = function() {}; //函數  
var text = null; //釋放物件時指向 null  
var text = { key1 : 1}; //物件  
var text = [5,2,0]; //陣列  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id="string"&gt;字串 (String)&lt;/h5&gt;

&lt;p&gt;只要用雙/單引號括起來的都是字串類型, 底下是特殊字元的介紹。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;\n&lt;/code&gt; 換行鍵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\r&lt;/code&gt; 回車鍵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\t&lt;/code&gt; Tab 鍵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\b&lt;/code&gt; 刪除鍵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\f&lt;/code&gt; 換頁鍵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\'&lt;/code&gt; 單引號&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\"&lt;/code&gt; 雙引號&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\\&lt;/code&gt; 反斜線 (單一個反斜線稱跳脫字元, 需連續兩個才能秀出字元)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\x00 - \xFF&lt;/code&gt; (16 bit 的字元)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\u0000 - \uFFFF&lt;/code&gt; (Unicode 字元)&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id="number"&gt;數值 (Number)&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language- language-javascript"&gt;var num1 = .0001 //可省略小數點前的 0  
var num2 = 1E-4 //科學記號  
var num3 = 0x123 //16 進位表示, 不接受小數點  
var num4 = 0123 //0 開頭表示 8 進位數字, 不接受小數點  
Infinity //無窮大  
NaN //代表非數字, 變數未初始化就進行數字運算時會回傳該值  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id="function"&gt;函式 (Function)&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language- language-javascript"&gt;function FunctionName(parameter)  
{
    ...
    return result; // 可以有回傳值也可無
} //一般的命名方式來建立函式

var fnVar = function(parameter)  
{
    ...
} //使用變數承接匿名函式, 後續可透過 fnVar 來呼叫

(function(parameter){
    ...
}('test')) //在匿名函式後直接使用'()'來馬上呼叫
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;函式可以使用關鍵字 function 做宣告, 沒有提供 function name 時則是匿名 (Anonymous) 函式 (第一版書中有誤)。&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-javascript"&gt;var functionOne = function(){console.log("hello world!")};  
var functionTwo = new Function('console.log("hello world!")');  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;建立函式還可另外分為兩種類型, 一個會建立成 function 另一個則是 object。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.w3school.com.cn/jsref/jsref_obj_global.asp"&gt;JavaScript 內建全域函式&lt;/a&gt;&lt;/p&gt;

&lt;h5 id="object"&gt;物件 (Object)&lt;/h5&gt;

&lt;p&gt;物件擁有自己的屬性 (properties) 以及方法 (methods)。&lt;/p&gt;

&lt;h5 id="array"&gt;陣列 (Array)&lt;/h5&gt;

&lt;p&gt;亦是一種物件類型 (所以有提供以下方法 push、pop、shift、unshift、splice ...etc), 陣列元素也可以是不同的類型。&lt;/p&gt;

&lt;h3 id="json"&gt;JSON&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;J&lt;/strong&gt;ava&lt;strong&gt;S&lt;/strong&gt;cript &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;N&lt;/strong&gt;otation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;輕量級的資料交換語言, 為獨立程式語言外的格式定義語法 且 目前已被多種程式語言所支援。&lt;/li&gt;
&lt;li&gt;相對於傳統的關係型資料庫，一些關係型資料庫 (NoSQL) 選擇 JSON 作為其資料儲存格式 (MongoDB、CouchDB、RavenDB ...etc)。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language- language-javascript"&gt;var myObj = new Object();  
myObj.name = 'Vincent';  
myObj.gender = 'Male';

var myArray = new Array('one', 'two', 'three');  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;標準建立 Object 與 Array的方式&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-javascript"&gt;var myObj  
{
    'name' : 'Vincent';
    'gender' : 'Male';
};

var myArray = ['one', 'two', 'three'];  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 JSON 語法 ([]、{} 與 、) 描述建立的 Object 與 Array (鍵值與元素皆可支援 64 bit 浮點數)&lt;/p&gt;

&lt;p&gt;JSON 格式的文字檔可透過 JavaScript 內建的函式處理&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON.stringify() 轉換陣列或物件成 JSON 格式的資料&lt;/li&gt;
&lt;li&gt;JSON.parser() 將 JSON 格式的資料轉成物件或陣列&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=""&gt;運算符&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, 以上為常見的算數運算符&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;+&lt;/code&gt; 同時具有字串串接的功能, 所以在表達式中需注意, 運算符會從算式由左至右運算&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; (and), &lt;code&gt;|&lt;/code&gt; (or), &lt;code&gt;~&lt;/code&gt; (not), &lt;code&gt;^&lt;/code&gt; (xor), &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; (位元左移), &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; (位元右移), &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; (位元無符號右移), 以上為位元 (bitwise) 運算符號&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt; (左值等於右值 且 兩邊資料類型也相同時為 true, 反之 false), &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt; (與 === 相反意思), &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, 以上為比較與邏輯運算符&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;===&lt;/code&gt; 在物件的比較上, 還會比對參考的位置是否相同, 兩個物件雖含相同元素內容仍會比對結果 false&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=""&gt;特殊用法&lt;/h3&gt;

&lt;pre&gt;&lt;code class="language- language-javascript"&gt;var a=1;  
var b=2;

typeof("abc"); //回傳資料類型

var result1 = (a == b)? true:false; //條件式成立與否決定後續的回傳值

var result2 = instanceof "abc" instanceof String;  
//回傳是否為該物件類型, 注意這邊 "abc" 為 string 類型, 但並非 String Object

var result3 = (a++, b++, a+b); //依序執行並會傳最後一個算式的結果

var result4 = delete a; //將變量重設為 undefined, 並回傳成功與否

var result5 = void b++; //放棄運算結果用 undefined 代替回傳  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=""&gt;流程控制&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;if... else... if&lt;/li&gt;
&lt;li&gt;switch... case&lt;/li&gt;
&lt;li&gt;for... loop&lt;/li&gt;
&lt;li&gt;for... in&lt;/li&gt;
&lt;li&gt;while... loop&lt;/li&gt;
&lt;li&gt;do... while&lt;/li&gt;
&lt;li&gt;continue、break、(return、throw 省略未介紹)&lt;/li&gt;
&lt;li&gt;with&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;範例&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-javascript"&gt;var condition = 3;  
var list = [  
    {id:1, name='Vincent'},
    {id:2, name='Miyu'},
    {id:3, name='Guest'}
];
// JSON 格式建立陣列

// if... else if... else... 
if (condition == 1) {  
    ....
}
else if(condition == 2) {  
    ....
}
else {  
    ....
};

// switch... case...
switch (condition) {  
    case 1:
        ...
        break;
    case 2:
        ...
        break;
    default:
        ...
}

// for... loop
for (var index=0 ; index&amp;lt;3 ; index++)  
{
    ...
}

// for... in
for (var i in list){  
    var obj = list[i];
    console.log(obj.id + ':' + obj.name);
}

// while... loop
var i = 0;  
while (i&amp;lt;=3)  
{
    ...
    i++;
}

// do... while
var j = 0;  
do  
{
    ...
    j++;
} while (j&amp;lt;3);

// continue、break
for (var index=0 ; index&amp;lt;10 ; index++)  
{
    if(index == 1){
        continue; //會跳開此次迴圈的執行, 執行下一次迴圈
    }

    if(index == 5)
    {
        break; //會直接離開迴圈
    }
    console.log(index);
}

// with (strict mode 無法使用)
for (var i in list){  
    var obj = list[i];
    with (obj) {
        console.log(id + ':' + name); 
        //with的功用主要是用來省略物件名稱
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id="prototype"&gt;原型 (Prototype)&lt;/h3&gt;

&lt;p&gt;Prototype 應用於將 JavaScript 中屬於同建構子 (constructor) 建立的所有物件, 把可以共享的部分獨立出來, 避免重複建立的問題。  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-javascript"&gt;function Person(age,id){  
    this.age = age;
    this.id = id;
}

Person.prototype.address = 'taipei';

Person.prototype.out = function(){  
    console.log('age:' + this.age + ' id:' + this.id + ' address:' + this.address);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(address 與 out 為所有物件共享) &lt;/p&gt;

&lt;h3 id="gcgarbagecollection"&gt;記憶體回收機制 (GC, Garbage Collection)&lt;/h3&gt;

&lt;p&gt;透過計算指向物件的 reference count 來確認該物件是否仍被使用, 當 reference count 降為 0 時便釋放該記憶體空間。&lt;/p&gt;</content:encoded></item><item><title>道氏理論的 21 招選股技巧 筆記 (Mind Map)</title><description>&lt;p&gt;原著：道氏理論的21招選股技巧 陳東 (2012/04/01)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;History repeats itself. 技術面操盤者心中共同的信念。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;關於 Mind Map 內的筆記整理, 是筆者消化後認為有可能後續實驗可以參考的法則, 有可能並未忠實呈現道氏理論原先的面貌 (或本書作者的完整意思), 像道氏理論中對於各技術分析的指標都會強調求出其三重型態或是至少求出中、短期的線圖, 但筆者的重心僅在這些技術指標的特徵描述, 實際應用時應再自行驗證加入主觀意識的部分。&lt;/p&gt;

&lt;h2 id="mindmap"&gt;筆記 (Mind Map)&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用方式類似 Google Map 的拖曳操作可以移動畫面, 右鍵可以彈出放大鏡的按鈕, 按壓放大鏡拖曳後可以 Zoom In/Out&lt;/p&gt;
&lt;/blockquote&gt;

&lt;iframe width="853" height="480" src="https://embed.coggle.it/diagram/Vu5LNj_zpOYo1mzy/739e465141646161dad5c001a099ada2bdb261208d58eeee6ca71408a3c87dfe" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><link>http://localhost:2368/dao-shi-li-lun-de-21-zhao-xuan-gu-ji-qiao/</link><guid isPermaLink="false">c3e8ac2f-03b6-4684-88da-f10b74881e2c</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Sat, 19 Mar 2016 12:05:46 GMT</pubDate><content:encoded>&lt;p&gt;原著：道氏理論的21招選股技巧 陳東 (2012/04/01)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;History repeats itself. 技術面操盤者心中共同的信念。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;關於 Mind Map 內的筆記整理, 是筆者消化後認為有可能後續實驗可以參考的法則, 有可能並未忠實呈現道氏理論原先的面貌 (或本書作者的完整意思), 像道氏理論中對於各技術分析的指標都會強調求出其三重型態或是至少求出中、短期的線圖, 但筆者的重心僅在這些技術指標的特徵描述, 實際應用時應再自行驗證加入主觀意識的部分。&lt;/p&gt;

&lt;h2 id="mindmap"&gt;筆記 (Mind Map)&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用方式類似 Google Map 的拖曳操作可以移動畫面, 右鍵可以彈出放大鏡的按鈕, 按壓放大鏡拖曳後可以 Zoom In/Out&lt;/p&gt;
&lt;/blockquote&gt;

&lt;iframe width="853" height="480" src="https://embed.coggle.it/diagram/Vu5LNj_zpOYo1mzy/739e465141646161dad5c001a099ada2bdb261208d58eeee6ca71408a3c87dfe" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content:encoded></item><item><title>Kelly Formula / 凱利公式 － 風險控管</title><description>&lt;blockquote&gt;
  &lt;p&gt;投資 vs 投機 vs 賭博, 不管你自認為是使用以上三種策略的那一種人, 今天要介紹的是一門讓你在這條路上可以走得更遠、更久的準則－&lt;strong&gt;Kelly Formula&lt;/strong&gt;, 先來上一堂數學課吧! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="kellyformula"&gt;Kelly Formula&lt;/h2&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1497/25083691774_dba0e65847_o.jpg" alt="Kelly Formula"&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;b : 賠率 (獲勝後的報償比上本金的比例, ex. 賭上 1 元, 獲勝可拿回 1+b 元)&lt;/li&gt;
&lt;li&gt;p : 勝率 (獲勝的機率)&lt;/li&gt;
&lt;li&gt;q : 敗率 (1-p)&lt;/li&gt;
&lt;li&gt;f : 為使用現有資金應進行投注的比例&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kelly Formula 為求最大期望值時, 應投入的資金比例 (其中 b、p、q 皆為不變常數) &lt;br&gt;
from &lt;a href="https://zh.wikipedia.org/wiki/%E5%87%B1%E5%88%A9%E5%85%AC%E5%BC%8F"&gt;Wiki&lt;/a&gt;  &lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=""&gt;證明&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;X&lt;sub&gt;n&lt;/sub&gt; : 表示 經過 n&lt;/li&gt;&lt;/ul&gt;</description><link>http://localhost:2368/kelly-formula/</link><guid isPermaLink="false">8fbf310e-9b7b-4bac-a24e-c1c22ca661a4</guid><dc:creator>Captain Vincent</dc:creator><pubDate>Fri, 11 Mar 2016 10:57:55 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;投資 vs 投機 vs 賭博, 不管你自認為是使用以上三種策略的那一種人, 今天要介紹的是一門讓你在這條路上可以走得更遠、更久的準則－&lt;strong&gt;Kelly Formula&lt;/strong&gt;, 先來上一堂數學課吧! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="kellyformula"&gt;Kelly Formula&lt;/h2&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1497/25083691774_dba0e65847_o.jpg" alt="Kelly Formula"&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;b : 賠率 (獲勝後的報償比上本金的比例, ex. 賭上 1 元, 獲勝可拿回 1+b 元)&lt;/li&gt;
&lt;li&gt;p : 勝率 (獲勝的機率)&lt;/li&gt;
&lt;li&gt;q : 敗率 (1-p)&lt;/li&gt;
&lt;li&gt;f : 為使用現有資金應進行投注的比例&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kelly Formula 為求最大期望值時, 應投入的資金比例 (其中 b、p、q 皆為不變常數) &lt;br&gt;
from &lt;a href="https://zh.wikipedia.org/wiki/%E5%87%B1%E5%88%A9%E5%85%AC%E5%BC%8F"&gt;Wiki&lt;/a&gt;  &lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=""&gt;證明&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;X&lt;sub&gt;n&lt;/sub&gt; : 表示 經過 n 次賭局後所剩的資金 (n=0, 表示初始資金)&lt;/li&gt;
&lt;li&gt;W&lt;sub&gt;n&lt;/sub&gt; : 表示 經過 n 次賭局, Win 的次數&lt;/li&gt;
&lt;li&gt;L&lt;sub&gt;n&lt;/sub&gt; : 表示 經過 n 次賭局, Loss 的次數&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Two Cases&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;X&lt;sub&gt;n&lt;/sub&gt; = X&lt;sub&gt;n-1&lt;/sub&gt; ( 1 + bf )
&lt;br&gt;Win case, 剩餘金額 = 前次金額 * (1 + 賠率*前次投注的比例)  &lt;/li&gt;
&lt;li&gt;X&lt;sub&gt;n&lt;/sub&gt; = X&lt;sub&gt;n-1&lt;/sub&gt; ( 1 - f )
&lt;br&gt;Loss case, 剩餘金額 = 前次金額 * (1 - 前次損失的比例)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更進一步可以理解&lt;/p&gt;

&lt;p&gt;X&lt;sub&gt;n&lt;/sub&gt; = X&lt;sub&gt;0&lt;/sub&gt; ( 1 - f ) &lt;sup&gt;Ln&lt;/sup&gt; ( 1 + bf ) &lt;sup&gt;Wn&lt;/sup&gt; ... (式1) &lt;br&gt;
剩餘金額 = 初始金額 * (失敗 case)&lt;sup&gt;失敗次數&lt;/sup&gt; * (勝利 case)&lt;sup&gt;勝利次數&lt;/sup&gt; &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;參考文獻中更進一步的將 Loss Case 中的賠率 (賠給對方), 另外定義為 a, 所以整理得到的公式會如下&lt;/p&gt;
  
  &lt;p&gt;X&lt;sub&gt;n&lt;/sub&gt; = X&lt;sub&gt;0&lt;/sub&gt; ( 1 - af ) &lt;sup&gt;Ln&lt;/sup&gt; ( 1 + bf ) &lt;sup&gt;Wn&lt;/sup&gt; ... (式2)&lt;/p&gt;
  
  &lt;p&gt;而 (式1) 只是當 a=1 的 special case (表示當輸了時, 會造成該次投注金額全部損失)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Reference &lt;a href="https://www.math.washington.edu/~morrow/336_10/papers/jane.pdf"&gt;Betting with the Kelly Criterion&lt;/a&gt;, Jane Hung (June 2,2010)&lt;/p&gt;

&lt;p&gt;這邊先以 (式2) 來求 f 的最佳值, 首先對 &lt;strong&gt;方程式&lt;/strong&gt; 的左右兩側同時&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;除以 X&lt;sub&gt;0&lt;/sub&gt;  &lt;/li&gt;
&lt;li&gt;取 ln (ln = log&lt;sub&gt;e&lt;/sub&gt;) &lt;br&gt;
因為 ln 為嚴格遞增函數, 所以對 &lt;strong&gt;方程式&lt;/strong&gt; 兩側作用後, 不影響求極大值的條件。&lt;br&gt;
(若 x&lt;sub&gt;1&lt;/sub&gt;、x&lt;sub&gt;2&lt;/sub&gt; 為實數 且 x&lt;sub&gt;1&lt;/sub&gt;&gt;x&lt;sub&gt;2&lt;/sub&gt;, 則 f(x&lt;sub&gt;1&lt;/sub&gt;) &gt; f(x&lt;sub&gt;2&lt;/sub&gt;)恆成立, 滿足此條件的 f(x) 稱為 &lt;strong&gt;嚴格遞增函數&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;除以 n (當 n&gt;0 時, 也可視為嚴格遞增)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;透過使用下列對數律&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;log&lt;sub&gt;a&lt;/sub&gt; X*Y = log&lt;sub&gt;a&lt;/sub&gt; X + log&lt;sub&gt;a&lt;/sub&gt; Y&lt;/li&gt;
&lt;li&gt;b * log&lt;sub&gt;a&lt;/sub&gt; X = log&lt;sub&gt;a&lt;/sub&gt; X &lt;sup&gt;b&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;化簡後如下 ... (式3)
&lt;img src="https://farm2.staticflickr.com/1669/25690346716_7d44c0666a.jpg" alt="Step1"&gt;&lt;/p&gt;

&lt;p&gt;新定義一個函式為 G(f) = (式3), 因 L&lt;sub&gt;n&lt;/sub&gt; / n = q、W&lt;sub&gt;n&lt;/sub&gt; / n = p (來自於 p、q 本身的定義為勝率跟敗率), 所以得到&lt;/p&gt;

&lt;p&gt;G(f) = q (ln (1-af)) + p (ln (1+bf))&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;目前問題已經轉化為要求 G(f) 的最大值時, f 應該使用多少?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;這邊一階微分在數學上的意義是斜率, 所以當我們今天要找極大值相當於我們要找出斜率 = 0 的點, 所以我們先找出 G'(f) = 0 的 f 值有哪些? &lt;/p&gt;

&lt;p&gt;使用 &lt;a href="https://en.wikipedia.org/wiki/Chain_rule"&gt;Chain Rule&lt;/a&gt; 技巧可以得到下面結果&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1702/25719192595_02cd415376_n.jpg" alt="Step2"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1703/25418464200_564ea61514_n.jpg" alt="Step3"&gt;&lt;/p&gt;

&lt;p&gt;因為分母 =\= 0, 所以這邊僅需要求分子 &lt;strong&gt;bp - aq- abf = 0&lt;/strong&gt; 的 f 解, 透過移項後即可得到 G(f) 的極值出現在 f 為何時 (當然這邊其實還要用二階微分來求函數的凹性, 確認求出的 f 值代入 G(f) 是極大還是極小值, 但這邊省略請直接參考 &lt;a href="https://www.math.washington.edu/~morrow/336_10/papers/jane.pdf"&gt;Jane 的文獻&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1481/25719324655_119cc96a22_m.jpg" alt="Step4"&gt;&lt;/p&gt;

&lt;p&gt;得到 (式2) 的解後, 就可以知道 (式1) 得到的 Kelly Fromula 僅是當 a 為 1 時的特殊解。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.symbolab.com"&gt;推薦Online好用的數學工具&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id="thestockmarket"&gt;The Stock Market&lt;/h2&gt;

&lt;p&gt;股票市場上的賭局並非使用固定的賠率看待, 所以這邊引入了隨機變數的概念, 用 &lt;strong&gt;X&lt;/strong&gt; 表示每單位可拿回的金額 (相當於之前 Kelly Formula 裡的賠率 b), P(X = s) 則表示當 X 為 s 時發生的機率。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ccckmit.wikidot.com/st:randomvariable"&gt;隨機變數參考網站&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;又因為今天在設法求出最佳投注資金比例 f 時, 重點不在於整個市場的機率分佈呈現是如何, 所以對機率分佈上做了以下的假設&lt;/p&gt;

&lt;p&gt;&lt;code&gt;P(X = μ + σ) = P(X = μ − σ) = 0.5 ... (式4)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;μ 為平均值&lt;/li&gt;
&lt;li&gt;σ 為標準差&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;而在資金 Y 變化的公式則是由下式表示&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Y&lt;sub&gt;n&lt;/sub&gt; = Y&lt;sub&gt;n-1&lt;/sub&gt; (1 + (1-f)r + fX), &lt;em&gt;(r 表示 &lt;strong&gt;未&lt;/strong&gt; 進行投注的資金獲得的報償比例)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;解讀為&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;現有剩餘資金 = 前次剩餘資金*(1 + 未投注市場比例*未投注報償比 + 投注市場比例*投注市場報償比) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;當今天進行了 n 次的投注後, 嘗試列出 &lt;strong&gt;現有資金&lt;/strong&gt; 與 &lt;strong&gt;初始資金&lt;/strong&gt; 間的關係, 所以這邊重新做了一次以下的假設, 使得我們經過 n 次投注後得到的總 μ, σ&lt;sup&gt;2&lt;/sup&gt; and r 仍相同 (意味要將 μ, σ&lt;sup&gt;2&lt;/sup&gt; and r 平均分散在 n 次的投注中)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;標準差 σ'
&lt;img src="https://farm2.staticflickr.com/1651/25203896753_b1333171ea_t.jpg" alt="Step5"&gt;
(因為要令 σ'&lt;sup&gt;2&lt;/sup&gt; * n = σ&lt;sup&gt;2&lt;/sup&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;回報率 μ'
&lt;img src="https://farm2.staticflickr.com/1692/25830684445_9488841440_t.jpg" alt="Step6"&gt;
(因為要令 μ'* n = μ)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他投資回報率 r'
&lt;img src="https://farm2.staticflickr.com/1565/25200176134_81d6ea1236_t.jpg" alt="Step7"&gt;
(因為要令 r'* n = r)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;將以上的變量代入一開始假設的機率分佈
&lt;img src="https://farm2.staticflickr.com/1506/25200176174_cd81ae121e.jpg" alt="Step8"&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以導出 Y&lt;sub&gt;n&lt;/sub&gt; 與 Y&lt;sub&gt;0&lt;/sub&gt; 的關係式
&lt;img src="https://farm2.staticflickr.com/1579/25202372904_2b2901e3d6_n.jpg" alt="Step9"&gt;&lt;/p&gt;

&lt;p&gt;將 Y&lt;sub&gt;0&lt;/sub&gt; 移項至左式, 再兩邊同取 ln 後
&lt;img src="https://farm2.staticflickr.com/1520/25738035291_dc778d991b.jpg" alt="Step10"&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;回到 Kelly Formula 的討論, 我們仍是要求 G&lt;sub&gt;n&lt;/sub&gt;(f) 的極大值出現在 f (資金下注比例) 為何時?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在這部分的推導上是先將 G&lt;sub&gt;n&lt;/sub&gt;(f) 以 Maclaurin 級數展開, 並令 n-&gt;∞ 時對多項式來求極值。&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/138186136@N06/25254483243/in/dateposted-public/" title="Step11"&gt;&lt;img src="https://farm2.staticflickr.com/1550/25254483243_fae5dae26b.jpg" align="center" width="375" height="500" alt="Step11"&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt; &lt;br&gt;
(詳細的步驟可以參考我的計算過程, 跟 Jane 的有些微出入, 我猜她可能沒有實際推導後面的展開式, 所以才會在微分的結果上寫錯)&lt;/p&gt;

&lt;p&gt;最後我們總算可以導出適用於市場的 Kelly Criterion。
&lt;img src="https://farm2.staticflickr.com/1518/25883526085_a10a0e006e_o.jpg" alt="Step12"&gt;&lt;/p&gt;</content:encoded></item><item><title>海龜特訓班 筆記 (Mind Map)</title><description>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;The Complete TurtleTrader by &lt;strong&gt;Michael W. Covel&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;這是一部關於 理察.丹尼斯 (Richard Dennis) 訓練雜牌軍成為百萬交易員的故事(1983-1984)。不過絕大部分都被我在筆記中省略了 (笑)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;由來&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;海龜&lt;/strong&gt; 是丹尼斯給學生們的暱稱, 曾到新加坡參觀海龜培育場而受到了啟發, 「要像培育海龜般的那樣培育交易員」。&lt;/p&gt;

&lt;h2 id=""&gt;第一部分&lt;/h2&gt;

&lt;p&gt;回顧歷史的鋪成, 介紹實驗的契機、挑選過程與最後成為交易員的海龜們背景多麼隨機性 (就當故事書讀讀吧)。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;無限多猴子理論 (Infinite Monkey Theory)&lt;/p&gt;
  
  &lt;p&gt;只要世界上有無限多個猴子在隨機敲打鍵盤，最後就會有一隻敲出 莎士比亞全集。&lt;/p&gt;
  
  &lt;p&gt;(筆者按: 書中只是提到這個理論, 但無論是 丹尼斯 或是 他的實驗伙伴 艾克哈特 &lt;em&gt;(William Eckhardt)&lt;/em&gt; 都不相信這是巧合帶來實驗的結果)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="mindmap"&gt;第二部分 交易策略 (Mind Map)&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用方式類似 Google&lt;/p&gt;&lt;/blockquote&gt;</description><link>http://localhost:2368/hai-gui-te-xun-ban-bi-ji/</link><guid isPermaLink="false">a9e4ea00-cd31-4d7d-923e-76b57ab14b5f</guid><category>順勢</category><category>Richard Dennis</category><category>海龜</category><category>Mind Map</category><category>理查.丹尼斯</category><dc:creator>Captain Vincent</dc:creator><pubDate>Mon, 07 Mar 2016 06:40:10 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;原名&lt;/p&gt;
  
  &lt;p&gt;The Complete TurtleTrader by &lt;strong&gt;Michael W. Covel&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;這是一部關於 理察.丹尼斯 (Richard Dennis) 訓練雜牌軍成為百萬交易員的故事(1983-1984)。不過絕大部分都被我在筆記中省略了 (笑)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;由來&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;海龜&lt;/strong&gt; 是丹尼斯給學生們的暱稱, 曾到新加坡參觀海龜培育場而受到了啟發, 「要像培育海龜般的那樣培育交易員」。&lt;/p&gt;

&lt;h2 id=""&gt;第一部分&lt;/h2&gt;

&lt;p&gt;回顧歷史的鋪成, 介紹實驗的契機、挑選過程與最後成為交易員的海龜們背景多麼隨機性 (就當故事書讀讀吧)。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;無限多猴子理論 (Infinite Monkey Theory)&lt;/p&gt;
  
  &lt;p&gt;只要世界上有無限多個猴子在隨機敲打鍵盤，最後就會有一隻敲出 莎士比亞全集。&lt;/p&gt;
  
  &lt;p&gt;(筆者按: 書中只是提到這個理論, 但無論是 丹尼斯 或是 他的實驗伙伴 艾克哈特 &lt;em&gt;(William Eckhardt)&lt;/em&gt; 都不相信這是巧合帶來實驗的結果)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="mindmap"&gt;第二部分 交易策略 (Mind Map)&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用方式類似 Google Map 的拖曳操作可以移動畫面, 右鍵可以彈出放大鏡的按鈕, 按壓放大鏡拖曳後可以 Zoom In/Out&lt;/p&gt;
&lt;/blockquote&gt;

&lt;iframe width="853" height="480" src="https://embed.coggle.it/diagram/Vt9MRT9kC8o93lZw/ba20a801476260b3885c5a005c35b6b9ce12bb13d385efd229574892c2083848" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;  

&lt;blockquote&gt;
  &lt;p&gt;在第二屆的學員們中, 提出了當時海龜策略槓桿底下背負的風險, 遠比老師 丹尼斯 設想的要高上許多。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;第三部分&lt;/h2&gt;

&lt;p&gt;實驗展開地後續, 在不平等的交易配額下導致內部崩裂、交易員間的猜忌; 而在混沌之中, 丹尼斯的交易身影也在一場公募基金的災難中退下舞台。&lt;/p&gt;

&lt;h2 id=""&gt;故事尾聲&lt;/h2&gt;

&lt;p&gt;敘述著 丹尼斯 及 海龜們 在各自離開之後的發展, 這中間有許多的風光但也有著些許唏噓, 並在受訪之後為我們留下分析、談論著他們之間為何誰才會是贏家的觀點, 畢竟在他們分道揚鑣後, 我們得從規則以外找些別的東西, 來區分是何能讓脫穎而出的人達到長期交易的成功並得以延續發光, 這邊列出書中提到的幾點 &lt;strong&gt;需保持心理強韌、具備企業家精神&lt;/strong&gt;, 也許就是這樣的人, 才能夠繼續把握機會順勢操盤人生的吧。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;企業家精神 (書中整理, 由Nancy Upton 及  Don Sexton 提出)&lt;/p&gt;
  
  &lt;ul&gt;
  &lt;li&gt;不妥協者：較低的妥協需求, 自立自強&lt;/li&gt;
  &lt;li&gt;情緒冷淡者：對人不一定冷漠, 不過也可能很明顯&lt;/li&gt;
  &lt;li&gt;高空跳傘者：比較不在意身體受傷, 但此特質會隨年齡改變&lt;/li&gt;
  &lt;li&gt;冒險者：喜歡冒險&lt;/li&gt;
  &lt;li&gt;社交圓滑者：比較具說服力&lt;/li&gt;
  &lt;li&gt;獨立自主：有較高的自立需求&lt;/li&gt;
  &lt;li&gt;求變者：喜歡新奇的方法&lt;/li&gt;
  &lt;li&gt;充滿活力：較需要且能較長時間工作&lt;/li&gt;
  &lt;li&gt;自我滿足：不需要他人認同, 但還是要組成人脈&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title>21st Century C / 21世紀 C 語言 筆記</title><description>&lt;blockquote&gt;
  &lt;p&gt;C 語言的演進, K&amp;amp;R (1978) -&gt; ANSI C89 (1989) -&gt; ISO C99 (1999) -&gt; C11 (2011)&lt;/p&gt;
  
  &lt;p&gt;POSIX (&lt;strong&gt;P&lt;/strong&gt;ortable &lt;strong&gt;O&lt;/strong&gt;perating &lt;strong&gt;S&lt;/strong&gt;ystem &lt;strong&gt;I&lt;/strong&gt;nterface of UNI&lt;strong&gt;X&lt;/strong&gt;) 標準, 由 IEEE 制定類  Unix 的作業系統在實作上共通的基礎 (API 的關聯、Shell的運作、命令列工具的的執行相關規範, 跟本篇最大的關聯是符合 POSIX 標準的系統, 也包含了提供 C 語言的編譯器)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;介紹內容&lt;/h2&gt;

&lt;p&gt;Basic Tool: GDB、Valgrind、&lt;/p&gt;</description><link>http://localhost:2368/21st-century-c/</link><guid isPermaLink="false">baa7b733-a6a7-466e-b381-2efbfd401ea0</guid><category>GDB</category><category>Valgrind</category><category>Gprof</category><category>Make</category><category>pkg-config</category><category>doxygen</category><dc:creator>Captain Vincent</dc:creator><pubDate>Fri, 04 Mar 2016 13:04:20 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;C 語言的演進, K&amp;amp;R (1978) -&gt; ANSI C89 (1989) -&gt; ISO C99 (1999) -&gt; C11 (2011)&lt;/p&gt;
  
  &lt;p&gt;POSIX (&lt;strong&gt;P&lt;/strong&gt;ortable &lt;strong&gt;O&lt;/strong&gt;perating &lt;strong&gt;S&lt;/strong&gt;ystem &lt;strong&gt;I&lt;/strong&gt;nterface of UNI&lt;strong&gt;X&lt;/strong&gt;) 標準, 由 IEEE 制定類  Unix 的作業系統在實作上共通的基礎 (API 的關聯、Shell的運作、命令列工具的的執行相關規範, 跟本篇最大的關聯是符合 POSIX 標準的系統, 也包含了提供 C 語言的編譯器)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=""&gt;介紹內容&lt;/h2&gt;

&lt;p&gt;Basic Tool: GDB、Valgrind、gprof、make、pkg-config、doxygen &lt;br&gt;
Autotools: Autoconf、Automake、libtool &lt;br&gt;
Useful Lib: libcURL、libGlib、libGSL、libSQLite3、libXML2&lt;/p&gt;

&lt;h4 id=""&gt;編譯階段&lt;/h4&gt;

&lt;p&gt;使用 pkg-config 顯示出使用該lib需要的 include、link 參數&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;pkg-config --libs [lib name]  
pkg-config --cflags [lib name]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;一般在編譯時, 使用額外 lib 在編譯時所需的下參數&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- lnaguage-bash"&gt;gcc -I[header path] -L[library path] -l[library name]  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;-I: 將路徑加入 include header 搜尋 path&lt;/li&gt;
&lt;li&gt;-L: 將路徑加入 Library 搜尋 path&lt;/li&gt;
&lt;li&gt;-l: 指定連結函式庫&lt;/li&gt;
&lt;li&gt;-D: 等同於 define symbol (ex. -Dxxx)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以搭配 pkg-config 使用 (但並非所有 lib 都有對 pkg-config 註冊)&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;gcc ｀pkg-config --cflags --libs [lib name]` -o [output name] [source file name]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id="linksharelibrary"&gt;執行期間的 Link  (Share Library)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;使用 Autotools, Libtool 會自動加入正確的旗標來搜尋使用的 lib (後面章節會介紹)&lt;/li&gt;
&lt;li&gt;透過 export LD_LIBRARY_PATH 來指定執行時的搜尋路徑&lt;/li&gt;
&lt;li&gt;在 makefile 中添加 &lt;code&gt;LDADD=-L[lib path] -Wl, -R[lib path]&lt;/code&gt; 
(-Wl 用來將後續用'逗號'隔開的 list 轉換成'空白'的 list 後傳給 linker)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h4 id="makefile"&gt;使用 Makefile 簡化編譯時冗長繁瑣的指令&lt;/h4&gt;

&lt;pre&gt;&lt;code class="language- language-makefile"&gt;P=program_name  
OBJECT=  
CFLAGS= -g -Wall -O3  
LDLIBS=  
CC=C99

$(P): $(OBJECT)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Makefile 範例)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$(var name) 表示變數, Shell使用 $Var 而 Makefile則要求必須以小括號括起來&lt;/li&gt;
&lt;li&gt;以冒號 ":" 區隔表示相依的關係&lt;/li&gt;
&lt;li&gt;以上的變數會在 make 的隱含規則中展開成執行的命令&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;除了上述範例中, 將變數值直接宣告在 Makefile 內, 額外將變數值傳給 Makefile 的方式有&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;export 進環境變數  &lt;/li&gt;
&lt;li&gt;將變數指派命令放在執行命令之前 (只限當次執行有效) &lt;br&gt;
&lt;em&gt;C 語言編譯的程式, 可在程式碼中透過 getenv 取得 1. 或 2. 指定的值&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;make 也允許從命令列設定變數&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;CFLAGS="-g -Wall" make // 針對 make 及 子程序設定環境變數 (上述方法2)  
make CFLAGS="-g -Wall" // 設定 makefile 變數 (上述方法3)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;make -p &amp;gt; rule.txt  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以查看 rule.txt 了解 make 的隱含規則&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Manual Page&lt;/p&gt;
  
  &lt;ul&gt;
  &lt;li&gt;&lt;p&gt;man 指令可以搜尋函式的使用手冊 (ex. &lt;code&gt;man printf&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;&lt;code&gt;man -k keyword&lt;/code&gt; 可以搜尋簡介&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;manual 分許多 section, section 1 為命令列、3為函式庫名稱 (man 3 printf 會列出 C 函式庫的文件)&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;vi 可將游標移到 keyword 上, 按 &lt;strong&gt;K&lt;/strong&gt; 查閱 manual page&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://zh.wikipedia.org/wiki/Here%E6%96%87%E6%A1%A3"&gt;Here文檔的介紹&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id="debug"&gt;Debug / 除錯&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-command-examples.html"&gt;GDB vs LLDB&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;set $ptr=&amp;amp;x[3] //expr int* $ptr = &amp;amp;x[3]  
p *($ptr++)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之後再重複按 &lt;code&gt;Enter&lt;/code&gt; 會執行前一動指令, 此技巧可走訪陣列, 甚至套用 link-list&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;p $  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$ 可表示前一次輸出變數存放的值, 但這邊 LLDB 測試無效&lt;/p&gt;

&lt;p&gt;在 .gdbinit 中可以 define macro 來整理複雜資料結構的輸出&lt;/p&gt;

&lt;h6 id="profiling"&gt;Profiling&lt;/h6&gt;

&lt;p&gt;Compile option 加上 &lt;code&gt;-pg&lt;/code&gt; 會為 gprof 準備程式, 指令 &lt;code&gt;gprof binary &amp;gt; profile&lt;/code&gt; 即可開始記錄, 結束後再打開 profile 看 log。 &lt;br&gt;
mac 上的分析可以參考 &lt;a href="http://stackoverflow.com/questions/11445619/profiling-c-on-mac-os-x"&gt;StackOverflow 提到的 Instruments&lt;/a&gt;&lt;/p&gt;

&lt;h6 id="valgrind"&gt;Valgrind&lt;/h6&gt;

&lt;p&gt;可以使用 Valgrind 偵測記憶體的使用錯誤(例子省略)&lt;/p&gt;

&lt;h6 id="unittest"&gt;Unit Test&lt;/h6&gt;

&lt;p&gt;使用 Glib 內建的 tool 來實作(省略), 求覆蓋率可透過在 Compile option 加上 &lt;br&gt;
&lt;code&gt;- fprofile-arcs -ftest-coverage -O0&lt;/code&gt;, 在執行程式後下指令 &lt;code&gt;gcov program.gcda&lt;/code&gt; 可顯示執行行數的百分比, 另外 program.c.cov 會顯示被測試到的次數&lt;/p&gt;

&lt;h6 id="doxygen"&gt;Doxygen&lt;/h6&gt;

&lt;p&gt;使用 Doxygen 來產生文件, 比起在程式碼中添加的說明, 搭配 Graphviz 產生的各類圖表在 trace code 幫助更大。&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id="autotool"&gt;Autotool 章節&lt;/h4&gt;

&lt;p&gt;在打包程式的部分目前常見的還有 CMake 可以使用, autotool的部分等以後有時間再回過頭來看吧... Ker Ker&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id="git"&gt;Git 版本控管章節&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://git-scm.com/book/zh-tw/v1"&gt;Git 中文參考資料&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id=""&gt;類似書中範例的參考&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://intermediate-and-advanced-software-carpentry.readthedocs.org/en/latest/c++-wrapping.html"&gt;Wrapping C/C++ for Python&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id=""&gt;變數的存取&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://www.csee.umbc.edu/courses/undergraduate/202/spring07/Lectures/ChangSynopses/modules/m05-scope/slides.php?print"&gt;Reference&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Life Time
&lt;ul&gt;&lt;li&gt;static: 直到程式結束為止才會釋放&lt;/li&gt;
&lt;li&gt;automatic: 離開 Scope (block) 的時候即會馬上釋放&lt;/li&gt;
&lt;li&gt;dynamic: 要手動 free 才會釋放&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Scope
&lt;ul&gt;&lt;li&gt;Local scope: 在 block 內可被看見&lt;/li&gt;
&lt;li&gt;Class scope: Class 內的成員才可看見&lt;/li&gt;
&lt;li&gt;Namespace scope: 同一個 namespace 才可看見&lt;/li&gt;
&lt;li&gt;File scope: 相同檔案內才可看見&lt;/li&gt;
&lt;li&gt;Global scope: 任何地方皆可看見, 除非被隱藏&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id="structvsarray"&gt;Struct vs Array&lt;/h6&gt;

&lt;p&gt;在記憶體的使用上, 傳遞 struct 時會整個被複製出去, 但 array 僅會傳遞別名 (指向相同的記憶體空間)。&lt;/p&gt;

&lt;p&gt;另外, Array 目前已可提供執行期才決定大小 (透過 run time 得知的值來宣告 array), 並且不用手動 free。&lt;/p&gt;

&lt;h6 id="point"&gt;Point&lt;/h6&gt;

&lt;pre&gt;&lt;code class="language- language-clike"&gt;ptr[0] = *(ptr+0) // 這邊僅表示左右兩者相等, 非賦值  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(但是 void 的 point 是無法以陣列的方式取值, 因為缺少了型別無法計算位移量)。&lt;/p&gt;

&lt;h6 id="nan"&gt;NaN&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;N&lt;/strong&gt;ot-&lt;strong&gt;A&lt;/strong&gt;-&lt;strong&gt;N&lt;/strong&gt;umber, 使用 NaN 作為例外回傳值, 另外 NaN 具備的特性, 即使 &lt;code&gt;NaN == NaN&lt;/code&gt; 也會回傳 false, 只能用 &lt;code&gt;isnan()&lt;/code&gt; 來檢查。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NaN 的值可透過 0/0. 來得到 (0/0 會產生錯誤, 因為整數無法表示 NaN)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h4 id=""&gt;介紹容易犯錯的章節&lt;/h4&gt;

&lt;h6 id="macro"&gt;Macro&lt;/h6&gt;

&lt;p&gt;在巨集的外部需加上大括號, 好處是可限制展開內容的變數生存空間, 也可降低展開後造成問題的風險。&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;gcc -E [source file name]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;加上 &lt;code&gt;-E&lt;/code&gt; option 之後只會執行前置處理器的部分, 並從標準輸出中印出結果, 可搜尋巨集擴展的部分來除錯。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;前置處理器中的小技巧&lt;/p&gt;
  
  &lt;ul&gt;
  &lt;li&gt;&lt;p&gt;如果有兩個連續的字串出現, 箝制處理器會將兩個字串合併為一個&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;&lt;code&gt;sizeof()&lt;/code&gt; 是個 compile time 的 operator&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h6 id="const"&gt;const&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;int const : 常數整數&lt;/li&gt;
&lt;li&gt;int const * : 一個可變動的指標, 指向常數整數&lt;/li&gt;
&lt;li&gt;int * const : 一個常數指標, 指向可變動的整數&lt;/li&gt;
&lt;li&gt;int * const * : 一個指向常數指標的指標&lt;/li&gt;
&lt;li&gt;int const * * : 一個指標的指標, 指向常數整數&lt;/li&gt;
&lt;li&gt;int const * const * : 一個指向常數指標的指標, 常數指標指向常數整數


&lt;blockquote&gt;
  &lt;p&gt;前後相鄰的 int 與 const 可以互換, 意義仍不變。&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
  &lt;/ul&gt;
  struct 內的變數, 透過將 pointer 傳出之後仍舊無法受到 const 的保護, 需特別注意。 &lt;p&gt;&lt;/p&gt;


&lt;pre&gt;&lt;code class="language- language-clike"&gt;int *ptr;  
int const **constptr = &amp;amp;ptr  
int const const_var = 10;  
*constprt = &amp;amp;const_var // 等同 ptr = &amp;amp;const_var
*prt = 20 // 等同於改變了 const_var 的值
&lt;/code&gt;&lt;/pre&gt;


範例顯示透過指標操作 const 需要小心



&lt;hr&gt;




&lt;h4 id=""&gt;好用工具介紹&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;asprintf 來做文字轉換 (函式會自行 malloc, 但需手動 free)&lt;/li&gt;
&lt;li&gt;Stopif 巨集的使用可在函式 return 異常值時提供保護&lt;/li&gt;
&lt;li&gt;strdup 可以回傳複製字串後的內容&lt;/li&gt;
&lt;li&gt;strtok 以 strtok_r or strtok_s 取代 (thread safe)&lt;/li&gt;
&lt;li&gt;mmap 可以解決讀取檔案比記憶體大的問題&lt;/li&gt;
&lt;li&gt;libxml 提供處理 unicode 的函式庫
&lt;ul&gt;&lt;li&gt;語言相關處理的 keywords : Gettext 提供翻譯框架、xgettext 產生需要翻譯的字串索引&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h4 id=""&gt;特殊技巧&lt;/h4&gt;

&lt;pre&gt;&lt;code class="language- language-clike"&gt;define test(i, ...) for(int index=0; index&amp;lt;i; i++) {__VA__ARGS__}  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;展開時, 在第二個參數之後 (從 &lt;code&gt;...&lt;/code&gt; 刪節號之後的參數都會被展開至 &lt;code&gt;__VA__ARGS__&lt;/code&gt; 的位置&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language- language-clike"&gt;int iArray[] = {0, 1, 2, 3}; //賦值用  
function( (iArray[]){0,1,2,3} ) //傳遞用  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;複合常量的寫法&lt;/li&gt;
&lt;li&gt;透過前兩項技巧可以寫出向量化的 macro (展開成多個處理相同事情的 Snippets)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language- language-clike"&gt;struct stTest  
{
    int first;
    int second;
};
struct stTest temp = {.first=1};  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language- language-clike"&gt;int list[5] = {[3]=4, [4]=5};  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;指定初始子, 未指定會賦值 0&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language- language-clike"&gt;__attribute__((format(printf,m,n)))  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用 __attribute__ 來控制變量輸入的問題, &lt;a href="http://huenlil.pixnet.net/blog/post/26078382-%5B%E8%BD%89%5Dgnu-c-__attribute__-%E6%A9%9F%E5%88%B6%E7%B0%A1%E4%BB%8B"&gt;參考資訊&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(最後兩章的翻譯讀起來有點怪, 加上應用層面比較難參考, 就整理到這邊吧 : ) 收工~)&lt;/p&gt;</content:encoded></item><item><title>Python 第一步 virtualenv</title><description>&lt;p&gt;剛開始接觸 Python 的時候, 最先了解到的是開發者社群的貢獻, 有別於 C/C++ 這類型語言給我的感覺, 在開發上使用第三方的函式庫, 是相當方便以及普遍的事情。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;a href="https://pypi.python.org/pypi"&gt;Python Package Index (PyPI)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;PyPI is the default Package Index for the Python community. It is open to all Python developers to consume and distribute their distributions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;早期 Python 在套件的安裝上有數種工具可以選擇, 不過目前比較主流的是透過 &lt;strong&gt;PIP&lt;/strong&gt; 來安裝套件 (搜尋、安裝已經建立在 PyPI 上的套件), 這邊會先建議在開始安裝其它套件之前, 可以先安裝名為 &lt;strong&gt;virtualenv&lt;/strong&gt;&lt;/p&gt;</description><link>http://localhost:2368/python-xin-shou-ru-men/</link><guid isPermaLink="false">2f5401a3-206c-4e83-9d88-7cbc63958609</guid><category>python</category><category>pip</category><category>virtualenv</category><dc:creator>Captain Vincent</dc:creator><pubDate>Wed, 24 Feb 2016 18:07:00 GMT</pubDate><content:encoded>&lt;p&gt;剛開始接觸 Python 的時候, 最先了解到的是開發者社群的貢獻, 有別於 C/C++ 這類型語言給我的感覺, 在開發上使用第三方的函式庫, 是相當方便以及普遍的事情。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;a href="https://pypi.python.org/pypi"&gt;Python Package Index (PyPI)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;PyPI is the default Package Index for the Python community. It is open to all Python developers to consume and distribute their distributions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;早期 Python 在套件的安裝上有數種工具可以選擇, 不過目前比較主流的是透過 &lt;strong&gt;PIP&lt;/strong&gt; 來安裝套件 (搜尋、安裝已經建立在 PyPI 上的套件), 這邊會先建議在開始安裝其它套件之前, 可以先安裝名為 &lt;strong&gt;virtualenv&lt;/strong&gt;, 這個用來建立獨立 python 執行環境的套件, 之後就可以愉快體驗 &lt;del&gt;也不用擔心系統髒髒的&lt;/del&gt;。&lt;/p&gt;

&lt;p&gt;安裝方式很簡單, 如下&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;pip install virtualenv  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先透過 pip 安裝 virtualenv, 安裝完後可以執行的命令如下&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;virtualenv [ENVNAME]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在當前目錄底下建立一個資料夾, 裡面會存放可獨立運行的 python 執行環境&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;cd [ENVNAME]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;移動至該路徑下&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;source bin/activate  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;啟用這個執行環境, 啟用後的效果包含之後安裝的套件會在此路徑下, 以及執行的 python 程式會使用此路徑下的 library&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;deactivate  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用完畢後可以退出這個虛擬環境, 嗯~ 系統除了多了這個工作路徑的資料夾其他依舊美好。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;補充&lt;/p&gt;
  
  &lt;p&gt;在虛擬環境的管理上其實也有套件可以幫忙, 好處是不會讓建立虛擬環境的資料夾分散在各處 (集中放置)、切換流程更加便利, 這邊要介紹的就是透過 &lt;a href="http://virtualenvwrapper.readthedocs.org/en/latest/index.html"&gt;&lt;strong&gt;virtualenvwrapper&lt;/strong&gt;&lt;/a&gt; 來處理&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;pip install virtualenvwrapper  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安裝套件方式一樣是透過 pip&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export WORKON_HOME=$HOME/PyEnv  
export PROJECT_HOME=$HOME/Devel  
source /usr/local/bin/virtualenvwrapper.sh  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;將以上貼入 .bashrc or .zshrc 檔 (是根據你所使用的 Shell 預設會開啟時會載入的 rc 檔)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WORKON_HOME 是虛擬環境配置的路徑&lt;/li&gt;
&lt;li&gt;PROJECT_HOME 暫時用不到&lt;/li&gt;
&lt;li&gt;最後 source 腳本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;介紹常用的功能&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;mkvirtualenv [-i package] [-r requirements_file] [virtualenv options] [ENVNAME]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;建立虛擬環境&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;lsvirtualenv [-b] [-l] [-h]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;列出存在的虛擬環境&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;rmvirtualenv [ENVNAME]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;移除虛擬環境&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;$ workon [ENVNAME]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;啟動虛擬環境&lt;/p&gt;

&lt;p&gt;最後退出虛擬環境的方式一樣是用 &lt;code&gt;deactivate&lt;/code&gt;。&lt;/p&gt;</content:encoded></item><item><title>MT4</title><description>&lt;blockquote&gt;
  &lt;p&gt;MT4 (&lt;a href="http://www.metatrader4.com/"&gt;Metatrade 4&lt;/a&gt;) 以及 MT5 (&lt;a href="http://www.metatrader5.com/"&gt;Metatrade 5&lt;/a&gt;) 都是由俄羅斯公司 MetaQuotes Software Corp 所開發的交易平台, 並由各個外匯公司對該平台提供服務。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;MQL4  
|-- Experts (EA 又稱專家系統, 執行交易策略的文件)
|-- Files (程式中使用到的外部檔案)
|-- Images (程式中使用的點陣圖)
|-- Include (Header檔)
|-- Indicators (建立指標的文件)
|-- Libraries
|-- Logs
|-- Presets (預設屬性區)
|-- Projects
`-- Scripts (腳本檔)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;檔案存放路徑結構&lt;/p&gt;

&lt;p&gt;MQL4/MQL5 為該交易平台所撰寫的程式語言, 語法的部分類似 C/C+&lt;/p&gt;</description><link>http://localhost:2368/mt4/</link><guid isPermaLink="false">b3f6f3fb-3745-41fa-b9de-7efcec901737</guid><category>MT4</category><category>MQL4</category><category>外匯</category><category>自動交易</category><category>程式</category><dc:creator>Captain Vincent</dc:creator><pubDate>Wed, 24 Feb 2016 09:18:15 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;MT4 (&lt;a href="http://www.metatrader4.com/"&gt;Metatrade 4&lt;/a&gt;) 以及 MT5 (&lt;a href="http://www.metatrader5.com/"&gt;Metatrade 5&lt;/a&gt;) 都是由俄羅斯公司 MetaQuotes Software Corp 所開發的交易平台, 並由各個外匯公司對該平台提供服務。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;MQL4  
|-- Experts (EA 又稱專家系統, 執行交易策略的文件)
|-- Files (程式中使用到的外部檔案)
|-- Images (程式中使用的點陣圖)
|-- Include (Header檔)
|-- Indicators (建立指標的文件)
|-- Libraries
|-- Logs
|-- Presets (預設屬性區)
|-- Projects
`-- Scripts (腳本檔)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;檔案存放路徑結構&lt;/p&gt;

&lt;p&gt;MQL4/MQL5 為該交易平台所撰寫的程式語言, 語法的部分類似 C/C++ (筆者的感覺其實只是 C/C++ 的子集, 所以有學過 C/C++的人應該不太陌生), 故詳細語法在這邊不是著墨的重點。&lt;/p&gt;

&lt;h2 id="mql45"&gt;MQL4/5 撰寫的程式碼用途&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;EA 連結至特定圖表後的自動交易系統, 可用於回測&lt;/li&gt;
&lt;li&gt;Indicators 編寫透過自訂公式來計算數據產生的指標&lt;/li&gt;
&lt;li&gt;Scripts 執行單一功能的程式碼, 附加至圖表時會立即執行一次&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="mql4c"&gt;MQL4 語法與標準 C 不同之處&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h6 id="datatypehttpsdocsmql4combasistypes"&gt;&lt;strong&gt;&lt;a href="https://docs.mql4.com/basis/types"&gt;Data Type&lt;/a&gt;&lt;/strong&gt; (範例皆轉自官方)&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language- language-clike"&gt;string svar="This is a character string";  
string svar2=StringSubstr(svar,0,4);  
Print("Copyright symbol\t\x00A9");  
FileWrite(handle,"This string contains a new line symbols \n");  
string MT4path="C:\\Program Files\\MetaTrader 4";  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;color&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language- language-clike"&gt;//--- Literals
C'128,128,128'    // Gray  
C'0x00,0x00,0xFF' // Blue  
//color names
clrRed               // Red  
clrYellow            // Yellow  
clrBlack             // Black  
//--- Integral representations
0xFFFFFF          // White  
16777215          // White  
0x008000          // Green  
32768             // Green  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Datetime&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language- language-clike"&gt;datetime NY=D'2015.01.01 00:00';     // Time of beginning of year 2015  
datetime d1=D'1980.07.19 12:30:27';  // Year Month Day Hours Minutes Seconds  
datetime d2=D'19.07.1980 12:30:27';  // Equal to D'1980.07.19 12:30:27';  
datetime d3=D'19.07.1980 12';        // Equal to D'1980.07.19 12:00:00'  
datetime d4=D'01.01.2004';           // Equal to D'01.01.2004 00:00:00'  
datetime compilation_date=__DATE__;             // Compilation date  
datetime compilation_date_time=__DATETIME__;    // Compilation date and time  
datetime compilation_time=__DATETIME__-__DATE__;// Compilation time  
//--- Examples of declarations after which compiler warnings will be returned
datetime warning1=D'12:30:27';       // Equal to D'[date of compilation] 12:30:27'  
datetime warning2=D'';               // Equal to __DATETIME__  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h6 id="preprocessor"&gt;&lt;strong&gt;提供 Preprocessor 對程式屬性的設定&lt;/strong&gt;&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://docs.mql4.com/basis/preprosessor/compilation"&gt;#Properties&lt;/a&gt; (參考官方介紹)&lt;/p&gt;

&lt;h2 id="mql4"&gt;MQL4 程式介紹&lt;/h2&gt;

&lt;h4 id=""&gt;報價系統跳動單位&lt;/h4&gt;

&lt;p&gt;外匯交易單位為一手 (部份券商交易提供較小單位的操作 ex. 0.1手、0.01手), 而這邊一手實際上指的是交易量 (而非價) 的單位, &lt;strong&gt;一手表示為 100K 單位貨幣&lt;/strong&gt; (依前方的貨幣為主 ex. 一手 EURUSD 的單, 金額為 100K EUR)&lt;/p&gt;

&lt;p&gt;而在外匯交易的報價是以點 (Pips) 為跳動單位, 但在程式交易內的跳動則是用 Points 來替代, 包含允許滑點 (Slippage) 的參數也都是以 Points 來設定, 但 Points 在各券商報價系統中實際為何不一定 (如果報價單位有提供到步 則 1 Point = 1步, 若只有到點 則 1 Points = 1點)。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pips 稱 &lt;strong&gt;點&lt;/strong&gt;, 而比 Pips 再小一位數的單位則稱 &lt;strong&gt;小點&lt;/strong&gt; 或是 &lt;strong&gt;步&lt;/strong&gt; (1點 = 10步)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=""&gt;下單種類&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;市價單 (OP&lt;em&gt;BUY, OP&lt;/em&gt;SELL)&lt;/li&gt;
&lt;li&gt;順勢單 (OP&lt;em&gt;BUYSTOP, OP&lt;/em&gt;SELLSTOP)
超過指定價格買 BUY單 或 SELL單 (不保證履約價)&lt;/li&gt;
&lt;li&gt;逆勢單 (OP&lt;em&gt;BUYLIMIT, OP&lt;/em&gt;SELLLIMIT) 成交價在限制價格內才會買進 (會保證成交價)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(外匯券商所允許的下單方式為)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;現價以上, 可以下 Buy-Stop, Sell-Limit&lt;/li&gt;
&lt;li&gt;現價以下, 可以下 Buy-Limit, Sell-Stop
&lt;img src="https://farm2.staticflickr.com/1577/25187105571_52e4ff737f.jpg" alt=""&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=""&gt;&lt;strong&gt;特殊函數&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://docs.mql4.com/basis/function/events"&gt;More Detail&lt;/a&gt; (參考官方介紹)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OnInit()－程式起始時會執行一次&lt;/li&gt;
&lt;li&gt;OnTick()－圖表 Event 會觸發執行的函式&lt;/li&gt;
&lt;li&gt;OnTimer()－時間 Event 會觸發執行的函式&lt;/li&gt;
&lt;li&gt;OnDeinit()－結束時會執行的函式&lt;/li&gt;
&lt;li&gt;OnTester()－測試 Event 會觸發執行的函式&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="index"&gt;&lt;strong&gt;關於時序物件的 Index&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;當前的物件皆為 ０, 時間愈往倒退值愈大
ex. 收盤價, 今日為 Close[0], 昨日為 Close[1]...etc&lt;/p&gt;

&lt;h4 id="api"&gt;&lt;strong&gt;交易 API 介紹&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;這邊介紹一些關於撰寫 EA 時會經常使用到的 API&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order Send&lt;/strong&gt; : 下單 API, 預掛單也是透過此 API&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-clike"&gt;OrderSend( str symbol, int cmd=OP_BUY|OP_SELL|OP_BUYSTOP|OP_SELLSTOP|OP_BUYLIMIT|OP_SELLLIMIT, dbl volume, dbl price, int slippage, dbl stoploss, dbl takeprofit, str comment=NULL, int magic=0, dtt expiration=0, clr arrow_color=CLR_NONE )  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;CMD - 顧名思義, 下單可執行的操作 (四種下單操作)&lt;/li&gt;
&lt;li&gt;Volume - 幾手 (外匯下單的單位)&lt;/li&gt;
&lt;li&gt;Price - 價位&lt;/li&gt;
&lt;li&gt;Slippage - 允許最大滑點&lt;/li&gt;
&lt;li&gt;Stop Loss - 停損價位&lt;/li&gt;
&lt;li&gt;Take Profit - 停利價位&lt;/li&gt;
&lt;li&gt;Comment - 註解&lt;/li&gt;
&lt;li&gt;Magic - 訂單識別碼&lt;/li&gt;
&lt;li&gt;DTT Expiration - 此單的有效期, 大部分交易商取消&lt;/li&gt;
&lt;li&gt;Arrow Color - 標記在走勢圖上的下單點, &lt;a href="https://docs.mql4.com/constants/objectconstants/webcolors"&gt;顏色參考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Order Modify&lt;/strong&gt; : 修改訂單的 API&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-clike"&gt;OrderModify( int ticket, dbl price, dbl stoploss, dbl takeprofit, dtt expiration, clr color=CLR_NONE )  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id="ea"&gt;&lt;strong&gt;EA 程式架構&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;(待補充)&lt;/p&gt;</content:encoded></item><item><title>Sublime Text 教學</title><description>&lt;blockquote&gt;
  &lt;p&gt;筆者按: 網路上關於 Sublime 的教學其實已經多如繁星, 所以本篇說為教學, 充其量目的也只是敝人的備忘錄而已 (笑)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=""&gt;引言&lt;/h4&gt;

&lt;p&gt;在前公司待了三年多快四年, 一直都是在 Windows 上透過 SSH 連到 Linux 的 build server 做開發, 常使用的語言為 C++、C, 而在前公司最普遍的 trace code 工具是有名的 &lt;del&gt;Source Insight&lt;/del&gt;, 但對我來說有以下的缺點:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;非跨平台&lt;/strong&gt; &lt;br&gt;
我個人電腦使用的環境是 OSX, 所以對於開發工具需在公司跟家裡做切換, 使用的意願上其實是非常低, 不外乎在工具的使用也是有所謂的學習曲線, 需分散心力來維持兩套是滿浪費精力的。
(要在 Mac 上執行 Windows 程式就我所知也有三種方式, 一種是安裝雙系統共存, 再來是使用虛擬機器VMWare, 最後則是透過 Wine 來安裝, 但會喜歡使用 Mac 的人其實對優雅都有種偏執, 所以我想還是能省則省吧!&lt;/li&gt;&lt;/ol&gt;</description><link>http://localhost:2368/sublime-jiao-xue/</link><guid isPermaLink="false">4c4675c9-609b-459f-87e2-f2eb84fcd1b9</guid><category>Sublime</category><category>PackageControl</category><dc:creator>Captain Vincent</dc:creator><pubDate>Mon, 22 Feb 2016 18:24:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;筆者按: 網路上關於 Sublime 的教學其實已經多如繁星, 所以本篇說為教學, 充其量目的也只是敝人的備忘錄而已 (笑)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=""&gt;引言&lt;/h4&gt;

&lt;p&gt;在前公司待了三年多快四年, 一直都是在 Windows 上透過 SSH 連到 Linux 的 build server 做開發, 常使用的語言為 C++、C, 而在前公司最普遍的 trace code 工具是有名的 &lt;del&gt;Source Insight&lt;/del&gt;, 但對我來說有以下的缺點:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;非跨平台&lt;/strong&gt; &lt;br&gt;
我個人電腦使用的環境是 OSX, 所以對於開發工具需在公司跟家裡做切換, 使用的意願上其實是非常低, 不外乎在工具的使用也是有所謂的學習曲線, 需分散心力來維持兩套是滿浪費精力的。
(要在 Mac 上執行 Windows 程式就我所知也有三種方式, 一種是安裝雙系統共存, 再來是使用虛擬機器VMWare, 最後則是透過 Wine 來安裝, 但會喜歡使用 Mac 的人其實對優雅都有種偏執, 所以我想還是能省則省吧!)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用介面非常醜&lt;/strong&gt; &lt;br&gt;
這可能主觀意識成分居多, 而且多半應該是來自一種對於 Windows 視窗樣式的厭惡吧! 但気持ち (Kimochi) 有時也是這麼重要～ (攤)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要$$&lt;/strong&gt; &lt;br&gt;
&lt;del&gt;雖然公司都...&lt;/del&gt;, 嗯, 我什麼都沒說。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;笨重&lt;/strong&gt; &lt;br&gt;
匯入專案以及建立 Source tree 需要滿長的時間 (尤其是龐大的專案時), 加上使用起來一直有種跟不上思緒的頓感 (&lt;del&gt;哈味&lt;/del&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模糊搜尋做得不夠好&lt;/strong&gt; &lt;br&gt;
小弟記憶力一直不太好, 所以這功能也滿在意的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最後當工作快滿一年的時候, 經由一位快離職的同事分享, 開始認識了 Sublime, 也就一直擁抱到現在了。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id="step1installsublime"&gt;Step 1. Install Sublime&lt;/h2&gt;

&lt;p&gt;首先可以先至官網抓取最新的版本 &lt;a href="http://www.sublimetext.com/2"&gt;Sublime2&lt;/a&gt;、&lt;a href="http://www.sublimetext.com/3"&gt;Sublime3&lt;/a&gt;, 跟一般平台上的應用程式安裝方式無異 (所以這邊省略讓各位自行摸索一下), 接著要 &lt;strong&gt;安裝最重要的套件 Package Control x3&lt;/strong&gt; (筆者懶得打三遍, 但希望你們明白這真的很重要!), 有點類似 Ubuntu 的 apt-get、Mac 的 Homebrew、Python 的 Pip、Node.js 的 npm 關係, 這是一個屬於 Sublime 套件管理的 Plugin (由於實在太方便了, 沒意外的話應該是每個用戶必先安裝, &lt;del&gt;除非天生反骨&lt;/del&gt;)。&lt;/p&gt;

&lt;h2 id="step2installpackagecontrol"&gt;Step 2. Install Package Control&lt;/h2&gt;

&lt;p&gt;Package Control的安裝方式也很簡易 &lt;a href="https://packagecontrol.io/installation"&gt;Package Control安裝頁面&lt;/a&gt; 有提供 Sublime Text 2 跟 Sublime Text 3 的 Command, 執行 Sublime 後按 &lt;code&gt;Ctrl + `&lt;/code&gt; (`是鍵盤最左上角那個) 叫出 Sublime 的 Console Panel (或是透過操作畫面上方的 Menu 選單 &lt;code&gt;View -&amp;gt; Show Console&lt;/code&gt; 也可以叫出)&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1513/24572921463_63fa373e0d.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;複製貼上你下載版本的指令進去按 &lt;code&gt;Enter&lt;/code&gt; 即可 (注意不要複製到行尾或行頭多餘空白格), 安裝完成之後可以再按一次按 &lt;code&gt;Ctrl + `&lt;/code&gt; 或是 &lt;code&gt;ESC&lt;/code&gt; 關掉Console。&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1704/24569074674_1c37755a8d_z.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;此時已經可以執行 Package Control 的相關指令, 方式一樣是兩種 (這部分的操作很頻繁, 所以筆者平時都是以快速鍵操作為主)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;透過操作畫面上方的 Menu 選單 &lt;code&gt;Sublime Text -&amp;gt; Preference -&amp;gt; Package Control&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;按 &lt;code&gt;Ctrl/Cmd(Windows/Mac) + Shift + P&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1469/24569403644_79a1f874f2.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;出現輸入框後, 可以針對 Package的操作輸入以下 Keywords (ex. install、remove、list)&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1619/25173739056_94164dac33_z.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;常見的操作說明如下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;List Package&lt;/strong&gt;: 列出已安裝的 Package (這邊可以試著鍵入 list, 輸入框的模糊搜尋會幫你選取到match 的指令, 相當方便的使用者體驗)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Install Package&lt;/strong&gt;: 左下會有個移動的等號 "=" 表示正在搜尋可以安裝的Package, 耐心等待跑完之後, 會彈出類似下拉式的選單供選擇 (挑選欲安裝的Package一樣可以鍵入關鍵字, 讓模糊搜尋幫助你挑選)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remove Package&lt;/strong&gt;: 列出已安裝的Package, 提供選取刪除&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外, 在挑選 Plugin 安裝的部分, 除了可以先上網看看相關領域開發者都推薦使用的之外, 也可上 &lt;a href="https://packagecontrol.io/packages/Package%20Control"&gt;Package Control 官網&lt;/a&gt; 透過一些關鍵字來尋找, 跟在Sublime裡面搜尋的差別在於, 官網上的會提供 Rank 讓你知道這個 Package 被安裝的熱門程度, 較多人使用的 Plugin 在維護跟品質上都相對比較有保障。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;註&lt;/p&gt;
  
  &lt;p&gt;Cmd = Command key define in Mac Keyboard&lt;/p&gt;
  
  &lt;p&gt;&lt;code&gt;Ctrl/Cmd(Windows/Mac) + Shift + P&lt;/code&gt;, 透過這組快速鍵叫出來的是 Sublime 的 Command Palette (也可從 Menu 選單裡的 Tool 選項叫出來), 透過這個 Command Palette 可用來呼叫許多其他 Plugin 預設的功能, 所以絕大部份的時候只需要記得這個快速鍵, 就已經相當方便了。&lt;/p&gt;
  
  &lt;p&gt;Ex. git plugin也是在這個輸入框內做操作&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="step3"&gt;Step 3. 推薦一些筆者安裝使用的套件&lt;/h2&gt;

&lt;p&gt;(這裡先介紹一般通用的套件)&lt;/p&gt;

&lt;p&gt;透過 Package Control 都可以輕易的 Install 以下的 Plugin 協助你提升工作效率, 而需注意的是部分 Plugin 安裝之後, 有時會需要做一些客製化的調整 (例如修改 Package Setting 檔, 從 Menu 選單 Preferences -&gt; Package Setting -&gt; 挑選你要修改的 Plugin)&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1586/25174133666_ec6ba6156d_z.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;筆者似乎從 Sublime Text 3 開始就不能直接修改 Default 的 Setting, 需要打開 User 的 Setting 來做變更 (如上圖), 不過這也是建立良好修改習慣的開始。&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id="highlightwordshttpspackagecontroliopackageshighlightwords"&gt;&lt;a href="https://packagecontrol.io/packages/HighlightWords"&gt;HighlightWords&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;這個套件的使用來自於 Source Insight 裡我覺得很方便的功能, 在 Source Insight 裡透過 &lt;code&gt;Shift + F8&lt;/code&gt; 來常駐 (持續性) 的標記某個單詞 (同時也會標記這整個文本裡所有出現的地方, 有助於 trace code), 但在 Sublime 中, 雖然選取文字時會幫你標記, 但滑鼠點擊它處則標記即消失, 無法保持持續標記 (&lt;mark&gt;Highlight&lt;/mark&gt;) 的狀態, 另外在剛接觸這個套件的版本所提供的方式, 是透過快速鍵後只會彈出最下排一個輸入框, 提供輸入想標記的單詞, 而要取消標記也是刪除這輸入框裡的內容, 隨著我跟前同事私下研究改進, 目前已可透過 &lt;code&gt;Cmd + Shift + H&lt;/code&gt; 來 Highlight 游標目前停留的字詞, 並對同樣的字詞再按一次快速鍵則取消標記, 使用方式已與Source Insight無異, 甚至更好用。&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id="brackethighlighterhttpspackagecontroliopackagesbrackethighlighter"&gt;&lt;a href="https://packagecontrol.io/packages/BracketHighlighter"&gt;BracketHighlighter&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Trace code 滿常需要的除了前面標記變數的功能以外, 另外也需要幫忙判斷括號從哪括到哪, 這Plugin就提供了這樣的的幫助。&lt;/p&gt;

&lt;p&gt;注意, 這邊筆者會將Setting修改成如下, 以呈現較佳的視覺效果&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-json"&gt;"default": {
"icon": "dot",
// BH1's original default color for reference
"color": "entity.name.class",
//"color": "brackethighlighter.default",
"style": "block"
},
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h4 id="ctagshttpspackagecontroliopackagesctags"&gt;&lt;a href="https://packagecontrol.io/packages/CTags"&gt;Ctags&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;也是在 trace code 方面個人覺得非常好用的 Plugin 之一, 先介紹 ctags 本身是一個專門幫忙對 soruce code、header file 產生 index file 用的工具, 且在一開始最早僅支援 C, 後來延伸至今已可支援以下語言&lt;/p&gt;

&lt;p&gt;Ant、Asm、Asp、Awk、Basic、BETA、C、C++、C#、Cobol、DosBatch、Eiffel、Erlang、Flex、Fortran、HTML、Java、JavaScript、Lisp、Lua、Make、MatLab、OCaml、Pascal、Perl、PHP、Python、REXX、Ruby、Scheme、Sh、SLang、SML、SQL、Tcl、Tex、Vera、Verilog、VHDL、Vim、YACC&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;可以透過 Shell 底下的 Command 來查詢支援的語言&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;ctags --list-languages  
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;另外 ctags 本身也可以支援對語言或副檔名做延伸的定義&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ex. 在Sublime中使用的話, 在 Ctags 的 Plugin Setting 內加入下面這句 (等於將後面參數傳給 ctags )  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-json"&gt;"opts" : ["--langmap=C:+.mq4", "--extra=+q", "--fields=+Saim", "--c-kinds=+lpx", "--c++-kinds=+lpx", "-R"],
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;--extra=+q --fields=+Saim&lt;/strong&gt; 指名要建立的 tags 包含 Class 內 member 的資訊&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--c-kinds=+lpx --c++-kinds=+lpx&lt;/strong&gt; 是用來對底下參數打開
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;l&lt;/strong&gt;  local variables [off]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;  function prototypes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;  external and forward variable declarations [off]&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-R&lt;/strong&gt; 則是整個目錄底下遞迴的方式去循環查找建立 index&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--langmap=C:+.mq4&lt;/strong&gt; 是筆者想針對 MT4 平台開發程式, 副檔名使用的是 mq4, 但語法本身很接近 C 語言, 所以 extend C parser 來幫忙建立 tag file&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;另外透過以下指令可以看 ctags 對每個語言建立 index 的詳細程度, 部分可供 On/Off&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class="language- language-bash"&gt;ctags --list-kinds  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上大概介紹完ctags可以做到的事後, 就要開始介紹如何安裝。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mac Shell : brew install ctags (Mac 有自帶的 ctags 但無法使用, 記得要抓新的, 筆者使用的是 Exuberant Ctags 5.8)&lt;/li&gt;
&lt;li&gt;Ubuntu Shell: apt-get install ctags&lt;/li&gt;
&lt;li&gt;Windows: 有點久遠, 大概有執行可以抓下來安裝吧&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;裝完之後記得修改User Setting加入&lt;/p&gt;

&lt;pre&gt;&lt;code class="language- language-json"&gt;"command": "/usr/local/Cellar/ctags/5.8_1/bin/ctags",
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;後面字串需對應到實際安裝 ctags 的執行檔路徑, 這樣便可以開始建立 index 使用了。
&lt;img src="https://farm2.staticflickr.com/1579/25123928811_0ef0bcb02c_z.jpg" alt=""&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id="blockcursoreverywherehttpspackagecontroliopackagesblock20cursor20everywhere"&gt;&lt;a href="https://packagecontrol.io/packages/Block%20Cursor%20Everywhere"&gt;Block Cursor Everywhere&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;在文字編輯器內要尋找鍵盤的游標有時候也是種困擾, 這個 Plugin 可以幫忙在 Vim 指令 mode 下提供 &lt;mark&gt; 方塊形&lt;/mark&gt; 的鍵盤游標。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Vim Mode&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;如果有使用過Linux開發的話, 常用的 Console 文字編輯器有兩套 Vi/Vim or Emac (筆者是只接觸過 vim), 在 Vim 底下有提供兩種 mode: 指令 mode 以及編輯 mode, 以往已經使用習慣 Vim 的朋友可以透過修改 Sublime 的 Setting file 模擬 Vim, 分別是將&lt;/p&gt;
  
  &lt;p&gt;&lt;code&gt;"ignored_packages": ["Vintage"],&lt;/code&gt; 中的 Vintage 拿掉 (切換成可支援 Vim mode)&lt;/p&gt;
  
  &lt;p&gt;&lt;code&gt;"vintage_start_in_command_mode": true,&lt;/code&gt; 加入這行, (開啟檔案時會優先啟動 Vim 的 command mode), 這個 Plugin 是搭配 Vintage 使用, 可以幫忙快速定位到目前游標的位置, 加速編輯上的效率。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;p&gt;最後下面是筆者習慣的 Theme 跟 Color Schemes , Theme 是整個軟體介面的主題樣式, 而 Color Scheme 是用來做語法上色時的配色樣本, 網路都有一些常用或是推薦的樣式, 甚至已經幫忙整理好預覽圖, 都可以從而參考找出自己需要的。&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm2.staticflickr.com/1604/25098884972_a69241ee7c_z.jpg" alt=""&gt;&lt;/p&gt;

&lt;h4 id="themesodahttpspackagecontroliopackagestheme2020soda"&gt;&lt;a href="https://packagecontrol.io/packages/Theme%20-%20Soda"&gt;Theme - Soda&lt;/a&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class="language- language-json"&gt;"soda_classic_tabs": true,
"theme": "Soda Dark 3.sublime-theme",
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Add to Preferences.sublime-settings)&lt;/p&gt;

&lt;h4 id="tomorrowcolorschemeshttpspackagecontroliopackagestomorrow20color20schemes"&gt;&lt;a href="https://packagecontrol.io/packages/Tomorrow%20Color%20Schemes"&gt;Tomorrow Color Schemes&lt;/a&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class="language- language-json"&gt;"color_scheme": "Packages/Tomorrow Color Schemes/Tomorrow-Night.tmTheme",
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Add to Preferences.sublime-settings)&lt;/p&gt;</content:encoded></item></channel></rss>